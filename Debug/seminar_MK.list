
seminarh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b98  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f8  08007d68  08007d68  00008d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e60  08008e60  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e60  08008e60  00009e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e68  08008e68  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e68  08008e68  00009e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e6c  08008e6c  00009e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008e70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  200001dc  0800904c  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  0800904c  0000a898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc40  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f0  00000000  00000000  00017e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0001a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0c  00000000  00000000  0001af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230a1  00000000  00000000  0001ba7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011eb9  00000000  00000000  0003eb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2bbf  00000000  00000000  000509d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf8  00000000  00000000  001235d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001282d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d50 	.word	0x08007d50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007d50 	.word	0x08007d50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96a 	b.w	8000f14 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_GPIO_Init+0xb4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f88:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <MX_GPIO_Init+0xb8>)
 8000f8a:	f001 fbcd 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <MX_GPIO_Init+0xb8>)
 8000fa8:	f001 fa12 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fac:	2320      	movs	r3, #32
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_GPIO_Init+0xbc>)
 8000fc0:	f001 fa06 	bl	80023d0 <HAL_GPIO_Init>

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	@ (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f001 fba1 	bl	800275c <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001020:	f000 fcc0 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001f8 	.word	0x200001f8
 800102c:	40005400 	.word	0x40005400
 8001030:	00061a80 	.word	0x00061a80

08001034 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_I2C_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12c      	bne.n	80010b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001078:	2312      	movs	r3, #18
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001084:	2304      	movs	r3, #4
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <HAL_I2C_MspInit+0x8c>)
 8001090:	f001 f99e 	bl	80023d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 800109e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	@ 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020400 	.word	0x40020400

080010c4 <OLED_I2C_Init>:
#define OLED_I2C_ADDR 0x78
#define OLED_I2C &hi2c1
#define OLED_DEAKTIVIRAJ_SCROLL 0x2E
#define OLED_WRITECOMMAND(command) OLED_I2C_Ispis(OLED_I2C_ADDR, 0x00, (command))

void OLED_I2C_Init() {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <OLED_I2C_Init+0x28>)
 80010cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010ce:	e002      	b.n	80010d6 <OLED_I2C_Init+0x12>
		p--;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f9      	bne.n	80010d0 <OLED_I2C_Init+0xc>
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0003d090 	.word	0x0003d090

080010f0 <OLED_I2C_Ispis>:

void OLED_I2C_Ispis(uint8_t address, uint8_t reg, uint8_t data) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	460b      	mov	r3, r1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	4613      	mov	r3, r2
 8001100:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(OLED_I2C, address, dt, 2, 10);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	b299      	uxth	r1, r3
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	230a      	movs	r3, #10
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <OLED_I2C_Ispis+0x38>)
 800111a:	f001 fc63 	bl	80029e4 <HAL_I2C_Master_Transmit>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001f8 	.word	0x200001f8

0800112c <OLED_I2C_IspisVisestruko>:

void OLED_I2C_IspisVisestruko(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b0c7      	sub	sp, #284	@ 0x11c
 8001130:	af02      	add	r7, sp, #8
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800113a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800113e:	600a      	str	r2, [r1, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001146:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800114a:	4622      	mov	r2, r4
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001152:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001156:	4602      	mov	r2, r0
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800115e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001162:	460a      	mov	r2, r1
 8001164:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001166:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800116a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800116e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001172:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001180:	e015      	b.n	80011ae <OLED_I2C_IspisVisestruko+0x82>
	dt[i+1] = data[i];
 8001182:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001186:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800118a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	441a      	add	r2, r3
 8001192:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001196:	3301      	adds	r3, #1
 8001198:	7811      	ldrb	r1, [r2, #0]
 800119a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800119e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80011a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80011a4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011a8:	3301      	adds	r3, #1
 80011aa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011b8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80011bc:	8812      	ldrh	r2, [r2, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d8df      	bhi.n	8001182 <OLED_I2C_IspisVisestruko+0x56>
	HAL_I2C_Master_Transmit(OLED_I2C, address, dt, count+1, 10);
 80011c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011c6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b29b      	uxth	r3, r3
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	200a      	movs	r0, #10
 80011e2:	9000      	str	r0, [sp, #0]
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <OLED_I2C_IspisVisestruko+0xc8>)
 80011e6:	f001 fbfd 	bl	80029e4 <HAL_I2C_Master_Transmit>
}
 80011ea:	bf00      	nop
 80011ec:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	200001f8 	.word	0x200001f8

080011f8 <OLED_AzurirajZaslon>:

void OLED_AzurirajZaslon(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	e01d      	b.n	8001240 <OLED_AzurirajZaslon+0x48>
		OLED_WRITECOMMAND(0xB0 + m);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	3b50      	subs	r3, #80	@ 0x50
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	2100      	movs	r1, #0
 800120e:	2078      	movs	r0, #120	@ 0x78
 8001210:	f7ff ff6e 	bl	80010f0 <OLED_I2C_Ispis>
		OLED_WRITECOMMAND(0x00);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2078      	movs	r0, #120	@ 0x78
 800121a:	f7ff ff69 	bl	80010f0 <OLED_I2C_Ispis>
		OLED_WRITECOMMAND(0x10);
 800121e:	2210      	movs	r2, #16
 8001220:	2100      	movs	r1, #0
 8001222:	2078      	movs	r0, #120	@ 0x78
 8001224:	f7ff ff64 	bl	80010f0 <OLED_I2C_Ispis>

		OLED_I2C_IspisVisestruko(OLED_I2C_ADDR, 0x40, &OLED_Buffer[OLED_W * m], OLED_W);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	01db      	lsls	r3, r3, #7
 800122c:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <OLED_AzurirajZaslon+0x58>)
 800122e:	441a      	add	r2, r3
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	2140      	movs	r1, #64	@ 0x40
 8001234:	2078      	movs	r0, #120	@ 0x78
 8001236:	f7ff ff79 	bl	800112c <OLED_I2C_IspisVisestruko>
	for (m = 0; m < 8; m++) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	3301      	adds	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d9de      	bls.n	8001204 <OLED_AzurirajZaslon+0xc>
	}
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000264 	.word	0x20000264

08001254 <OLED_Popuni>:

void OLED_Popuni(OLED_BOJA_t color) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]

	/* posatvi memoriju */
	memset(OLED_Buffer, (color == OLED_CRNA) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <OLED_Popuni+0x14>
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <OLED_Popuni+0x16>
 8001268:	23ff      	movs	r3, #255	@ 0xff
 800126a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800126e:	4619      	mov	r1, r3
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <OLED_Popuni+0x2c>)
 8001272:	f004 fca4 	bl	8005bbe <memset>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000264 	.word	0x20000264

08001284 <OLED_Init>:

	/* inicijalizacija OLED */

uint8_t OLED_Init(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

	OLED_I2C_Init();
 800128a:	f7ff ff1b 	bl	80010c4 <OLED_I2C_Init>

	if (HAL_I2C_IsDeviceReady(OLED_I2C, OLED_I2C_ADDR, 1, 20000) != HAL_OK) {
 800128e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001292:	2201      	movs	r2, #1
 8001294:	2178      	movs	r1, #120	@ 0x78
 8001296:	485b      	ldr	r0, [pc, #364]	@ (8001404 <OLED_Init+0x180>)
 8001298:	f001 fca2 	bl	8002be0 <HAL_I2C_IsDeviceReady>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <OLED_Init+0x22>
		return 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e0a9      	b.n	80013fa <OLED_Init+0x176>
	}

	uint32_t p = 2500;
 80012a6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80012aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012ac:	e002      	b.n	80012b4 <OLED_Init+0x30>
		p--;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <OLED_Init+0x2a>

	OLED_WRITECOMMAND(0xAE);
 80012ba:	22ae      	movs	r2, #174	@ 0xae
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	@ 0x78
 80012c0:	f7ff ff16 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x20);
 80012c4:	2220      	movs	r2, #32
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	@ 0x78
 80012ca:	f7ff ff11 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x10);
 80012ce:	2210      	movs	r2, #16
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	@ 0x78
 80012d4:	f7ff ff0c 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xB0);
 80012d8:	22b0      	movs	r2, #176	@ 0xb0
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	@ 0x78
 80012de:	f7ff ff07 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xC8);
 80012e2:	22c8      	movs	r2, #200	@ 0xc8
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	@ 0x78
 80012e8:	f7ff ff02 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x00);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	@ 0x78
 80012f2:	f7ff fefd 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x10);
 80012f6:	2210      	movs	r2, #16
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	@ 0x78
 80012fc:	f7ff fef8 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x40);
 8001300:	2240      	movs	r2, #64	@ 0x40
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	@ 0x78
 8001306:	f7ff fef3 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x81);
 800130a:	2281      	movs	r2, #129	@ 0x81
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	@ 0x78
 8001310:	f7ff feee 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xFF);
 8001314:	22ff      	movs	r2, #255	@ 0xff
 8001316:	2100      	movs	r1, #0
 8001318:	2078      	movs	r0, #120	@ 0x78
 800131a:	f7ff fee9 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xA1);
 800131e:	22a1      	movs	r2, #161	@ 0xa1
 8001320:	2100      	movs	r1, #0
 8001322:	2078      	movs	r0, #120	@ 0x78
 8001324:	f7ff fee4 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xA6);
 8001328:	22a6      	movs	r2, #166	@ 0xa6
 800132a:	2100      	movs	r1, #0
 800132c:	2078      	movs	r0, #120	@ 0x78
 800132e:	f7ff fedf 	bl	80010f0 <OLED_I2C_Ispis>
#if (OLED_H == 128)
	OLED_WRITECOMMAND(0xFF);
#else
	OLED_WRITECOMMAND(0xA8);
 8001332:	22a8      	movs	r2, #168	@ 0xa8
 8001334:	2100      	movs	r1, #0
 8001336:	2078      	movs	r0, #120	@ 0x78
 8001338:	f7ff feda 	bl	80010f0 <OLED_I2C_Ispis>
#endif

#if (OLED_H == 32)
	OLED_WRITECOMMAND(0x1F);
#elif (OLED_H == 64)
	OLED_WRITECOMMAND(0x3F);
 800133c:	223f      	movs	r2, #63	@ 0x3f
 800133e:	2100      	movs	r1, #0
 8001340:	2078      	movs	r0, #120	@ 0x78
 8001342:	f7ff fed5 	bl	80010f0 <OLED_I2C_Ispis>
#elif (OLED_H == 128)
	OLED_WRITECOMMAND(0x3F);
#endif
	OLED_WRITECOMMAND(0xA4);
 8001346:	22a4      	movs	r2, #164	@ 0xa4
 8001348:	2100      	movs	r1, #0
 800134a:	2078      	movs	r0, #120	@ 0x78
 800134c:	f7ff fed0 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xD3);
 8001350:	22d3      	movs	r2, #211	@ 0xd3
 8001352:	2100      	movs	r1, #0
 8001354:	2078      	movs	r0, #120	@ 0x78
 8001356:	f7ff fecb 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x00);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2078      	movs	r0, #120	@ 0x78
 8001360:	f7ff fec6 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xD5);
 8001364:	22d5      	movs	r2, #213	@ 0xd5
 8001366:	2100      	movs	r1, #0
 8001368:	2078      	movs	r0, #120	@ 0x78
 800136a:	f7ff fec1 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xF0);
 800136e:	22f0      	movs	r2, #240	@ 0xf0
 8001370:	2100      	movs	r1, #0
 8001372:	2078      	movs	r0, #120	@ 0x78
 8001374:	f7ff febc 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xD9);
 8001378:	22d9      	movs	r2, #217	@ 0xd9
 800137a:	2100      	movs	r1, #0
 800137c:	2078      	movs	r0, #120	@ 0x78
 800137e:	f7ff feb7 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x22);
 8001382:	2222      	movs	r2, #34	@ 0x22
 8001384:	2100      	movs	r1, #0
 8001386:	2078      	movs	r0, #120	@ 0x78
 8001388:	f7ff feb2 	bl	80010f0 <OLED_I2C_Ispis>

	OLED_WRITECOMMAND(0xDA);
 800138c:	22da      	movs	r2, #218	@ 0xda
 800138e:	2100      	movs	r1, #0
 8001390:	2078      	movs	r0, #120	@ 0x78
 8001392:	f7ff fead 	bl	80010f0 <OLED_I2C_Ispis>
#if (OLED_H == 32)
	OLED_WRITECOMMAND(0x02);
#elif (OLED_H == 64)
	OLED_WRITECOMMAND(0x12);
 8001396:	2212      	movs	r2, #18
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	@ 0x78
 800139c:	f7ff fea8 	bl	80010f0 <OLED_I2C_Ispis>
#elif (OLED_H == 128)
	OLED_WRITECOMMAND(0x12);
#endif

	OLED_WRITECOMMAND(0xDB);
 80013a0:	22db      	movs	r2, #219	@ 0xdb
 80013a2:	2100      	movs	r1, #0
 80013a4:	2078      	movs	r0, #120	@ 0x78
 80013a6:	f7ff fea3 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x20);
 80013aa:	2220      	movs	r2, #32
 80013ac:	2100      	movs	r1, #0
 80013ae:	2078      	movs	r0, #120	@ 0x78
 80013b0:	f7ff fe9e 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x8D);
 80013b4:	228d      	movs	r2, #141	@ 0x8d
 80013b6:	2100      	movs	r1, #0
 80013b8:	2078      	movs	r0, #120	@ 0x78
 80013ba:	f7ff fe99 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0x14);
 80013be:	2214      	movs	r2, #20
 80013c0:	2100      	movs	r1, #0
 80013c2:	2078      	movs	r0, #120	@ 0x78
 80013c4:	f7ff fe94 	bl	80010f0 <OLED_I2C_Ispis>
	OLED_WRITECOMMAND(0xAF);
 80013c8:	22af      	movs	r2, #175	@ 0xaf
 80013ca:	2100      	movs	r1, #0
 80013cc:	2078      	movs	r0, #120	@ 0x78
 80013ce:	f7ff fe8f 	bl	80010f0 <OLED_I2C_Ispis>


	OLED_WRITECOMMAND(OLED_DEAKTIVIRAJ_SCROLL);
 80013d2:	222e      	movs	r2, #46	@ 0x2e
 80013d4:	2100      	movs	r1, #0
 80013d6:	2078      	movs	r0, #120	@ 0x78
 80013d8:	f7ff fe8a 	bl	80010f0 <OLED_I2C_Ispis>

	/* Čisti ekran (crna) */
	OLED_Popuni(OLED_CRNA);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff ff39 	bl	8001254 <OLED_Popuni>

	/* Osvježi ekran */
	OLED_AzurirajZaslon();
 80013e2:	f7ff ff09 	bl	80011f8 <OLED_AzurirajZaslon>

	/* Kordinate na (0, 0) */
	OLED.X = 0;
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <OLED_Init+0x184>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
	OLED.Y = 0;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <OLED_Init+0x184>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	805a      	strh	r2, [r3, #2]

	/* Inicijalizacija je OK */
	OLED.Inicijalizirano = 1;
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <OLED_Init+0x184>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	715a      	strb	r2, [r3, #5]

	/* Vrati OK */
	return 1;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001f8 	.word	0x200001f8
 8001408:	20000664 	.word	0x20000664

0800140c <OLED_XY>:

	/* postavljanje koordinati */

void OLED_XY(uint16_t x, uint16_t y) {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	460a      	mov	r2, r1
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	4613      	mov	r3, r2
 800141a:	80bb      	strh	r3, [r7, #4]
	OLED.X = x;
 800141c:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <OLED_XY+0x28>)
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	8013      	strh	r3, [r2, #0]
	OLED.Y = y;
 8001422:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <OLED_XY+0x28>)
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	8053      	strh	r3, [r2, #2]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000664 	.word	0x20000664

08001438 <OLED_Piksel>:

void OLED_Piksel(uint16_t x, uint16_t y, OLED_BOJA_t color) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
 8001442:	460b      	mov	r3, r1
 8001444:	80bb      	strh	r3, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	70fb      	strb	r3, [r7, #3]
	if (
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	2b7f      	cmp	r3, #127	@ 0x7f
 800144e:	d848      	bhi.n	80014e2 <OLED_Piksel+0xaa>
		x >= OLED_W ||
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	2b3f      	cmp	r3, #63	@ 0x3f
 8001454:	d845      	bhi.n	80014e2 <OLED_Piksel+0xaa>
		y >= OLED_H
	) {
		return;
	}

	if (OLED.Obrnuto) {
 8001456:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <OLED_Piksel+0xb8>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <OLED_Piksel+0x34>
		color = (OLED_BOJA_t) !color;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	70fb      	strb	r3, [r7, #3]
	}

	/* Postavi boju*/
	if (color == OLED_BIJELA) {
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d11a      	bne.n	80014a8 <OLED_Piksel+0x70>
		OLED_Buffer[x + (y / 8) * OLED_W] |= 1 << (y % 8);
 8001472:	88fa      	ldrh	r2, [r7, #6]
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	b298      	uxth	r0, r3
 800147a:	4603      	mov	r3, r0
 800147c:	01db      	lsls	r3, r3, #7
 800147e:	4413      	add	r3, r2
 8001480:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <OLED_Piksel+0xbc>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	b25a      	sxtb	r2, r3
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	b25b      	sxtb	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b259      	sxtb	r1, r3
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	4603      	mov	r3, r0
 800149c:	01db      	lsls	r3, r3, #7
 800149e:	4413      	add	r3, r2
 80014a0:	b2c9      	uxtb	r1, r1
 80014a2:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <OLED_Piksel+0xbc>)
 80014a4:	54d1      	strb	r1, [r2, r3]
 80014a6:	e01d      	b.n	80014e4 <OLED_Piksel+0xac>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_W] &= ~(1 << (y % 8));
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	b298      	uxth	r0, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	01db      	lsls	r3, r3, #7
 80014b4:	4413      	add	r3, r2
 80014b6:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <OLED_Piksel+0xbc>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	b259      	sxtb	r1, r3
 80014d2:	88fa      	ldrh	r2, [r7, #6]
 80014d4:	4603      	mov	r3, r0
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	4413      	add	r3, r2
 80014da:	b2c9      	uxtb	r1, r1
 80014dc:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <OLED_Piksel+0xbc>)
 80014de:	54d1      	strb	r1, [r2, r3]
 80014e0:	e000      	b.n	80014e4 <OLED_Piksel+0xac>
		return;
 80014e2:	bf00      	nop
	}
}
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000664 	.word	0x20000664
 80014f4:	20000264 	.word	0x20000264

080014f8 <OLED_Character>:

char OLED_Character(char ch, FontDef_t* Font, OLED_BOJA_t color) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Provjeri ima li mjesta na OLED-u */
	if (
		OLED_W <= (OLED.X + Font->Font_W) ||
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <OLED_Character+0xf8>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
	if (
 8001514:	2b7f      	cmp	r3, #127	@ 0x7f
 8001516:	dc07      	bgt.n	8001528 <OLED_Character+0x30>
		OLED_H <= (OLED.Y + Font->Font_H)
 8001518:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <OLED_Character+0xf8>)
 800151a:	885b      	ldrh	r3, [r3, #2]
 800151c:	461a      	mov	r2, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	4413      	add	r3, r2
		OLED_W <= (OLED.X + Font->Font_W) ||
 8001524:	2b3f      	cmp	r3, #63	@ 0x3f
 8001526:	dd01      	ble.n	800152c <OLED_Character+0x34>
	) {
		return 0;
 8001528:	2300      	movs	r3, #0
 800152a:	e05d      	b.n	80015e8 <OLED_Character+0xf0>
	}

	for (i = 0; i < Font->Font_H; i++) {
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e04b      	b.n	80015ca <OLED_Character+0xd2>
			b = Font->data[(ch - 32) * Font->Font_H + i];
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3b20      	subs	r3, #32
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	7849      	ldrb	r1, [r1, #1]
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4619      	mov	r1, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	60fb      	str	r3, [r7, #12]
			for (j = 0; j < Font->Font_W; j++) {
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	e030      	b.n	80015b8 <OLED_Character+0xc0>
				if ((b << j) & 0x8000) {
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d010      	beq.n	8001588 <OLED_Character+0x90>
					OLED_Piksel(OLED.X + j, (OLED.Y + i), (OLED_BOJA_t) color);
 8001566:	4b22      	ldr	r3, [pc, #136]	@ (80015f0 <OLED_Character+0xf8>)
 8001568:	881a      	ldrh	r2, [r3, #0]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	b298      	uxth	r0, r3
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <OLED_Character+0xf8>)
 8001574:	885a      	ldrh	r2, [r3, #2]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4413      	add	r3, r2
 800157c:	b29b      	uxth	r3, r3
 800157e:	79ba      	ldrb	r2, [r7, #6]
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff ff59 	bl	8001438 <OLED_Piksel>
 8001586:	e014      	b.n	80015b2 <OLED_Character+0xba>
				} else {
					OLED_Piksel(OLED.X + j, (OLED.Y + i), (OLED_BOJA_t)!color);
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <OLED_Character+0xf8>)
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b298      	uxth	r0, r3
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <OLED_Character+0xf8>)
 8001596:	885a      	ldrh	r2, [r3, #2]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4413      	add	r3, r2
 800159e:	b299      	uxth	r1, r3
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	f7ff ff43 	bl	8001438 <OLED_Piksel>
			for (j = 0; j < Font->Font_W; j++) {
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	3301      	adds	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d3c8      	bcc.n	8001556 <OLED_Character+0x5e>
	for (i = 0; i < Font->Font_H; i++) {
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	461a      	mov	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d3ad      	bcc.n	8001532 <OLED_Character+0x3a>
				}
			}
		}

	/* Povećaj pointer */
	OLED.X += Font->Font_W;
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <OLED_Character+0xf8>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <OLED_Character+0xf8>)
 80015e4:	801a      	strh	r2, [r3, #0]

	/* Vraća charachter koji je napisan */
	return ch;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000664 	.word	0x20000664

080015f4 <OLED_String>:

	/* ispis na OLED */
char OLED_String(char* str, FontDef_t* Font, OLED_BOJA_t color) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	71fb      	strb	r3, [r7, #7]

	while (*str) {
 8001602:	e012      	b.n	800162a <OLED_String+0x36>
		if (OLED_Character(*str, Font, color) != *str) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff73 	bl	80014f8 <OLED_Character>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d002      	beq.n	8001624 <OLED_String+0x30>
			return *str;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	e008      	b.n	8001636 <OLED_String+0x42>
		}

		str++;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1e8      	bne.n	8001604 <OLED_String+0x10>
	}

	return *str;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7f1b      	ldrb	r3, [r3, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 8083 	bne.w	8001758 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Zabiljezeno==0)
 8001652:	4b45      	ldr	r3, [pc, #276]	@ (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d11a      	bne.n	8001690 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Vrijednost1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800165a:	2100      	movs	r1, #0
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f003 f875 	bl	800474c <HAL_TIM_ReadCapturedValue>
 8001662:	4603      	mov	r3, r0
 8001664:	4a41      	ldr	r2, [pc, #260]	@ (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001666:	6013      	str	r3, [r2, #0]
			Zabiljezeno = 1;
 8001668:	4b3f      	ldr	r3, [pc, #252]	@ (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 020a 	bic.w	r2, r2, #10
 800167c:	621a      	str	r2, [r3, #32]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0202 	orr.w	r2, r2, #2
 800168c:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800168e:	e063      	b.n	8001758 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Zabiljezeno==1)
 8001690:	4b35      	ldr	r3, [pc, #212]	@ (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d15f      	bne.n	8001758 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Vrijednost2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f003 f856 	bl	800474c <HAL_TIM_ReadCapturedValue>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a33      	ldr	r2, [pc, #204]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016a4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Vrijednost2 > IC_Vrijednost1)
 80016ae:	4b30      	ldr	r3, [pc, #192]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d907      	bls.n	80016ca <HAL_TIM_IC_CaptureCallback+0x8a>
				Razlika = IC_Vrijednost2-IC_Vrijednost1;
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e00f      	b.n	80016ea <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Vrijednost1 > IC_Vrijednost2)
 80016ca:	4b28      	ldr	r3, [pc, #160]	@ (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d909      	bls.n	80016ea <HAL_TIM_IC_CaptureCallback+0xaa>
				Razlika = (0xffff - IC_Vrijednost1) + IC_Vrijednost2;
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <HAL_TIM_IC_CaptureCallback+0x130>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80016e4:	33ff      	adds	r3, #255	@ 0xff
 80016e6:	4a23      	ldr	r2, [pc, #140]	@ (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016e8:	6013      	str	r3, [r2, #0]
			Udaljenost = Razlika * 0.034/2;
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff28 	bl	8000544 <__aeabi_ui2d>
 80016f4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001760 <HAL_TIM_IC_CaptureCallback+0x120>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff9d 	bl	8000638 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800170e:	f7ff f8bd 	bl	800088c <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa65 	bl	8000be8 <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001724:	701a      	strb	r2, [r3, #0]
			Zabiljezeno = 0;
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 020a 	bic.w	r2, r2, #10
 800173a:	621a      	str	r2, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a12      	ldr	r2, [r2, #32]
 8001746:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0202 	bic.w	r2, r2, #2
 8001756:	60da      	str	r2, [r3, #12]
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	b020c49c 	.word	0xb020c49c
 8001764:	3fa16872 	.word	0x3fa16872
 8001768:	20000258 	.word	0x20000258
 800176c:	2000024c 	.word	0x2000024c
 8001770:	20000250 	.word	0x20000250
 8001774:	20000254 	.word	0x20000254
 8001778:	20000259 	.word	0x20000259
 800177c:	20000670 	.word	0x20000670

08001780 <HCSR04>:
void HCSR04 (void)
	{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800178a:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <HCSR04+0x38>)
 800178c:	f000 ffcc 	bl	8002728 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001790:	200a      	movs	r0, #10
 8001792:	f000 fce7 	bl	8002164 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800179c:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <HCSR04+0x38>)
 800179e:	f000 ffc3 	bl	8002728 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HCSR04+0x3c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HCSR04+0x3c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0202 	orr.w	r2, r2, #2
 80017b0:	60da      	str	r2, [r3, #12]
	}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020000 	.word	0x40020000
 80017bc:	20000670 	.word	0x20000670

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c4:	f000 fc5c 	bl	8002080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c8:	f000 f88c 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017cc:	f7ff fba4 	bl	8000f18 <MX_GPIO_Init>
  MX_TIM1_Init();
 80017d0:	f000 fa28 	bl	8001c24 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017d4:	f000 fa7c 	bl	8001cd0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80017d8:	f7ff fbfe 	bl	8000fd8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80017dc:	f000 fadc 	bl	8001d98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // TIM1

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80017e0:	2100      	movs	r1, #0
 80017e2:	4836      	ldr	r0, [pc, #216]	@ (80018bc <main+0xfc>)
 80017e4:	f002 fc3c 	bl	8004060 <HAL_TIM_IC_Start_IT>

  // MOTOR 1

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017e8:	2100      	movs	r1, #0
 80017ea:	4835      	ldr	r0, [pc, #212]	@ (80018c0 <main+0x100>)
 80017ec:	f002 fb20 	bl	8003e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017f0:	2104      	movs	r1, #4
 80017f2:	4833      	ldr	r0, [pc, #204]	@ (80018c0 <main+0x100>)
 80017f4:	f002 fb1c 	bl	8003e30 <HAL_TIM_PWM_Start>

  // MOTOR 2

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017f8:	2100      	movs	r1, #0
 80017fa:	4832      	ldr	r0, [pc, #200]	@ (80018c4 <main+0x104>)
 80017fc:	f002 fb18 	bl	8003e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001800:	2104      	movs	r1, #4
 8001802:	4830      	ldr	r0, [pc, #192]	@ (80018c4 <main+0x104>)
 8001804:	f002 fb14 	bl	8003e30 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  OLED_Init();
 8001808:	f7ff fd3c 	bl	8001284 <OLED_Init>
	  OLED_XY (10,20);
 800180c:	2114      	movs	r1, #20
 800180e:	200a      	movs	r0, #10
 8001810:	f7ff fdfc 	bl	800140c <OLED_XY>
	  OLED_String ("Udaljenost", &Font_11x18, 1);
 8001814:	2201      	movs	r2, #1
 8001816:	492c      	ldr	r1, [pc, #176]	@ (80018c8 <main+0x108>)
 8001818:	482c      	ldr	r0, [pc, #176]	@ (80018cc <main+0x10c>)
 800181a:	f7ff feeb 	bl	80015f4 <OLED_String>
	  snprintf(Udaljenost_ch, sizeof(Udaljenost_ch), "%d", Udaljenost);
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <main+0x110>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4a2c      	ldr	r2, [pc, #176]	@ (80018d4 <main+0x114>)
 8001824:	2105      	movs	r1, #5
 8001826:	482c      	ldr	r0, [pc, #176]	@ (80018d8 <main+0x118>)
 8001828:	f004 f952 	bl	8005ad0 <sniprintf>
	  OLED_XY (10, 40);
 800182c:	2128      	movs	r1, #40	@ 0x28
 800182e:	200a      	movs	r0, #10
 8001830:	f7ff fdec 	bl	800140c <OLED_XY>
	  OLED_String (Udaljenost_ch, &Font_11x18, 1);
 8001834:	2201      	movs	r2, #1
 8001836:	4924      	ldr	r1, [pc, #144]	@ (80018c8 <main+0x108>)
 8001838:	4827      	ldr	r0, [pc, #156]	@ (80018d8 <main+0x118>)
 800183a:	f7ff fedb 	bl	80015f4 <OLED_String>
	  OLED_XY (45, 40);
 800183e:	2128      	movs	r1, #40	@ 0x28
 8001840:	202d      	movs	r0, #45	@ 0x2d
 8001842:	f7ff fde3 	bl	800140c <OLED_XY>
	  OLED_String ("cm", &Font_11x18, 1);
 8001846:	2201      	movs	r2, #1
 8001848:	491f      	ldr	r1, [pc, #124]	@ (80018c8 <main+0x108>)
 800184a:	4824      	ldr	r0, [pc, #144]	@ (80018dc <main+0x11c>)
 800184c:	f7ff fed2 	bl	80015f4 <OLED_String>
	  OLED_AzurirajZaslon();
 8001850:	f7ff fcd2 	bl	80011f8 <OLED_AzurirajZaslon>

	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){ // PIR sensor
 8001854:	e029      	b.n	80018aa <main+0xea>

		  HCSR04();
 8001856:	f7ff ff93 	bl	8001780 <HCSR04>
		  HAL_Delay(200);
 800185a:	20c8      	movs	r0, #200	@ 0xc8
 800185c:	f000 fc82 	bl	8002164 <HAL_Delay>

		  if(Udaljenost < 10){ // HC-SR04
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <main+0x110>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b09      	cmp	r3, #9
 8001866:	d810      	bhi.n	800188a <main+0xca>

			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001868:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <main+0x100>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2200      	movs	r2, #0
 800186e:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
 8001870:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <main+0x100>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2246      	movs	r2, #70	@ 0x46
 8001876:	639a      	str	r2, [r3, #56]	@ 0x38

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 70);
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <main+0x104>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2246      	movs	r2, #70	@ 0x46
 800187e:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,  0);
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <main+0x104>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	639a      	str	r2, [r3, #56]	@ 0x38
 8001888:	e00f      	b.n	80018aa <main+0xea>


		  } else {

			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <main+0x100>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <main+0x100>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	639a      	str	r2, [r3, #56]	@ 0x38

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <main+0x104>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <main+0x104>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38
	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){ // PIR sensor
 80018aa:	2120      	movs	r1, #32
 80018ac:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <main+0x120>)
 80018ae:	f000 ff23 	bl	80026f8 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ce      	bne.n	8001856 <main+0x96>
	  OLED_Init();
 80018b8:	e7a6      	b.n	8001808 <main+0x48>
 80018ba:	bf00      	nop
 80018bc:	20000670 	.word	0x20000670
 80018c0:	200006b8 	.word	0x200006b8
 80018c4:	20000700 	.word	0x20000700
 80018c8:	20000000 	.word	0x20000000
 80018cc:	08007d68 	.word	0x08007d68
 80018d0:	20000259 	.word	0x20000259
 80018d4:	08007d74 	.word	0x08007d74
 80018d8:	2000025c 	.word	0x2000025c
 80018dc:	08007d78 	.word	0x08007d78
 80018e0:	40020400 	.word	0x40020400

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	@ 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2234      	movs	r2, #52	@ 0x34
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 f963 	bl	8005bbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b23      	ldr	r3, [pc, #140]	@ (800199c <SystemClock_Config+0xb8>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	4a22      	ldr	r2, [pc, #136]	@ (800199c <SystemClock_Config+0xb8>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	@ 0x40
 8001918:	4b20      	ldr	r3, [pc, #128]	@ (800199c <SystemClock_Config+0xb8>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <SystemClock_Config+0xbc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001930:	4a1b      	ldr	r2, [pc, #108]	@ (80019a0 <SystemClock_Config+0xbc>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <SystemClock_Config+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001944:	2302      	movs	r3, #2
 8001946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800194c:	2310      	movs	r3, #16
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4618      	mov	r0, r3
 800195a:	f001 ff7b 	bl	8003854 <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001964:	f000 f81e 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	230f      	movs	r3, #15
 800196a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fcb6 	bl	80032f4 <HAL_RCC_ClockConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800198e:	f000 f809 	bl	80019a4 <Error_Handler>
  }
}
 8001992:	bf00      	nop
 8001994:	3750      	adds	r7, #80	@ 0x50
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <Error_Handler+0x8>

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <NMI_Handler+0x4>

08001a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <MemManage_Handler+0x4>

08001a18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a56:	f000 fb65 	bl	8002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <TIM1_CC_IRQHandler+0x10>)
 8001a66:	f002 fc23 	bl	80042b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000670 	.word	0x20000670

08001a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return 1;
 8001a78:	2301      	movs	r3, #1
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_kill>:

int _kill(int pid, int sig)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a8e:	f004 f8e9 	bl	8005c64 <__errno>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2216      	movs	r2, #22
 8001a96:	601a      	str	r2, [r3, #0]
  return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_exit>:

void _exit (int status)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffe7 	bl	8001a84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ab6:	bf00      	nop
 8001ab8:	e7fd      	b.n	8001ab6 <_exit+0x12>

08001aba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e00a      	b.n	8001ae2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001acc:	f3af 8000 	nop.w
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60ba      	str	r2, [r7, #8]
 8001ad8:	b2ca      	uxtb	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf0      	blt.n	8001acc <_read+0x12>
  }

  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e009      	b.n	8001b1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	60ba      	str	r2, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf1      	blt.n	8001b06 <_write+0x12>
  }
  return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_close>:

int _close(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b54:	605a      	str	r2, [r3, #4]
  return 0;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_isatty>:

int _isatty(int file)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f004 f84e 	bl	8005c64 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	@ (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20020000 	.word	0x20020000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	2000066c 	.word	0x2000066c
 8001bfc:	20000898 	.word	0x20000898

08001c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	@ (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c40:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c42:	4a22      	ldr	r2, [pc, #136]	@ (8001ccc <MX_TIM1_Init+0xa8>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c48:	220f      	movs	r2, #15
 8001c4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001c58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c6c:	4816      	ldr	r0, [pc, #88]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c6e:	f002 f9a7 	bl	8003fc0 <HAL_TIM_IC_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c78:	f7ff fe94 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001c8c:	f003 f976 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c96:	f7ff fe85 	bl	80019a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	2200      	movs	r2, #0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_TIM1_Init+0xa4>)
 8001cb2:	f002 fbed 	bl	8004490 <HAL_TIM_IC_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001cbc:	f7ff fe72 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000670 	.word	0x20000670
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	f107 0320 	add.w	r3, r7, #32
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf2:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001cf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001d06:	4b23      	ldr	r3, [pc, #140]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d08:	2263      	movs	r2, #99	@ 0x63
 8001d0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d18:	481e      	ldr	r0, [pc, #120]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d1a:	f002 f839 	bl	8003d90 <HAL_TIM_PWM_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001d24:	f7ff fe3e 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d30:	f107 0320 	add.w	r3, r7, #32
 8001d34:	4619      	mov	r1, r3
 8001d36:	4817      	ldr	r0, [pc, #92]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d38:	f003 f920 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001d42:	f7ff fe2f 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d46:	2360      	movs	r3, #96	@ 0x60
 8001d48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480d      	ldr	r0, [pc, #52]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d5e:	f002 fc33 	bl	80045c8 <HAL_TIM_PWM_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001d68:	f7ff fe1c 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8001d6c:	2364      	movs	r3, #100	@ 0x64
 8001d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2204      	movs	r2, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d78:	f002 fc26 	bl	80045c8 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d82:	f7ff fe0f 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d86:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <MX_TIM2_Init+0xc4>)
 8001d88:	f000 f8f2 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200006b8 	.word	0x200006b8

08001d98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001dbc:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <MX_TIM3_Init+0xc8>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001dc0:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001dce:	2263      	movs	r2, #99	@ 0x63
 8001dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dde:	481f      	ldr	r0, [pc, #124]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001de0:	f001 ffd6 	bl	8003d90 <HAL_TIM_PWM_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001dea:	f7ff fddb 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4817      	ldr	r0, [pc, #92]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001dfe:	f003 f8bd 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001e08:	f7ff fdcc 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	@ 0x60
 8001e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	480e      	ldr	r0, [pc, #56]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001e24:	f002 fbd0 	bl	80045c8 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e2e:	f7ff fdb9 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8001e32:	2364      	movs	r3, #100	@ 0x64
 8001e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001e3e:	f002 fbc3 	bl	80045c8 <HAL_TIM_PWM_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001e48:	f7ff fdac 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e4c:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <MX_TIM3_Init+0xc4>)
 8001e4e:	f000 f88f 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	@ 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000700 	.word	0x20000700
 8001e60:	40000400 	.word	0x40000400

08001e64 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_TIM_IC_MspInit+0x94>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d134      	bne.n	8001ef0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <HAL_TIM_IC_MspInit+0x98>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <HAL_TIM_IC_MspInit+0x98>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_TIM_IC_MspInit+0x98>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_TIM_IC_MspInit+0x98>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <HAL_TIM_IC_MspInit+0x98>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_TIM_IC_MspInit+0x98>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ebe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <HAL_TIM_IC_MspInit+0x9c>)
 8001edc:	f000 fa78 	bl	80023d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	201b      	movs	r0, #27
 8001ee6:	f000 fa3c 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001eea:	201b      	movs	r0, #27
 8001eec:	f000 fa55 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	@ 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x64>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x64>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x64>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f32:	e012      	b.n	8001f5a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0c      	ldr	r2, [pc, #48]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x68>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x64>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x64>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x64>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40000400 	.word	0x40000400

08001f70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f90:	d11e      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <HAL_TIM_MspPostInit+0xb0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <HAL_TIM_MspPostInit+0xb0>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <HAL_TIM_MspPostInit+0xb0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4816      	ldr	r0, [pc, #88]	@ (8002024 <HAL_TIM_MspPostInit+0xb4>)
 8001fca:	f000 fa01 	bl	80023d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fce:	e022      	b.n	8002016 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <HAL_TIM_MspPostInit+0xb8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11d      	bne.n	8002016 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_TIM_MspPostInit+0xb0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <HAL_TIM_MspPostInit+0xb0>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_TIM_MspPostInit+0xb0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff6:	23c0      	movs	r3, #192	@ 0xc0
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002006:	2302      	movs	r3, #2
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <HAL_TIM_MspPostInit+0xb4>)
 8002012:	f000 f9dd 	bl	80023d0 <HAL_GPIO_Init>
}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000
 8002028:	40000400 	.word	0x40000400

0800202c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800202c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002064 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002030:	f7ff fde6 	bl	8001c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002034:	480c      	ldr	r0, [pc, #48]	@ (8002068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002036:	490d      	ldr	r1, [pc, #52]	@ (800206c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800204c:	4c0a      	ldr	r4, [pc, #40]	@ (8002078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800205a:	f003 fe09 	bl	8005c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205e:	f7ff fbaf 	bl	80017c0 <main>
  bx  lr    
 8002062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800206c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002070:	08008e70 	.word	0x08008e70
  ldr r2, =_sbss
 8002074:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002078:	20000898 	.word	0x20000898

0800207c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC_IRQHandler>
	...

08002080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002084:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <HAL_Init+0x40>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_Init+0x40>)
 8002096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <HAL_Init+0x40>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 f94f 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	200f      	movs	r0, #15
 80020b0:	f000 f808 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fc7c 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_InitTick+0x54>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_InitTick+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020da:	fbb3 f3f1 	udiv	r3, r3, r1
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f967 	bl	80023b6 <HAL_SYSTICK_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00e      	b.n	8002110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d80a      	bhi.n	800210e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f000 f92f 	bl	8002362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002104:	4a06      	ldr	r2, [pc, #24]	@ (8002120 <HAL_InitTick+0x5c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000008 	.word	0x20000008
 800211c:	20000010 	.word	0x20000010
 8002120:	2000000c 	.word	0x2000000c

08002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_IncTick+0x20>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_IncTick+0x24>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <HAL_IncTick+0x24>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000010 	.word	0x20000010
 8002148:	20000748 	.word	0x20000748

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000748 	.word	0x20000748

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d005      	beq.n	800218a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_Delay+0x44>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800218a:	bf00      	nop
 800218c:	f7ff ffde 	bl	800214c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f7      	bhi.n	800218c <HAL_Delay+0x28>
  {
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000010 	.word	0x20000010

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	@ (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	@ (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	@ (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	@ (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	@ 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff29 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff3e 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff8e 	bl	80022a0 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5d 	bl	800224c <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff31 	bl	8002210 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	@ 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e165      	b.n	80026b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	f040 8154 	bne.w	80026b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d005      	beq.n	8002422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	2b02      	cmp	r3, #2
 8002420:	d130      	bne.n	8002484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 0201 	and.w	r2, r3, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b03      	cmp	r3, #3
 800248e:	d017      	beq.n	80024c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d123      	bne.n	8002514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0203 	and.w	r2, r3, #3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80ae 	beq.w	80026b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b5d      	ldr	r3, [pc, #372]	@ (80026d0 <HAL_GPIO_Init+0x300>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	4a5c      	ldr	r2, [pc, #368]	@ (80026d0 <HAL_GPIO_Init+0x300>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002564:	6453      	str	r3, [r2, #68]	@ 0x44
 8002566:	4b5a      	ldr	r3, [pc, #360]	@ (80026d0 <HAL_GPIO_Init+0x300>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002572:	4a58      	ldr	r2, [pc, #352]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4f      	ldr	r2, [pc, #316]	@ (80026d8 <HAL_GPIO_Init+0x308>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_Init+0x21a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4e      	ldr	r2, [pc, #312]	@ (80026dc <HAL_GPIO_Init+0x30c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_Init+0x216>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4d      	ldr	r2, [pc, #308]	@ (80026e0 <HAL_GPIO_Init+0x310>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0x212>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4c      	ldr	r2, [pc, #304]	@ (80026e4 <HAL_GPIO_Init+0x314>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4b      	ldr	r2, [pc, #300]	@ (80026e8 <HAL_GPIO_Init+0x318>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_Init+0x20a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4a      	ldr	r2, [pc, #296]	@ (80026ec <HAL_GPIO_Init+0x31c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_Init+0x206>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a49      	ldr	r2, [pc, #292]	@ (80026f0 <HAL_GPIO_Init+0x320>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_Init+0x202>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025d2:	2307      	movs	r3, #7
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a31      	ldr	r2, [pc, #196]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a26      	ldr	r2, [pc, #152]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1c      	ldr	r2, [pc, #112]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <HAL_GPIO_Init+0x324>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae96 	bls.w	80023ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e001      	b.n	800271a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002744:	e003      	b.n	800274e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	041a      	lsls	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e12b      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fc56 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	@ 0x24
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c0:	f000 fe8a 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a81      	ldr	r2, [pc, #516]	@ (80029d0 <HAL_I2C_Init+0x274>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d807      	bhi.n	80027e0 <HAL_I2C_Init+0x84>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a80      	ldr	r2, [pc, #512]	@ (80029d4 <HAL_I2C_Init+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e006      	b.n	80027ee <HAL_I2C_Init+0x92>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a7d      	ldr	r2, [pc, #500]	@ (80029d8 <HAL_I2C_Init+0x27c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0e7      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a78      	ldr	r2, [pc, #480]	@ (80029dc <HAL_I2C_Init+0x280>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_I2C_Init+0x274>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d802      	bhi.n	8002830 <HAL_I2C_Init+0xd4>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	e009      	b.n	8002844 <HAL_I2C_Init+0xe8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a69      	ldr	r2, [pc, #420]	@ (80029e0 <HAL_I2C_Init+0x284>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	3301      	adds	r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002856:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	495c      	ldr	r1, [pc, #368]	@ (80029d0 <HAL_I2C_Init+0x274>)
 8002860:	428b      	cmp	r3, r1
 8002862:	d819      	bhi.n	8002898 <HAL_I2C_Init+0x13c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e59      	subs	r1, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002878:	400b      	ands	r3, r1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_I2C_Init+0x138>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e59      	subs	r1, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fbb1 f3f3 	udiv	r3, r1, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	e051      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002894:	2304      	movs	r3, #4
 8002896:	e04f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_I2C_Init+0x168>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e012      	b.n	80028ea <HAL_I2C_Init+0x18e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Init+0x196>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e022      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10e      	bne.n	8002918 <HAL_I2C_Init+0x1bc>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e58      	subs	r0, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	fbb0 f3f3 	udiv	r3, r0, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6809      	ldr	r1, [r1, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002966:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6911      	ldr	r1, [r2, #16]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	000186a0 	.word	0x000186a0
 80029d4:	001e847f 	.word	0x001e847f
 80029d8:	003d08ff 	.word	0x003d08ff
 80029dc:	431bde83 	.word	0x431bde83
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
 80029f4:	4613      	mov	r3, r2
 80029f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff fba8 	bl	800214c <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f040 80e0 	bne.w	8002bcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	4970      	ldr	r1, [pc, #448]	@ (8002bd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fa92 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0d3      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x50>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0cc      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d007      	beq.n	8002a5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2221      	movs	r2, #33	@ 0x21
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2210      	movs	r2, #16
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a50      	ldr	r2, [pc, #320]	@ (8002bdc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f9ca 	bl	8002e3c <I2C_MasterRequestWrite>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08d      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ac8:	e066      	b.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6a39      	ldr	r1, [r7, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fb50 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb47 	bl	8003204 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d107      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e01a      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d194      	bne.n	8002aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	00100002 	.word	0x00100002
 8002bdc:	ffff0000 	.word	0xffff0000

08002be0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff faac 	bl	800214c <HAL_GetTick>
 8002bf4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f040 8111 	bne.w	8002e2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2319      	movs	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4988      	ldr	r1, [pc, #544]	@ (8002e34 <HAL_I2C_IsDeviceReady+0x254>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f994 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e104      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_IsDeviceReady+0x50>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0fd      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d007      	beq.n	8002c56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2224      	movs	r2, #36	@ 0x24
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a70      	ldr	r2, [pc, #448]	@ (8002e38 <HAL_I2C_IsDeviceReady+0x258>)
 8002c78:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f952 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb0:	d103      	bne.n	8002cba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0b6      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ccc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cce:	f7ff fa3d 	bl	800214c <HAL_GetTick>
 8002cd2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d02:	e025      	b.n	8002d50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7ff fa22 	bl	800214c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <HAL_I2C_IsDeviceReady+0x13a>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	22a0      	movs	r2, #160	@ 0xa0
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d5a:	d005      	beq.n	8002d68 <HAL_I2C_IsDeviceReady+0x188>
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <HAL_I2C_IsDeviceReady+0x188>
 8002d62:	7dbb      	ldrb	r3, [r7, #22]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0cd      	beq.n	8002d04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d129      	bne.n	8002dd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2319      	movs	r3, #25
 8002daa:	2201      	movs	r2, #1
 8002dac:	4921      	ldr	r1, [pc, #132]	@ (8002e34 <HAL_I2C_IsDeviceReady+0x254>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f8c6 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e036      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e02c      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2319      	movs	r3, #25
 8002df2:	2201      	movs	r2, #1
 8002df4:	490f      	ldr	r1, [pc, #60]	@ (8002e34 <HAL_I2C_IsDeviceReady+0x254>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8a2 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e012      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f4ff af32 	bcc.w	8002c7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	00100002 	.word	0x00100002
 8002e38:	ffff0000 	.word	0xffff0000

08002e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d006      	beq.n	8002e66 <I2C_MasterRequestWrite+0x2a>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d003      	beq.n	8002e66 <I2C_MasterRequestWrite+0x2a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e64:	d108      	bne.n	8002e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00b      	b.n	8002e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d107      	bne.n	8002e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f84f 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e035      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ecc:	d108      	bne.n	8002ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e01b      	b.n	8002f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	11db      	asrs	r3, r3, #7
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0306 	and.w	r3, r3, #6
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f063 030f 	orn	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	490e      	ldr	r1, [pc, #56]	@ (8002f38 <I2C_MasterRequestWrite+0xfc>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f898 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e010      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4907      	ldr	r1, [pc, #28]	@ (8002f3c <I2C_MasterRequestWrite+0x100>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f888 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	00010008 	.word	0x00010008
 8002f3c:	00010002 	.word	0x00010002

08002f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f50:	e048      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d044      	beq.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7ff f8f7 	bl	800214c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d139      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	e00c      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d116      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e023      	b.n	800302c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	e00c      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d093      	beq.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003042:	e071      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003052:	d123      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003062:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800306c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e067      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d041      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7ff f852 	bl	800214c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d136      	bne.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e021      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10c      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e00b      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af6d 	bne.w	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	e034      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f886 	bl	8003294 <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e034      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d028      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe ffd7 	bl	800214c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b80      	cmp	r3, #128	@ 0x80
 80031f8:	d1c3      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003210:	e034      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f83e 	bl	8003294 <I2C_IsAcknowledgeFailed>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e034      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d028      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe ff8f 	bl	800214c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11d      	bne.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d016      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e007      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d1c3      	bne.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d11b      	bne.n	80032e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0cc      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b68      	ldr	r3, [pc, #416]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d90c      	bls.n	8003330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b65      	ldr	r3, [pc, #404]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a58      	ldr	r2, [pc, #352]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003352:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a52      	ldr	r2, [pc, #328]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800336a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d044      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b3f      	ldr	r3, [pc, #252]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e067      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4934      	ldr	r1, [pc, #208]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe feb2 	bl	800214c <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe feae 	bl	800214c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2b      	ldr	r3, [pc, #172]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b25      	ldr	r3, [pc, #148]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20c      	bcs.n	800343c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b22      	ldr	r3, [pc, #136]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f841 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fe12 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08008ad8 	.word	0x08008ad8
 80034b8:	20000008 	.word	0x20000008
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	@ (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08008ae8 	.word	0x08008ae8

08003500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003504:	b0a6      	sub	sp, #152	@ 0x98
 8003506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003526:	4bc8      	ldr	r3, [pc, #800]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b0c      	cmp	r3, #12
 8003530:	f200 817e 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x330>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003571 	.word	0x08003571
 8003540:	08003831 	.word	0x08003831
 8003544:	08003831 	.word	0x08003831
 8003548:	08003831 	.word	0x08003831
 800354c:	08003579 	.word	0x08003579
 8003550:	08003831 	.word	0x08003831
 8003554:	08003831 	.word	0x08003831
 8003558:	08003831 	.word	0x08003831
 800355c:	08003581 	.word	0x08003581
 8003560:	08003831 	.word	0x08003831
 8003564:	08003831 	.word	0x08003831
 8003568:	08003831 	.word	0x08003831
 800356c:	080036eb 	.word	0x080036eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4bb6      	ldr	r3, [pc, #728]	@ (800384c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003576:	e15f      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003578:	4bb5      	ldr	r3, [pc, #724]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x350>)
 800357a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800357e:	e15b      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003580:	4bb1      	ldr	r3, [pc, #708]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003588:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358c:	4bae      	ldr	r3, [pc, #696]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d031      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003598:	4bab      	ldr	r3, [pc, #684]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	2200      	movs	r2, #0
 80035a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ac:	2300      	movs	r3, #0
 80035ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80035b0:	4ba7      	ldr	r3, [pc, #668]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x350>)
 80035b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035b6:	462a      	mov	r2, r5
 80035b8:	fb03 f202 	mul.w	r2, r3, r2
 80035bc:	2300      	movs	r3, #0
 80035be:	4621      	mov	r1, r4
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	4aa2      	ldr	r2, [pc, #648]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x350>)
 80035c8:	4621      	mov	r1, r4
 80035ca:	fba1 1202 	umull	r1, r2, r1, r2
 80035ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035d0:	460a      	mov	r2, r1
 80035d2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80035d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035d6:	4413      	add	r3, r2
 80035d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035de:	2200      	movs	r2, #0
 80035e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80035e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80035ec:	f7fd fb1c 	bl	8000c28 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035fa:	e064      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fc:	4b92      	ldr	r3, [pc, #584]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	2200      	movs	r2, #0
 8003604:	653b      	str	r3, [r7, #80]	@ 0x50
 8003606:	657a      	str	r2, [r7, #84]	@ 0x54
 8003608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003610:	2300      	movs	r3, #0
 8003612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003614:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003618:	4622      	mov	r2, r4
 800361a:	462b      	mov	r3, r5
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	0159      	lsls	r1, r3, #5
 8003626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362a:	0150      	lsls	r0, r2, #5
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4621      	mov	r1, r4
 8003632:	1a51      	subs	r1, r2, r1
 8003634:	6139      	str	r1, [r7, #16]
 8003636:	4629      	mov	r1, r5
 8003638:	eb63 0301 	sbc.w	r3, r3, r1
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800364a:	4659      	mov	r1, fp
 800364c:	018b      	lsls	r3, r1, #6
 800364e:	4651      	mov	r1, sl
 8003650:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003654:	4651      	mov	r1, sl
 8003656:	018a      	lsls	r2, r1, #6
 8003658:	4651      	mov	r1, sl
 800365a:	ebb2 0801 	subs.w	r8, r2, r1
 800365e:	4659      	mov	r1, fp
 8003660:	eb63 0901 	sbc.w	r9, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003670:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003674:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003678:	4690      	mov	r8, r2
 800367a:	4699      	mov	r9, r3
 800367c:	4623      	mov	r3, r4
 800367e:	eb18 0303 	adds.w	r3, r8, r3
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	462b      	mov	r3, r5
 8003686:	eb49 0303 	adc.w	r3, r9, r3
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003698:	4629      	mov	r1, r5
 800369a:	028b      	lsls	r3, r1, #10
 800369c:	4621      	mov	r1, r4
 800369e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a2:	4621      	mov	r1, r4
 80036a4:	028a      	lsls	r2, r1, #10
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ae:	2200      	movs	r2, #0
 80036b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80036b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036b8:	f7fd fab6 	bl	8000c28 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4613      	mov	r3, r2
 80036c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036c6:	4b60      	ldr	r3, [pc, #384]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	3301      	adds	r3, #1
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80036d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80036e8:	e0a6      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ea:	4b57      	ldr	r3, [pc, #348]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f6:	4b54      	ldr	r3, [pc, #336]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02a      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003702:	4b51      	ldr	r3, [pc, #324]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	2200      	movs	r2, #0
 800370a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800370c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003714:	2100      	movs	r1, #0
 8003716:	4b4e      	ldr	r3, [pc, #312]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x350>)
 8003718:	fb03 f201 	mul.w	r2, r3, r1
 800371c:	2300      	movs	r3, #0
 800371e:	fb00 f303 	mul.w	r3, r0, r3
 8003722:	4413      	add	r3, r2
 8003724:	4a4a      	ldr	r2, [pc, #296]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x350>)
 8003726:	fba0 1202 	umull	r1, r2, r0, r2
 800372a:	677a      	str	r2, [r7, #116]	@ 0x74
 800372c:	460a      	mov	r2, r1
 800372e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003730:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003732:	4413      	add	r3, r2
 8003734:	677b      	str	r3, [r7, #116]	@ 0x74
 8003736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800373a:	2200      	movs	r2, #0
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
 800373e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003740:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003744:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003748:	f7fd fa6e 	bl	8000c28 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4613      	mov	r3, r2
 8003752:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003756:	e05b      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003758:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	2200      	movs	r2, #0
 8003760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003770:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003774:	4642      	mov	r2, r8
 8003776:	464b      	mov	r3, r9
 8003778:	f04f 0000 	mov.w	r0, #0
 800377c:	f04f 0100 	mov.w	r1, #0
 8003780:	0159      	lsls	r1, r3, #5
 8003782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003786:	0150      	lsls	r0, r2, #5
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4641      	mov	r1, r8
 800378e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003792:	4649      	mov	r1, r9
 8003794:	eb63 0b01 	sbc.w	fp, r3, r1
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037ac:	ebb2 040a 	subs.w	r4, r2, sl
 80037b0:	eb63 050b 	sbc.w	r5, r3, fp
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	00eb      	lsls	r3, r5, #3
 80037be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c2:	00e2      	lsls	r2, r4, #3
 80037c4:	4614      	mov	r4, r2
 80037c6:	461d      	mov	r5, r3
 80037c8:	4643      	mov	r3, r8
 80037ca:	18e3      	adds	r3, r4, r3
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	464b      	mov	r3, r9
 80037d0:	eb45 0303 	adc.w	r3, r5, r3
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e2:	4629      	mov	r1, r5
 80037e4:	028b      	lsls	r3, r1, #10
 80037e6:	4621      	mov	r1, r4
 80037e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ec:	4621      	mov	r1, r4
 80037ee:	028a      	lsls	r2, r1, #10
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037f8:	2200      	movs	r2, #0
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	61fa      	str	r2, [r7, #28]
 80037fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003802:	f7fd fa11 	bl	8000c28 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4613      	mov	r3, r2
 800380c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x348>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0f1b      	lsrs	r3, r3, #28
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800381e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800382e:	e003      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003838:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800383c:	4618      	mov	r0, r3
 800383e:	3798      	adds	r7, #152	@ 0x98
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	017d7840 	.word	0x017d7840

08003854 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e28d      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8083 	beq.w	800397a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003874:	4b94      	ldr	r3, [pc, #592]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b04      	cmp	r3, #4
 800387e:	d019      	beq.n	80038b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003880:	4b91      	ldr	r3, [pc, #580]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
        || \
 8003888:	2b08      	cmp	r3, #8
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800388c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003898:	d00c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b8b      	ldr	r3, [pc, #556]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d112      	bne.n	80038cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a6:	4b88      	ldr	r3, [pc, #544]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b2:	d10b      	bne.n	80038cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	4b84      	ldr	r3, [pc, #528]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05b      	beq.n	8003978 <HAL_RCC_OscConfig+0x124>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d157      	bne.n	8003978 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e25a      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x90>
 80038d6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7b      	ldr	r2, [pc, #492]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e01d      	b.n	8003920 <HAL_RCC_OscConfig+0xcc>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0xb4>
 80038ee:	4b76      	ldr	r3, [pc, #472]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a75      	ldr	r2, [pc, #468]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b73      	ldr	r3, [pc, #460]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a72      	ldr	r2, [pc, #456]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0xcc>
 8003908:	4b6f      	ldr	r3, [pc, #444]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b6c      	ldr	r3, [pc, #432]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6b      	ldr	r2, [pc, #428]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800391e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe fc10 	bl	800214c <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7fe fc0c 	bl	800214c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	@ 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e21f      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b61      	ldr	r3, [pc, #388]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0xdc>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fbfc 	bl	800214c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fbf8 	bl	800214c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e20b      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396a:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x104>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d06f      	beq.n	8003a66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003986:	4b50      	ldr	r3, [pc, #320]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003992:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
        || \
 800399a:	2b08      	cmp	r3, #8
 800399c:	d105      	bne.n	80039aa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b44      	ldr	r3, [pc, #272]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x186>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e1d3      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4937      	ldr	r1, [pc, #220]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	e03a      	b.n	8003a66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_RCC_OscConfig+0x278>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fe fba5 	bl	800214c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fe fba1 	bl	800214c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e1b4      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4925      	ldr	r1, [pc, #148]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_OscConfig+0x278>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fb84 	bl	800214c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fe fb80 	bl	800214c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e193      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d036      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fe fb64 	bl	800214c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fe fb60 	bl	800214c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e173      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x234>
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fe fb4d 	bl	800214c <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fe fb49 	bl	800214c <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d907      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e15c      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	42470000 	.word	0x42470000
 8003ad0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ea      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8097 	beq.w	8003c1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b83      	ldr	r3, [pc, #524]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b7f      	ldr	r3, [pc, #508]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a7e      	ldr	r2, [pc, #504]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b79      	ldr	r3, [pc, #484]	@ (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b76      	ldr	r3, [pc, #472]	@ (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	@ (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fe fb09 	bl	800214c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fe fb05 	bl	800214c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e118      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b6c      	ldr	r3, [pc, #432]	@ (8003d04 <HAL_RCC_OscConfig+0x4b0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x31e>
 8003b64:	4b66      	ldr	r3, [pc, #408]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4a65      	ldr	r2, [pc, #404]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x358>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x340>
 8003b7a:	4b61      	ldr	r3, [pc, #388]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	4a60      	ldr	r2, [pc, #384]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b86:	4b5e      	ldr	r3, [pc, #376]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	4a5d      	ldr	r2, [pc, #372]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0x358>
 8003b94:	4b5a      	ldr	r3, [pc, #360]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	4a59      	ldr	r2, [pc, #356]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba0:	4b57      	ldr	r3, [pc, #348]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	4a56      	ldr	r2, [pc, #344]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fe faca 	bl	800214c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbc:	f7fe fac6 	bl	800214c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0d7      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ee      	beq.n	8003bbc <HAL_RCC_OscConfig+0x368>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fe fab4 	bl	800214c <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fe fab0 	bl	800214c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0c1      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfe:	4b40      	ldr	r3, [pc, #256]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ee      	bne.n	8003be8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b3b      	ldr	r3, [pc, #236]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	4a3a      	ldr	r2, [pc, #232]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80ad 	beq.w	8003d80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c26:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d060      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d145      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b33      	ldr	r3, [pc, #204]	@ (8003d08 <HAL_RCC_OscConfig+0x4b4>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fa84 	bl	800214c <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fe fa80 	bl	800214c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e093      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	4b29      	ldr	r3, [pc, #164]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	491b      	ldr	r1, [pc, #108]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c98:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <HAL_RCC_OscConfig+0x4b4>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fa55 	bl	800214c <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe fa51 	bl	800214c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e064      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x452>
 8003cc4:	e05c      	b.n	8003d80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_RCC_OscConfig+0x4b4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fa3e 	bl	800214c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fe fa3a 	bl	800214c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e04d      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x480>
 8003cf2:	e045      	b.n	8003d80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e040      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40007000 	.word	0x40007000
 8003d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d8c <HAL_RCC_OscConfig+0x538>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d030      	beq.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d129      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d122      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d119      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d10f      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800

08003d90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e041      	b.n	8003e26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe f8a4 	bl	8001f04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f000 fd28 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_TIM_PWM_Start+0x24>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e022      	b.n	8003e9a <HAL_TIM_PWM_Start+0x6a>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d109      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x3e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e015      	b.n	8003e9a <HAL_TIM_PWM_Start+0x6a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d109      	bne.n	8003e88 <HAL_TIM_PWM_Start+0x58>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e008      	b.n	8003e9a <HAL_TIM_PWM_Start+0x6a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07c      	b.n	8003f9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0x82>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb0:	e013      	b.n	8003eda <HAL_TIM_PWM_Start+0xaa>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0x92>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec0:	e00b      	b.n	8003eda <HAL_TIM_PWM_Start+0xaa>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xa2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ed0:	e003      	b.n	8003eda <HAL_TIM_PWM_Start+0xaa>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	6839      	ldr	r1, [r7, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 f824 	bl	8004f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <HAL_TIM_PWM_Start+0x174>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_PWM_Start+0xcc>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <HAL_TIM_PWM_Start+0x178>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_PWM_Start+0xd0>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_TIM_PWM_Start+0xd2>
 8003f00:	2300      	movs	r3, #0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a22      	ldr	r2, [pc, #136]	@ (8003fa4 <HAL_TIM_PWM_Start+0x174>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x136>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f28:	d01d      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x136>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fac <HAL_TIM_PWM_Start+0x17c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x136>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb0 <HAL_TIM_PWM_Start+0x180>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x136>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb4 <HAL_TIM_PWM_Start+0x184>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x136>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a16      	ldr	r2, [pc, #88]	@ (8003fa8 <HAL_TIM_PWM_Start+0x178>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x136>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a18      	ldr	r2, [pc, #96]	@ (8003fb8 <HAL_TIM_PWM_Start+0x188>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x136>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a16      	ldr	r2, [pc, #88]	@ (8003fbc <HAL_TIM_PWM_Start+0x18c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d111      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b06      	cmp	r3, #6
 8003f76:	d010      	beq.n	8003f9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f88:	e007      	b.n	8003f9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40010400 	.word	0x40010400
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800
 8003fb4:	40000c00 	.word	0x40000c00
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40001800 	.word	0x40001800

08003fc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e041      	b.n	8004056 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd ff3c 	bl	8001e64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 fc10 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d104      	bne.n	800407e <HAL_TIM_IC_Start_IT+0x1e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e013      	b.n	80040a6 <HAL_TIM_IC_Start_IT+0x46>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d104      	bne.n	800408e <HAL_TIM_IC_Start_IT+0x2e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800408a:	b2db      	uxtb	r3, r3
 800408c:	e00b      	b.n	80040a6 <HAL_TIM_IC_Start_IT+0x46>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d104      	bne.n	800409e <HAL_TIM_IC_Start_IT+0x3e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e003      	b.n	80040a6 <HAL_TIM_IC_Start_IT+0x46>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_TIM_IC_Start_IT+0x58>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e013      	b.n	80040e0 <HAL_TIM_IC_Start_IT+0x80>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d104      	bne.n	80040c8 <HAL_TIM_IC_Start_IT+0x68>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e00b      	b.n	80040e0 <HAL_TIM_IC_Start_IT+0x80>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d104      	bne.n	80040d8 <HAL_TIM_IC_Start_IT+0x78>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e003      	b.n	80040e0 <HAL_TIM_IC_Start_IT+0x80>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80040e8:	7b7b      	ldrb	r3, [r7, #13]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d001      	beq.n	80040f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0cc      	b.n	800428c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_IC_Start_IT+0xa2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004100:	e013      	b.n	800412a <HAL_TIM_IC_Start_IT+0xca>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_IC_Start_IT+0xb2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004110:	e00b      	b.n	800412a <HAL_TIM_IC_Start_IT+0xca>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_IC_Start_IT+0xc2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004120:	e003      	b.n	800412a <HAL_TIM_IC_Start_IT+0xca>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <HAL_TIM_IC_Start_IT+0xda>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004138:	e013      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x102>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d104      	bne.n	800414a <HAL_TIM_IC_Start_IT+0xea>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004148:	e00b      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x102>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d104      	bne.n	800415a <HAL_TIM_IC_Start_IT+0xfa>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004158:	e003      	b.n	8004162 <HAL_TIM_IC_Start_IT+0x102>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d841      	bhi.n	80041ec <HAL_TIM_IC_Start_IT+0x18c>
 8004168:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <HAL_TIM_IC_Start_IT+0x110>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080041ed 	.word	0x080041ed
 8004178:	080041ed 	.word	0x080041ed
 800417c:	080041ed 	.word	0x080041ed
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041ed 	.word	0x080041ed
 8004188:	080041ed 	.word	0x080041ed
 800418c:	080041ed 	.word	0x080041ed
 8004190:	080041c9 	.word	0x080041c9
 8004194:	080041ed 	.word	0x080041ed
 8004198:	080041ed 	.word	0x080041ed
 800419c:	080041ed 	.word	0x080041ed
 80041a0:	080041db 	.word	0x080041db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0202 	orr.w	r2, r2, #2
 80041b2:	60da      	str	r2, [r3, #12]
      break;
 80041b4:	e01d      	b.n	80041f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0204 	orr.w	r2, r2, #4
 80041c4:	60da      	str	r2, [r3, #12]
      break;
 80041c6:	e014      	b.n	80041f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0208 	orr.w	r2, r2, #8
 80041d6:	60da      	str	r2, [r3, #12]
      break;
 80041d8:	e00b      	b.n	80041f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0210 	orr.w	r2, r2, #16
 80041e8:	60da      	str	r2, [r3, #12]
      break;
 80041ea:	e002      	b.n	80041f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      break;
 80041f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d148      	bne.n	800428a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2201      	movs	r2, #1
 80041fe:	6839      	ldr	r1, [r7, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fe95 	bl	8004f30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <HAL_TIM_IC_Start_IT+0x234>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_TIM_IC_Start_IT+0x1f6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004218:	d01d      	beq.n	8004256 <HAL_TIM_IC_Start_IT+0x1f6>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1e      	ldr	r2, [pc, #120]	@ (8004298 <HAL_TIM_IC_Start_IT+0x238>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_TIM_IC_Start_IT+0x1f6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <HAL_TIM_IC_Start_IT+0x23c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_TIM_IC_Start_IT+0x1f6>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1b      	ldr	r2, [pc, #108]	@ (80042a0 <HAL_TIM_IC_Start_IT+0x240>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIM_IC_Start_IT+0x1f6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a19      	ldr	r2, [pc, #100]	@ (80042a4 <HAL_TIM_IC_Start_IT+0x244>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIM_IC_Start_IT+0x1f6>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <HAL_TIM_IC_Start_IT+0x248>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIM_IC_Start_IT+0x1f6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <HAL_TIM_IC_Start_IT+0x24c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b06      	cmp	r3, #6
 8004266:	d010      	beq.n	800428a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	e007      	b.n	800428a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40010400 	.word	0x40010400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40001800 	.word	0x40001800

080042b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d020      	beq.n	8004314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0202 	mvn.w	r2, #2
 80042e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd f9a0 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa70 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fa77 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d020      	beq.n	8004360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01b      	beq.n	8004360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0204 	mvn.w	r2, #4
 8004330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd f97a 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa4a 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fa51 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d020      	beq.n	80043ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0208 	mvn.w	r2, #8
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2204      	movs	r2, #4
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fd f954 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa24 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fa2b 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0210 	mvn.w	r2, #16
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2208      	movs	r2, #8
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd f92e 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f9fe 	bl	80047e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa05 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0201 	mvn.w	r2, #1
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9dc 	bl	80047d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fe24 	bl	8005088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9d6 	bl	8004810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0220 	mvn.w	r2, #32
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fdf6 	bl	8005074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e088      	b.n	80045c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80044cc:	f000 fc06 	bl	8004cdc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 020c 	bic.w	r2, r2, #12
 80044de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6999      	ldr	r1, [r3, #24]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	619a      	str	r2, [r3, #24]
 80044f2:	e060      	b.n	80045b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d11c      	bne.n	8004534 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800450a:	f000 fc5b 	bl	8004dc4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800451c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6999      	ldr	r1, [r3, #24]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	021a      	lsls	r2, r3, #8
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	619a      	str	r2, [r3, #24]
 8004532:	e040      	b.n	80045b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b08      	cmp	r3, #8
 8004538:	d11b      	bne.n	8004572 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800454a:	f000 fc78 	bl	8004e3e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 020c 	bic.w	r2, r2, #12
 800455c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69d9      	ldr	r1, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	61da      	str	r2, [r3, #28]
 8004570:	e021      	b.n	80045b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d11c      	bne.n	80045b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004588:	f000 fc95 	bl	8004eb6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800459a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69d9      	ldr	r1, [r3, #28]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	021a      	lsls	r2, r3, #8
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	61da      	str	r2, [r3, #28]
 80045b0:	e001      	b.n	80045b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045be:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e0ae      	b.n	8004744 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b0c      	cmp	r3, #12
 80045f2:	f200 809f 	bhi.w	8004734 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045f6:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004735 	.word	0x08004735
 8004604:	08004735 	.word	0x08004735
 8004608:	08004735 	.word	0x08004735
 800460c:	08004671 	.word	0x08004671
 8004610:	08004735 	.word	0x08004735
 8004614:	08004735 	.word	0x08004735
 8004618:	08004735 	.word	0x08004735
 800461c:	080046b3 	.word	0x080046b3
 8004620:	08004735 	.word	0x08004735
 8004624:	08004735 	.word	0x08004735
 8004628:	08004735 	.word	0x08004735
 800462c:	080046f3 	.word	0x080046f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f9a0 	bl	800497c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0208 	orr.w	r2, r2, #8
 800464a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0204 	bic.w	r2, r2, #4
 800465a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6999      	ldr	r1, [r3, #24]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	619a      	str	r2, [r3, #24]
      break;
 800466e:	e064      	b.n	800473a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f9f0 	bl	8004a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800468a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6999      	ldr	r1, [r3, #24]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	619a      	str	r2, [r3, #24]
      break;
 80046b0:	e043      	b.n	800473a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fa45 	bl	8004b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0208 	orr.w	r2, r2, #8
 80046cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0204 	bic.w	r2, r2, #4
 80046dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69d9      	ldr	r1, [r3, #28]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	61da      	str	r2, [r3, #28]
      break;
 80046f0:	e023      	b.n	800473a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fa99 	bl	8004c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800470c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69d9      	ldr	r1, [r3, #28]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	61da      	str	r2, [r3, #28]
      break;
 8004732:	e002      	b.n	800473a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
      break;
 8004738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d831      	bhi.n	80047c4 <HAL_TIM_ReadCapturedValue+0x78>
 8004760:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047c5 	.word	0x080047c5
 8004770:	080047c5 	.word	0x080047c5
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047a7 	.word	0x080047a7
 800477c:	080047c5 	.word	0x080047c5
 8004780:	080047c5 	.word	0x080047c5
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047c5 	.word	0x080047c5
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047bb 	.word	0x080047bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a2:	60fb      	str	r3, [r7, #12]

      break;
 80047a4:	e00f      	b.n	80047c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	60fb      	str	r3, [r7, #12]

      break;
 80047ae:	e00a      	b.n	80047c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	60fb      	str	r3, [r7, #12]

      break;
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	60fb      	str	r3, [r7, #12]

      break;
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047c4:	bf00      	nop
  }

  return tmpreg;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a46      	ldr	r2, [pc, #280]	@ (8004950 <TIM_Base_SetConfig+0x12c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004842:	d00f      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a43      	ldr	r2, [pc, #268]	@ (8004954 <TIM_Base_SetConfig+0x130>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a42      	ldr	r2, [pc, #264]	@ (8004958 <TIM_Base_SetConfig+0x134>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a41      	ldr	r2, [pc, #260]	@ (800495c <TIM_Base_SetConfig+0x138>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a40      	ldr	r2, [pc, #256]	@ (8004960 <TIM_Base_SetConfig+0x13c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a35      	ldr	r2, [pc, #212]	@ (8004950 <TIM_Base_SetConfig+0x12c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d02b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004884:	d027      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a32      	ldr	r2, [pc, #200]	@ (8004954 <TIM_Base_SetConfig+0x130>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d023      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a31      	ldr	r2, [pc, #196]	@ (8004958 <TIM_Base_SetConfig+0x134>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a30      	ldr	r2, [pc, #192]	@ (800495c <TIM_Base_SetConfig+0x138>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004960 <TIM_Base_SetConfig+0x13c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d017      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004964 <TIM_Base_SetConfig+0x140>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004968 <TIM_Base_SetConfig+0x144>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2c      	ldr	r2, [pc, #176]	@ (800496c <TIM_Base_SetConfig+0x148>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004970 <TIM_Base_SetConfig+0x14c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004974 <TIM_Base_SetConfig+0x150>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a29      	ldr	r2, [pc, #164]	@ (8004978 <TIM_Base_SetConfig+0x154>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a10      	ldr	r2, [pc, #64]	@ (8004950 <TIM_Base_SetConfig+0x12c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0xf8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a12      	ldr	r2, [pc, #72]	@ (8004960 <TIM_Base_SetConfig+0x13c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f023 0201 	bic.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]
  }
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800
 8004970:	40001800 	.word	0x40001800
 8004974:	40001c00 	.word	0x40001c00
 8004978:	40002000 	.word	0x40002000

0800497c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f023 0201 	bic.w	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 0302 	bic.w	r3, r3, #2
 80049c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a20      	ldr	r2, [pc, #128]	@ (8004a54 <TIM_OC1_SetConfig+0xd8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_OC1_SetConfig+0x64>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1f      	ldr	r2, [pc, #124]	@ (8004a58 <TIM_OC1_SetConfig+0xdc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10c      	bne.n	80049fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0308 	bic.w	r3, r3, #8
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a15      	ldr	r2, [pc, #84]	@ (8004a54 <TIM_OC1_SetConfig+0xd8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC1_SetConfig+0x8e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a14      	ldr	r2, [pc, #80]	@ (8004a58 <TIM_OC1_SetConfig+0xdc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400

08004a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f023 0210 	bic.w	r2, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0320 	bic.w	r3, r3, #32
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a22      	ldr	r2, [pc, #136]	@ (8004b40 <TIM_OC2_SetConfig+0xe4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC2_SetConfig+0x68>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a21      	ldr	r2, [pc, #132]	@ (8004b44 <TIM_OC2_SetConfig+0xe8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10d      	bne.n	8004ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a17      	ldr	r2, [pc, #92]	@ (8004b40 <TIM_OC2_SetConfig+0xe4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_OC2_SetConfig+0x94>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a16      	ldr	r2, [pc, #88]	@ (8004b44 <TIM_OC2_SetConfig+0xe8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d113      	bne.n	8004b18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40010400 	.word	0x40010400

08004b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a21      	ldr	r2, [pc, #132]	@ (8004c28 <TIM_OC3_SetConfig+0xe0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC3_SetConfig+0x66>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a20      	ldr	r2, [pc, #128]	@ (8004c2c <TIM_OC3_SetConfig+0xe4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d10d      	bne.n	8004bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a16      	ldr	r2, [pc, #88]	@ (8004c28 <TIM_OC3_SetConfig+0xe0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_OC3_SetConfig+0x92>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a15      	ldr	r2, [pc, #84]	@ (8004c2c <TIM_OC3_SetConfig+0xe4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d113      	bne.n	8004c02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40010400 	.word	0x40010400

08004c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	031b      	lsls	r3, r3, #12
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a12      	ldr	r2, [pc, #72]	@ (8004cd4 <TIM_OC4_SetConfig+0xa4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC4_SetConfig+0x68>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a11      	ldr	r2, [pc, #68]	@ (8004cd8 <TIM_OC4_SetConfig+0xa8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d109      	bne.n	8004cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	019b      	lsls	r3, r3, #6
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40010400 	.word	0x40010400

08004cdc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f023 0201 	bic.w	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4a28      	ldr	r2, [pc, #160]	@ (8004da8 <TIM_TI1_SetConfig+0xcc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01b      	beq.n	8004d42 <TIM_TI1_SetConfig+0x66>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d10:	d017      	beq.n	8004d42 <TIM_TI1_SetConfig+0x66>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a25      	ldr	r2, [pc, #148]	@ (8004dac <TIM_TI1_SetConfig+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <TIM_TI1_SetConfig+0x66>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a24      	ldr	r2, [pc, #144]	@ (8004db0 <TIM_TI1_SetConfig+0xd4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <TIM_TI1_SetConfig+0x66>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a23      	ldr	r2, [pc, #140]	@ (8004db4 <TIM_TI1_SetConfig+0xd8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <TIM_TI1_SetConfig+0x66>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a22      	ldr	r2, [pc, #136]	@ (8004db8 <TIM_TI1_SetConfig+0xdc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_TI1_SetConfig+0x66>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4a21      	ldr	r2, [pc, #132]	@ (8004dbc <TIM_TI1_SetConfig+0xe0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_TI1_SetConfig+0x66>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a20      	ldr	r2, [pc, #128]	@ (8004dc0 <TIM_TI1_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d101      	bne.n	8004d46 <TIM_TI1_SetConfig+0x6a>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <TIM_TI1_SetConfig+0x6c>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e003      	b.n	8004d66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f023 030a 	bic.w	r3, r3, #10
 8004d80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 030a 	and.w	r3, r3, #10
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40010400 	.word	0x40010400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40001800 	.word	0x40001800

08004dc4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f023 0210 	bic.w	r2, r3, #16
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	031b      	lsls	r3, r3, #12
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e7a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b087      	sub	sp, #28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ef4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	031b      	lsls	r3, r3, #12
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	621a      	str	r2, [r3, #32]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2201      	movs	r2, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e05a      	b.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a21      	ldr	r2, [pc, #132]	@ (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d022      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d01d      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800505c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d018      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00e      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a18      	ldr	r2, [pc, #96]	@ (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a17      	ldr	r2, [pc, #92]	@ (800506c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a15      	ldr	r2, [pc, #84]	@ (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d10c      	bne.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4313      	orrs	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40010400 	.word	0x40010400
 800506c:	40014000 	.word	0x40014000
 8005070:	40001800 	.word	0x40001800

08005074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <__cvt>:
 800509c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	ec57 6b10 	vmov	r6, r7, d0
 80050a4:	2f00      	cmp	r7, #0
 80050a6:	460c      	mov	r4, r1
 80050a8:	4619      	mov	r1, r3
 80050aa:	463b      	mov	r3, r7
 80050ac:	bfbb      	ittet	lt
 80050ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80050b2:	461f      	movlt	r7, r3
 80050b4:	2300      	movge	r3, #0
 80050b6:	232d      	movlt	r3, #45	@ 0x2d
 80050b8:	700b      	strb	r3, [r1, #0]
 80050ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80050c0:	4691      	mov	r9, r2
 80050c2:	f023 0820 	bic.w	r8, r3, #32
 80050c6:	bfbc      	itt	lt
 80050c8:	4632      	movlt	r2, r6
 80050ca:	4616      	movlt	r6, r2
 80050cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050d0:	d005      	beq.n	80050de <__cvt+0x42>
 80050d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80050d6:	d100      	bne.n	80050da <__cvt+0x3e>
 80050d8:	3401      	adds	r4, #1
 80050da:	2102      	movs	r1, #2
 80050dc:	e000      	b.n	80050e0 <__cvt+0x44>
 80050de:	2103      	movs	r1, #3
 80050e0:	ab03      	add	r3, sp, #12
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	ab02      	add	r3, sp, #8
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	ec47 6b10 	vmov	d0, r6, r7
 80050ec:	4653      	mov	r3, sl
 80050ee:	4622      	mov	r2, r4
 80050f0:	f000 fe6e 	bl	8005dd0 <_dtoa_r>
 80050f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80050f8:	4605      	mov	r5, r0
 80050fa:	d119      	bne.n	8005130 <__cvt+0x94>
 80050fc:	f019 0f01 	tst.w	r9, #1
 8005100:	d00e      	beq.n	8005120 <__cvt+0x84>
 8005102:	eb00 0904 	add.w	r9, r0, r4
 8005106:	2200      	movs	r2, #0
 8005108:	2300      	movs	r3, #0
 800510a:	4630      	mov	r0, r6
 800510c:	4639      	mov	r1, r7
 800510e:	f7fb fcfb 	bl	8000b08 <__aeabi_dcmpeq>
 8005112:	b108      	cbz	r0, 8005118 <__cvt+0x7c>
 8005114:	f8cd 900c 	str.w	r9, [sp, #12]
 8005118:	2230      	movs	r2, #48	@ 0x30
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	454b      	cmp	r3, r9
 800511e:	d31e      	bcc.n	800515e <__cvt+0xc2>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005124:	1b5b      	subs	r3, r3, r5
 8005126:	4628      	mov	r0, r5
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	b004      	add	sp, #16
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005134:	eb00 0904 	add.w	r9, r0, r4
 8005138:	d1e5      	bne.n	8005106 <__cvt+0x6a>
 800513a:	7803      	ldrb	r3, [r0, #0]
 800513c:	2b30      	cmp	r3, #48	@ 0x30
 800513e:	d10a      	bne.n	8005156 <__cvt+0xba>
 8005140:	2200      	movs	r2, #0
 8005142:	2300      	movs	r3, #0
 8005144:	4630      	mov	r0, r6
 8005146:	4639      	mov	r1, r7
 8005148:	f7fb fcde 	bl	8000b08 <__aeabi_dcmpeq>
 800514c:	b918      	cbnz	r0, 8005156 <__cvt+0xba>
 800514e:	f1c4 0401 	rsb	r4, r4, #1
 8005152:	f8ca 4000 	str.w	r4, [sl]
 8005156:	f8da 3000 	ldr.w	r3, [sl]
 800515a:	4499      	add	r9, r3
 800515c:	e7d3      	b.n	8005106 <__cvt+0x6a>
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	9103      	str	r1, [sp, #12]
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e7d9      	b.n	800511a <__cvt+0x7e>

08005166 <__exponent>:
 8005166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005168:	2900      	cmp	r1, #0
 800516a:	bfba      	itte	lt
 800516c:	4249      	neglt	r1, r1
 800516e:	232d      	movlt	r3, #45	@ 0x2d
 8005170:	232b      	movge	r3, #43	@ 0x2b
 8005172:	2909      	cmp	r1, #9
 8005174:	7002      	strb	r2, [r0, #0]
 8005176:	7043      	strb	r3, [r0, #1]
 8005178:	dd29      	ble.n	80051ce <__exponent+0x68>
 800517a:	f10d 0307 	add.w	r3, sp, #7
 800517e:	461d      	mov	r5, r3
 8005180:	270a      	movs	r7, #10
 8005182:	461a      	mov	r2, r3
 8005184:	fbb1 f6f7 	udiv	r6, r1, r7
 8005188:	fb07 1416 	mls	r4, r7, r6, r1
 800518c:	3430      	adds	r4, #48	@ 0x30
 800518e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005192:	460c      	mov	r4, r1
 8005194:	2c63      	cmp	r4, #99	@ 0x63
 8005196:	f103 33ff 	add.w	r3, r3, #4294967295
 800519a:	4631      	mov	r1, r6
 800519c:	dcf1      	bgt.n	8005182 <__exponent+0x1c>
 800519e:	3130      	adds	r1, #48	@ 0x30
 80051a0:	1e94      	subs	r4, r2, #2
 80051a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051a6:	1c41      	adds	r1, r0, #1
 80051a8:	4623      	mov	r3, r4
 80051aa:	42ab      	cmp	r3, r5
 80051ac:	d30a      	bcc.n	80051c4 <__exponent+0x5e>
 80051ae:	f10d 0309 	add.w	r3, sp, #9
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	42ac      	cmp	r4, r5
 80051b6:	bf88      	it	hi
 80051b8:	2300      	movhi	r3, #0
 80051ba:	3302      	adds	r3, #2
 80051bc:	4403      	add	r3, r0
 80051be:	1a18      	subs	r0, r3, r0
 80051c0:	b003      	add	sp, #12
 80051c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80051c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80051cc:	e7ed      	b.n	80051aa <__exponent+0x44>
 80051ce:	2330      	movs	r3, #48	@ 0x30
 80051d0:	3130      	adds	r1, #48	@ 0x30
 80051d2:	7083      	strb	r3, [r0, #2]
 80051d4:	70c1      	strb	r1, [r0, #3]
 80051d6:	1d03      	adds	r3, r0, #4
 80051d8:	e7f1      	b.n	80051be <__exponent+0x58>
	...

080051dc <_printf_float>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	b08d      	sub	sp, #52	@ 0x34
 80051e2:	460c      	mov	r4, r1
 80051e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80051e8:	4616      	mov	r6, r2
 80051ea:	461f      	mov	r7, r3
 80051ec:	4605      	mov	r5, r0
 80051ee:	f000 fcef 	bl	8005bd0 <_localeconv_r>
 80051f2:	6803      	ldr	r3, [r0, #0]
 80051f4:	9304      	str	r3, [sp, #16]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fb f85a 	bl	80002b0 <strlen>
 80051fc:	2300      	movs	r3, #0
 80051fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005200:	f8d8 3000 	ldr.w	r3, [r8]
 8005204:	9005      	str	r0, [sp, #20]
 8005206:	3307      	adds	r3, #7
 8005208:	f023 0307 	bic.w	r3, r3, #7
 800520c:	f103 0208 	add.w	r2, r3, #8
 8005210:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005214:	f8d4 b000 	ldr.w	fp, [r4]
 8005218:	f8c8 2000 	str.w	r2, [r8]
 800521c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005220:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005224:	9307      	str	r3, [sp, #28]
 8005226:	f8cd 8018 	str.w	r8, [sp, #24]
 800522a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800522e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005232:	4b9c      	ldr	r3, [pc, #624]	@ (80054a4 <_printf_float+0x2c8>)
 8005234:	f04f 32ff 	mov.w	r2, #4294967295
 8005238:	f7fb fc98 	bl	8000b6c <__aeabi_dcmpun>
 800523c:	bb70      	cbnz	r0, 800529c <_printf_float+0xc0>
 800523e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005242:	4b98      	ldr	r3, [pc, #608]	@ (80054a4 <_printf_float+0x2c8>)
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	f7fb fc72 	bl	8000b30 <__aeabi_dcmple>
 800524c:	bb30      	cbnz	r0, 800529c <_printf_float+0xc0>
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fb fc61 	bl	8000b1c <__aeabi_dcmplt>
 800525a:	b110      	cbz	r0, 8005262 <_printf_float+0x86>
 800525c:	232d      	movs	r3, #45	@ 0x2d
 800525e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005262:	4a91      	ldr	r2, [pc, #580]	@ (80054a8 <_printf_float+0x2cc>)
 8005264:	4b91      	ldr	r3, [pc, #580]	@ (80054ac <_printf_float+0x2d0>)
 8005266:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800526a:	bf94      	ite	ls
 800526c:	4690      	movls	r8, r2
 800526e:	4698      	movhi	r8, r3
 8005270:	2303      	movs	r3, #3
 8005272:	6123      	str	r3, [r4, #16]
 8005274:	f02b 0304 	bic.w	r3, fp, #4
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	f04f 0900 	mov.w	r9, #0
 800527e:	9700      	str	r7, [sp, #0]
 8005280:	4633      	mov	r3, r6
 8005282:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005284:	4621      	mov	r1, r4
 8005286:	4628      	mov	r0, r5
 8005288:	f000 f9d2 	bl	8005630 <_printf_common>
 800528c:	3001      	adds	r0, #1
 800528e:	f040 808d 	bne.w	80053ac <_printf_float+0x1d0>
 8005292:	f04f 30ff 	mov.w	r0, #4294967295
 8005296:	b00d      	add	sp, #52	@ 0x34
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	4642      	mov	r2, r8
 800529e:	464b      	mov	r3, r9
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb fc62 	bl	8000b6c <__aeabi_dcmpun>
 80052a8:	b140      	cbz	r0, 80052bc <_printf_float+0xe0>
 80052aa:	464b      	mov	r3, r9
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bfbc      	itt	lt
 80052b0:	232d      	movlt	r3, #45	@ 0x2d
 80052b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052b6:	4a7e      	ldr	r2, [pc, #504]	@ (80054b0 <_printf_float+0x2d4>)
 80052b8:	4b7e      	ldr	r3, [pc, #504]	@ (80054b4 <_printf_float+0x2d8>)
 80052ba:	e7d4      	b.n	8005266 <_printf_float+0x8a>
 80052bc:	6863      	ldr	r3, [r4, #4]
 80052be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80052c2:	9206      	str	r2, [sp, #24]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	d13b      	bne.n	8005340 <_printf_float+0x164>
 80052c8:	2306      	movs	r3, #6
 80052ca:	6063      	str	r3, [r4, #4]
 80052cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80052d0:	2300      	movs	r3, #0
 80052d2:	6022      	str	r2, [r4, #0]
 80052d4:	9303      	str	r3, [sp, #12]
 80052d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80052d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80052dc:	ab09      	add	r3, sp, #36	@ 0x24
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	6861      	ldr	r1, [r4, #4]
 80052e2:	ec49 8b10 	vmov	d0, r8, r9
 80052e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80052ea:	4628      	mov	r0, r5
 80052ec:	f7ff fed6 	bl	800509c <__cvt>
 80052f0:	9b06      	ldr	r3, [sp, #24]
 80052f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052f4:	2b47      	cmp	r3, #71	@ 0x47
 80052f6:	4680      	mov	r8, r0
 80052f8:	d129      	bne.n	800534e <_printf_float+0x172>
 80052fa:	1cc8      	adds	r0, r1, #3
 80052fc:	db02      	blt.n	8005304 <_printf_float+0x128>
 80052fe:	6863      	ldr	r3, [r4, #4]
 8005300:	4299      	cmp	r1, r3
 8005302:	dd41      	ble.n	8005388 <_printf_float+0x1ac>
 8005304:	f1aa 0a02 	sub.w	sl, sl, #2
 8005308:	fa5f fa8a 	uxtb.w	sl, sl
 800530c:	3901      	subs	r1, #1
 800530e:	4652      	mov	r2, sl
 8005310:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005314:	9109      	str	r1, [sp, #36]	@ 0x24
 8005316:	f7ff ff26 	bl	8005166 <__exponent>
 800531a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800531c:	1813      	adds	r3, r2, r0
 800531e:	2a01      	cmp	r2, #1
 8005320:	4681      	mov	r9, r0
 8005322:	6123      	str	r3, [r4, #16]
 8005324:	dc02      	bgt.n	800532c <_printf_float+0x150>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	07d2      	lsls	r2, r2, #31
 800532a:	d501      	bpl.n	8005330 <_printf_float+0x154>
 800532c:	3301      	adds	r3, #1
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0a2      	beq.n	800527e <_printf_float+0xa2>
 8005338:	232d      	movs	r3, #45	@ 0x2d
 800533a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800533e:	e79e      	b.n	800527e <_printf_float+0xa2>
 8005340:	9a06      	ldr	r2, [sp, #24]
 8005342:	2a47      	cmp	r2, #71	@ 0x47
 8005344:	d1c2      	bne.n	80052cc <_printf_float+0xf0>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1c0      	bne.n	80052cc <_printf_float+0xf0>
 800534a:	2301      	movs	r3, #1
 800534c:	e7bd      	b.n	80052ca <_printf_float+0xee>
 800534e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005352:	d9db      	bls.n	800530c <_printf_float+0x130>
 8005354:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005358:	d118      	bne.n	800538c <_printf_float+0x1b0>
 800535a:	2900      	cmp	r1, #0
 800535c:	6863      	ldr	r3, [r4, #4]
 800535e:	dd0b      	ble.n	8005378 <_printf_float+0x19c>
 8005360:	6121      	str	r1, [r4, #16]
 8005362:	b913      	cbnz	r3, 800536a <_printf_float+0x18e>
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	07d0      	lsls	r0, r2, #31
 8005368:	d502      	bpl.n	8005370 <_printf_float+0x194>
 800536a:	3301      	adds	r3, #1
 800536c:	440b      	add	r3, r1
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005372:	f04f 0900 	mov.w	r9, #0
 8005376:	e7db      	b.n	8005330 <_printf_float+0x154>
 8005378:	b913      	cbnz	r3, 8005380 <_printf_float+0x1a4>
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	07d2      	lsls	r2, r2, #31
 800537e:	d501      	bpl.n	8005384 <_printf_float+0x1a8>
 8005380:	3302      	adds	r3, #2
 8005382:	e7f4      	b.n	800536e <_printf_float+0x192>
 8005384:	2301      	movs	r3, #1
 8005386:	e7f2      	b.n	800536e <_printf_float+0x192>
 8005388:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800538c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800538e:	4299      	cmp	r1, r3
 8005390:	db05      	blt.n	800539e <_printf_float+0x1c2>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	6121      	str	r1, [r4, #16]
 8005396:	07d8      	lsls	r0, r3, #31
 8005398:	d5ea      	bpl.n	8005370 <_printf_float+0x194>
 800539a:	1c4b      	adds	r3, r1, #1
 800539c:	e7e7      	b.n	800536e <_printf_float+0x192>
 800539e:	2900      	cmp	r1, #0
 80053a0:	bfd4      	ite	le
 80053a2:	f1c1 0202 	rsble	r2, r1, #2
 80053a6:	2201      	movgt	r2, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	e7e0      	b.n	800536e <_printf_float+0x192>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	055a      	lsls	r2, r3, #21
 80053b0:	d407      	bmi.n	80053c2 <_printf_float+0x1e6>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	4642      	mov	r2, r8
 80053b6:	4631      	mov	r1, r6
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	d12b      	bne.n	8005418 <_printf_float+0x23c>
 80053c0:	e767      	b.n	8005292 <_printf_float+0xb6>
 80053c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053c6:	f240 80dd 	bls.w	8005584 <_printf_float+0x3a8>
 80053ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053ce:	2200      	movs	r2, #0
 80053d0:	2300      	movs	r3, #0
 80053d2:	f7fb fb99 	bl	8000b08 <__aeabi_dcmpeq>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d033      	beq.n	8005442 <_printf_float+0x266>
 80053da:	4a37      	ldr	r2, [pc, #220]	@ (80054b8 <_printf_float+0x2dc>)
 80053dc:	2301      	movs	r3, #1
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f af54 	beq.w	8005292 <_printf_float+0xb6>
 80053ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80053ee:	4543      	cmp	r3, r8
 80053f0:	db02      	blt.n	80053f8 <_printf_float+0x21c>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	07d8      	lsls	r0, r3, #31
 80053f6:	d50f      	bpl.n	8005418 <_printf_float+0x23c>
 80053f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fc:	4631      	mov	r1, r6
 80053fe:	4628      	mov	r0, r5
 8005400:	47b8      	blx	r7
 8005402:	3001      	adds	r0, #1
 8005404:	f43f af45 	beq.w	8005292 <_printf_float+0xb6>
 8005408:	f04f 0900 	mov.w	r9, #0
 800540c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005410:	f104 0a1a 	add.w	sl, r4, #26
 8005414:	45c8      	cmp	r8, r9
 8005416:	dc09      	bgt.n	800542c <_printf_float+0x250>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	079b      	lsls	r3, r3, #30
 800541c:	f100 8103 	bmi.w	8005626 <_printf_float+0x44a>
 8005420:	68e0      	ldr	r0, [r4, #12]
 8005422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005424:	4298      	cmp	r0, r3
 8005426:	bfb8      	it	lt
 8005428:	4618      	movlt	r0, r3
 800542a:	e734      	b.n	8005296 <_printf_float+0xba>
 800542c:	2301      	movs	r3, #1
 800542e:	4652      	mov	r2, sl
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f af2b 	beq.w	8005292 <_printf_float+0xb6>
 800543c:	f109 0901 	add.w	r9, r9, #1
 8005440:	e7e8      	b.n	8005414 <_printf_float+0x238>
 8005442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	dc39      	bgt.n	80054bc <_printf_float+0x2e0>
 8005448:	4a1b      	ldr	r2, [pc, #108]	@ (80054b8 <_printf_float+0x2dc>)
 800544a:	2301      	movs	r3, #1
 800544c:	4631      	mov	r1, r6
 800544e:	4628      	mov	r0, r5
 8005450:	47b8      	blx	r7
 8005452:	3001      	adds	r0, #1
 8005454:	f43f af1d 	beq.w	8005292 <_printf_float+0xb6>
 8005458:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800545c:	ea59 0303 	orrs.w	r3, r9, r3
 8005460:	d102      	bne.n	8005468 <_printf_float+0x28c>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	07d9      	lsls	r1, r3, #31
 8005466:	d5d7      	bpl.n	8005418 <_printf_float+0x23c>
 8005468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800546c:	4631      	mov	r1, r6
 800546e:	4628      	mov	r0, r5
 8005470:	47b8      	blx	r7
 8005472:	3001      	adds	r0, #1
 8005474:	f43f af0d 	beq.w	8005292 <_printf_float+0xb6>
 8005478:	f04f 0a00 	mov.w	sl, #0
 800547c:	f104 0b1a 	add.w	fp, r4, #26
 8005480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005482:	425b      	negs	r3, r3
 8005484:	4553      	cmp	r3, sl
 8005486:	dc01      	bgt.n	800548c <_printf_float+0x2b0>
 8005488:	464b      	mov	r3, r9
 800548a:	e793      	b.n	80053b4 <_printf_float+0x1d8>
 800548c:	2301      	movs	r3, #1
 800548e:	465a      	mov	r2, fp
 8005490:	4631      	mov	r1, r6
 8005492:	4628      	mov	r0, r5
 8005494:	47b8      	blx	r7
 8005496:	3001      	adds	r0, #1
 8005498:	f43f aefb 	beq.w	8005292 <_printf_float+0xb6>
 800549c:	f10a 0a01 	add.w	sl, sl, #1
 80054a0:	e7ee      	b.n	8005480 <_printf_float+0x2a4>
 80054a2:	bf00      	nop
 80054a4:	7fefffff 	.word	0x7fefffff
 80054a8:	08008af0 	.word	0x08008af0
 80054ac:	08008af4 	.word	0x08008af4
 80054b0:	08008af8 	.word	0x08008af8
 80054b4:	08008afc 	.word	0x08008afc
 80054b8:	08008b00 	.word	0x08008b00
 80054bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054c2:	4553      	cmp	r3, sl
 80054c4:	bfa8      	it	ge
 80054c6:	4653      	movge	r3, sl
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	4699      	mov	r9, r3
 80054cc:	dc36      	bgt.n	800553c <_printf_float+0x360>
 80054ce:	f04f 0b00 	mov.w	fp, #0
 80054d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d6:	f104 021a 	add.w	r2, r4, #26
 80054da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054dc:	9306      	str	r3, [sp, #24]
 80054de:	eba3 0309 	sub.w	r3, r3, r9
 80054e2:	455b      	cmp	r3, fp
 80054e4:	dc31      	bgt.n	800554a <_printf_float+0x36e>
 80054e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e8:	459a      	cmp	sl, r3
 80054ea:	dc3a      	bgt.n	8005562 <_printf_float+0x386>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	07da      	lsls	r2, r3, #31
 80054f0:	d437      	bmi.n	8005562 <_printf_float+0x386>
 80054f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f4:	ebaa 0903 	sub.w	r9, sl, r3
 80054f8:	9b06      	ldr	r3, [sp, #24]
 80054fa:	ebaa 0303 	sub.w	r3, sl, r3
 80054fe:	4599      	cmp	r9, r3
 8005500:	bfa8      	it	ge
 8005502:	4699      	movge	r9, r3
 8005504:	f1b9 0f00 	cmp.w	r9, #0
 8005508:	dc33      	bgt.n	8005572 <_printf_float+0x396>
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005512:	f104 0b1a 	add.w	fp, r4, #26
 8005516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005518:	ebaa 0303 	sub.w	r3, sl, r3
 800551c:	eba3 0309 	sub.w	r3, r3, r9
 8005520:	4543      	cmp	r3, r8
 8005522:	f77f af79 	ble.w	8005418 <_printf_float+0x23c>
 8005526:	2301      	movs	r3, #1
 8005528:	465a      	mov	r2, fp
 800552a:	4631      	mov	r1, r6
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	f43f aeae 	beq.w	8005292 <_printf_float+0xb6>
 8005536:	f108 0801 	add.w	r8, r8, #1
 800553a:	e7ec      	b.n	8005516 <_printf_float+0x33a>
 800553c:	4642      	mov	r2, r8
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	d1c2      	bne.n	80054ce <_printf_float+0x2f2>
 8005548:	e6a3      	b.n	8005292 <_printf_float+0xb6>
 800554a:	2301      	movs	r3, #1
 800554c:	4631      	mov	r1, r6
 800554e:	4628      	mov	r0, r5
 8005550:	9206      	str	r2, [sp, #24]
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	f43f ae9c 	beq.w	8005292 <_printf_float+0xb6>
 800555a:	9a06      	ldr	r2, [sp, #24]
 800555c:	f10b 0b01 	add.w	fp, fp, #1
 8005560:	e7bb      	b.n	80054da <_printf_float+0x2fe>
 8005562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	d1c0      	bne.n	80054f2 <_printf_float+0x316>
 8005570:	e68f      	b.n	8005292 <_printf_float+0xb6>
 8005572:	9a06      	ldr	r2, [sp, #24]
 8005574:	464b      	mov	r3, r9
 8005576:	4442      	add	r2, r8
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	d1c3      	bne.n	800550a <_printf_float+0x32e>
 8005582:	e686      	b.n	8005292 <_printf_float+0xb6>
 8005584:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005588:	f1ba 0f01 	cmp.w	sl, #1
 800558c:	dc01      	bgt.n	8005592 <_printf_float+0x3b6>
 800558e:	07db      	lsls	r3, r3, #31
 8005590:	d536      	bpl.n	8005600 <_printf_float+0x424>
 8005592:	2301      	movs	r3, #1
 8005594:	4642      	mov	r2, r8
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	47b8      	blx	r7
 800559c:	3001      	adds	r0, #1
 800559e:	f43f ae78 	beq.w	8005292 <_printf_float+0xb6>
 80055a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f ae70 	beq.w	8005292 <_printf_float+0xb6>
 80055b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055b6:	2200      	movs	r2, #0
 80055b8:	2300      	movs	r3, #0
 80055ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055be:	f7fb faa3 	bl	8000b08 <__aeabi_dcmpeq>
 80055c2:	b9c0      	cbnz	r0, 80055f6 <_printf_float+0x41a>
 80055c4:	4653      	mov	r3, sl
 80055c6:	f108 0201 	add.w	r2, r8, #1
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	d10c      	bne.n	80055ee <_printf_float+0x412>
 80055d4:	e65d      	b.n	8005292 <_printf_float+0xb6>
 80055d6:	2301      	movs	r3, #1
 80055d8:	465a      	mov	r2, fp
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	47b8      	blx	r7
 80055e0:	3001      	adds	r0, #1
 80055e2:	f43f ae56 	beq.w	8005292 <_printf_float+0xb6>
 80055e6:	f108 0801 	add.w	r8, r8, #1
 80055ea:	45d0      	cmp	r8, sl
 80055ec:	dbf3      	blt.n	80055d6 <_printf_float+0x3fa>
 80055ee:	464b      	mov	r3, r9
 80055f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80055f4:	e6df      	b.n	80053b6 <_printf_float+0x1da>
 80055f6:	f04f 0800 	mov.w	r8, #0
 80055fa:	f104 0b1a 	add.w	fp, r4, #26
 80055fe:	e7f4      	b.n	80055ea <_printf_float+0x40e>
 8005600:	2301      	movs	r3, #1
 8005602:	4642      	mov	r2, r8
 8005604:	e7e1      	b.n	80055ca <_printf_float+0x3ee>
 8005606:	2301      	movs	r3, #1
 8005608:	464a      	mov	r2, r9
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	f43f ae3e 	beq.w	8005292 <_printf_float+0xb6>
 8005616:	f108 0801 	add.w	r8, r8, #1
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800561e:	1a5b      	subs	r3, r3, r1
 8005620:	4543      	cmp	r3, r8
 8005622:	dcf0      	bgt.n	8005606 <_printf_float+0x42a>
 8005624:	e6fc      	b.n	8005420 <_printf_float+0x244>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	f104 0919 	add.w	r9, r4, #25
 800562e:	e7f4      	b.n	800561a <_printf_float+0x43e>

08005630 <_printf_common>:
 8005630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	4616      	mov	r6, r2
 8005636:	4698      	mov	r8, r3
 8005638:	688a      	ldr	r2, [r1, #8]
 800563a:	690b      	ldr	r3, [r1, #16]
 800563c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005640:	4293      	cmp	r3, r2
 8005642:	bfb8      	it	lt
 8005644:	4613      	movlt	r3, r2
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800564c:	4607      	mov	r7, r0
 800564e:	460c      	mov	r4, r1
 8005650:	b10a      	cbz	r2, 8005656 <_printf_common+0x26>
 8005652:	3301      	adds	r3, #1
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	0699      	lsls	r1, r3, #26
 800565a:	bf42      	ittt	mi
 800565c:	6833      	ldrmi	r3, [r6, #0]
 800565e:	3302      	addmi	r3, #2
 8005660:	6033      	strmi	r3, [r6, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	f015 0506 	ands.w	r5, r5, #6
 8005668:	d106      	bne.n	8005678 <_printf_common+0x48>
 800566a:	f104 0a19 	add.w	sl, r4, #25
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	6832      	ldr	r2, [r6, #0]
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	42ab      	cmp	r3, r5
 8005676:	dc26      	bgt.n	80056c6 <_printf_common+0x96>
 8005678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800567c:	6822      	ldr	r2, [r4, #0]
 800567e:	3b00      	subs	r3, #0
 8005680:	bf18      	it	ne
 8005682:	2301      	movne	r3, #1
 8005684:	0692      	lsls	r2, r2, #26
 8005686:	d42b      	bmi.n	80056e0 <_printf_common+0xb0>
 8005688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800568c:	4641      	mov	r1, r8
 800568e:	4638      	mov	r0, r7
 8005690:	47c8      	blx	r9
 8005692:	3001      	adds	r0, #1
 8005694:	d01e      	beq.n	80056d4 <_printf_common+0xa4>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	2b04      	cmp	r3, #4
 80056a0:	bf02      	ittt	eq
 80056a2:	68e5      	ldreq	r5, [r4, #12]
 80056a4:	6833      	ldreq	r3, [r6, #0]
 80056a6:	1aed      	subeq	r5, r5, r3
 80056a8:	68a3      	ldr	r3, [r4, #8]
 80056aa:	bf0c      	ite	eq
 80056ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b0:	2500      	movne	r5, #0
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bfc4      	itt	gt
 80056b6:	1a9b      	subgt	r3, r3, r2
 80056b8:	18ed      	addgt	r5, r5, r3
 80056ba:	2600      	movs	r6, #0
 80056bc:	341a      	adds	r4, #26
 80056be:	42b5      	cmp	r5, r6
 80056c0:	d11a      	bne.n	80056f8 <_printf_common+0xc8>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e008      	b.n	80056d8 <_printf_common+0xa8>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4652      	mov	r2, sl
 80056ca:	4641      	mov	r1, r8
 80056cc:	4638      	mov	r0, r7
 80056ce:	47c8      	blx	r9
 80056d0:	3001      	adds	r0, #1
 80056d2:	d103      	bne.n	80056dc <_printf_common+0xac>
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056dc:	3501      	adds	r5, #1
 80056de:	e7c6      	b.n	800566e <_printf_common+0x3e>
 80056e0:	18e1      	adds	r1, r4, r3
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	2030      	movs	r0, #48	@ 0x30
 80056e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056ea:	4422      	add	r2, r4
 80056ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056f4:	3302      	adds	r3, #2
 80056f6:	e7c7      	b.n	8005688 <_printf_common+0x58>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4622      	mov	r2, r4
 80056fc:	4641      	mov	r1, r8
 80056fe:	4638      	mov	r0, r7
 8005700:	47c8      	blx	r9
 8005702:	3001      	adds	r0, #1
 8005704:	d0e6      	beq.n	80056d4 <_printf_common+0xa4>
 8005706:	3601      	adds	r6, #1
 8005708:	e7d9      	b.n	80056be <_printf_common+0x8e>
	...

0800570c <_printf_i>:
 800570c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	7e0f      	ldrb	r7, [r1, #24]
 8005712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005714:	2f78      	cmp	r7, #120	@ 0x78
 8005716:	4691      	mov	r9, r2
 8005718:	4680      	mov	r8, r0
 800571a:	460c      	mov	r4, r1
 800571c:	469a      	mov	sl, r3
 800571e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005722:	d807      	bhi.n	8005734 <_printf_i+0x28>
 8005724:	2f62      	cmp	r7, #98	@ 0x62
 8005726:	d80a      	bhi.n	800573e <_printf_i+0x32>
 8005728:	2f00      	cmp	r7, #0
 800572a:	f000 80d2 	beq.w	80058d2 <_printf_i+0x1c6>
 800572e:	2f58      	cmp	r7, #88	@ 0x58
 8005730:	f000 80b9 	beq.w	80058a6 <_printf_i+0x19a>
 8005734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800573c:	e03a      	b.n	80057b4 <_printf_i+0xa8>
 800573e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005742:	2b15      	cmp	r3, #21
 8005744:	d8f6      	bhi.n	8005734 <_printf_i+0x28>
 8005746:	a101      	add	r1, pc, #4	@ (adr r1, 800574c <_printf_i+0x40>)
 8005748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800574c:	080057a5 	.word	0x080057a5
 8005750:	080057b9 	.word	0x080057b9
 8005754:	08005735 	.word	0x08005735
 8005758:	08005735 	.word	0x08005735
 800575c:	08005735 	.word	0x08005735
 8005760:	08005735 	.word	0x08005735
 8005764:	080057b9 	.word	0x080057b9
 8005768:	08005735 	.word	0x08005735
 800576c:	08005735 	.word	0x08005735
 8005770:	08005735 	.word	0x08005735
 8005774:	08005735 	.word	0x08005735
 8005778:	080058b9 	.word	0x080058b9
 800577c:	080057e3 	.word	0x080057e3
 8005780:	08005873 	.word	0x08005873
 8005784:	08005735 	.word	0x08005735
 8005788:	08005735 	.word	0x08005735
 800578c:	080058db 	.word	0x080058db
 8005790:	08005735 	.word	0x08005735
 8005794:	080057e3 	.word	0x080057e3
 8005798:	08005735 	.word	0x08005735
 800579c:	08005735 	.word	0x08005735
 80057a0:	0800587b 	.word	0x0800587b
 80057a4:	6833      	ldr	r3, [r6, #0]
 80057a6:	1d1a      	adds	r2, r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6032      	str	r2, [r6, #0]
 80057ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057b4:	2301      	movs	r3, #1
 80057b6:	e09d      	b.n	80058f4 <_printf_i+0x1e8>
 80057b8:	6833      	ldr	r3, [r6, #0]
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	1d19      	adds	r1, r3, #4
 80057be:	6031      	str	r1, [r6, #0]
 80057c0:	0606      	lsls	r6, r0, #24
 80057c2:	d501      	bpl.n	80057c8 <_printf_i+0xbc>
 80057c4:	681d      	ldr	r5, [r3, #0]
 80057c6:	e003      	b.n	80057d0 <_printf_i+0xc4>
 80057c8:	0645      	lsls	r5, r0, #25
 80057ca:	d5fb      	bpl.n	80057c4 <_printf_i+0xb8>
 80057cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	da03      	bge.n	80057dc <_printf_i+0xd0>
 80057d4:	232d      	movs	r3, #45	@ 0x2d
 80057d6:	426d      	negs	r5, r5
 80057d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057dc:	4859      	ldr	r0, [pc, #356]	@ (8005944 <_printf_i+0x238>)
 80057de:	230a      	movs	r3, #10
 80057e0:	e011      	b.n	8005806 <_printf_i+0xfa>
 80057e2:	6821      	ldr	r1, [r4, #0]
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	0608      	lsls	r0, r1, #24
 80057e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80057ec:	d402      	bmi.n	80057f4 <_printf_i+0xe8>
 80057ee:	0649      	lsls	r1, r1, #25
 80057f0:	bf48      	it	mi
 80057f2:	b2ad      	uxthmi	r5, r5
 80057f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057f6:	4853      	ldr	r0, [pc, #332]	@ (8005944 <_printf_i+0x238>)
 80057f8:	6033      	str	r3, [r6, #0]
 80057fa:	bf14      	ite	ne
 80057fc:	230a      	movne	r3, #10
 80057fe:	2308      	moveq	r3, #8
 8005800:	2100      	movs	r1, #0
 8005802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005806:	6866      	ldr	r6, [r4, #4]
 8005808:	60a6      	str	r6, [r4, #8]
 800580a:	2e00      	cmp	r6, #0
 800580c:	bfa2      	ittt	ge
 800580e:	6821      	ldrge	r1, [r4, #0]
 8005810:	f021 0104 	bicge.w	r1, r1, #4
 8005814:	6021      	strge	r1, [r4, #0]
 8005816:	b90d      	cbnz	r5, 800581c <_printf_i+0x110>
 8005818:	2e00      	cmp	r6, #0
 800581a:	d04b      	beq.n	80058b4 <_printf_i+0x1a8>
 800581c:	4616      	mov	r6, r2
 800581e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005822:	fb03 5711 	mls	r7, r3, r1, r5
 8005826:	5dc7      	ldrb	r7, [r0, r7]
 8005828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800582c:	462f      	mov	r7, r5
 800582e:	42bb      	cmp	r3, r7
 8005830:	460d      	mov	r5, r1
 8005832:	d9f4      	bls.n	800581e <_printf_i+0x112>
 8005834:	2b08      	cmp	r3, #8
 8005836:	d10b      	bne.n	8005850 <_printf_i+0x144>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	07df      	lsls	r7, r3, #31
 800583c:	d508      	bpl.n	8005850 <_printf_i+0x144>
 800583e:	6923      	ldr	r3, [r4, #16]
 8005840:	6861      	ldr	r1, [r4, #4]
 8005842:	4299      	cmp	r1, r3
 8005844:	bfde      	ittt	le
 8005846:	2330      	movle	r3, #48	@ 0x30
 8005848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800584c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005850:	1b92      	subs	r2, r2, r6
 8005852:	6122      	str	r2, [r4, #16]
 8005854:	f8cd a000 	str.w	sl, [sp]
 8005858:	464b      	mov	r3, r9
 800585a:	aa03      	add	r2, sp, #12
 800585c:	4621      	mov	r1, r4
 800585e:	4640      	mov	r0, r8
 8005860:	f7ff fee6 	bl	8005630 <_printf_common>
 8005864:	3001      	adds	r0, #1
 8005866:	d14a      	bne.n	80058fe <_printf_i+0x1f2>
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	b004      	add	sp, #16
 800586e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f043 0320 	orr.w	r3, r3, #32
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	4833      	ldr	r0, [pc, #204]	@ (8005948 <_printf_i+0x23c>)
 800587c:	2778      	movs	r7, #120	@ 0x78
 800587e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	6831      	ldr	r1, [r6, #0]
 8005886:	061f      	lsls	r7, r3, #24
 8005888:	f851 5b04 	ldr.w	r5, [r1], #4
 800588c:	d402      	bmi.n	8005894 <_printf_i+0x188>
 800588e:	065f      	lsls	r7, r3, #25
 8005890:	bf48      	it	mi
 8005892:	b2ad      	uxthmi	r5, r5
 8005894:	6031      	str	r1, [r6, #0]
 8005896:	07d9      	lsls	r1, r3, #31
 8005898:	bf44      	itt	mi
 800589a:	f043 0320 	orrmi.w	r3, r3, #32
 800589e:	6023      	strmi	r3, [r4, #0]
 80058a0:	b11d      	cbz	r5, 80058aa <_printf_i+0x19e>
 80058a2:	2310      	movs	r3, #16
 80058a4:	e7ac      	b.n	8005800 <_printf_i+0xf4>
 80058a6:	4827      	ldr	r0, [pc, #156]	@ (8005944 <_printf_i+0x238>)
 80058a8:	e7e9      	b.n	800587e <_printf_i+0x172>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	f023 0320 	bic.w	r3, r3, #32
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	e7f6      	b.n	80058a2 <_printf_i+0x196>
 80058b4:	4616      	mov	r6, r2
 80058b6:	e7bd      	b.n	8005834 <_printf_i+0x128>
 80058b8:	6833      	ldr	r3, [r6, #0]
 80058ba:	6825      	ldr	r5, [r4, #0]
 80058bc:	6961      	ldr	r1, [r4, #20]
 80058be:	1d18      	adds	r0, r3, #4
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	062e      	lsls	r6, r5, #24
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	d501      	bpl.n	80058cc <_printf_i+0x1c0>
 80058c8:	6019      	str	r1, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <_printf_i+0x1c6>
 80058cc:	0668      	lsls	r0, r5, #25
 80058ce:	d5fb      	bpl.n	80058c8 <_printf_i+0x1bc>
 80058d0:	8019      	strh	r1, [r3, #0]
 80058d2:	2300      	movs	r3, #0
 80058d4:	6123      	str	r3, [r4, #16]
 80058d6:	4616      	mov	r6, r2
 80058d8:	e7bc      	b.n	8005854 <_printf_i+0x148>
 80058da:	6833      	ldr	r3, [r6, #0]
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	6032      	str	r2, [r6, #0]
 80058e0:	681e      	ldr	r6, [r3, #0]
 80058e2:	6862      	ldr	r2, [r4, #4]
 80058e4:	2100      	movs	r1, #0
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7fa fc92 	bl	8000210 <memchr>
 80058ec:	b108      	cbz	r0, 80058f2 <_printf_i+0x1e6>
 80058ee:	1b80      	subs	r0, r0, r6
 80058f0:	6060      	str	r0, [r4, #4]
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	2300      	movs	r3, #0
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058fc:	e7aa      	b.n	8005854 <_printf_i+0x148>
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	4632      	mov	r2, r6
 8005902:	4649      	mov	r1, r9
 8005904:	4640      	mov	r0, r8
 8005906:	47d0      	blx	sl
 8005908:	3001      	adds	r0, #1
 800590a:	d0ad      	beq.n	8005868 <_printf_i+0x15c>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	079b      	lsls	r3, r3, #30
 8005910:	d413      	bmi.n	800593a <_printf_i+0x22e>
 8005912:	68e0      	ldr	r0, [r4, #12]
 8005914:	9b03      	ldr	r3, [sp, #12]
 8005916:	4298      	cmp	r0, r3
 8005918:	bfb8      	it	lt
 800591a:	4618      	movlt	r0, r3
 800591c:	e7a6      	b.n	800586c <_printf_i+0x160>
 800591e:	2301      	movs	r3, #1
 8005920:	4632      	mov	r2, r6
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	47d0      	blx	sl
 8005928:	3001      	adds	r0, #1
 800592a:	d09d      	beq.n	8005868 <_printf_i+0x15c>
 800592c:	3501      	adds	r5, #1
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	9903      	ldr	r1, [sp, #12]
 8005932:	1a5b      	subs	r3, r3, r1
 8005934:	42ab      	cmp	r3, r5
 8005936:	dcf2      	bgt.n	800591e <_printf_i+0x212>
 8005938:	e7eb      	b.n	8005912 <_printf_i+0x206>
 800593a:	2500      	movs	r5, #0
 800593c:	f104 0619 	add.w	r6, r4, #25
 8005940:	e7f5      	b.n	800592e <_printf_i+0x222>
 8005942:	bf00      	nop
 8005944:	08008b02 	.word	0x08008b02
 8005948:	08008b13 	.word	0x08008b13

0800594c <std>:
 800594c:	2300      	movs	r3, #0
 800594e:	b510      	push	{r4, lr}
 8005950:	4604      	mov	r4, r0
 8005952:	e9c0 3300 	strd	r3, r3, [r0]
 8005956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595a:	6083      	str	r3, [r0, #8]
 800595c:	8181      	strh	r1, [r0, #12]
 800595e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005960:	81c2      	strh	r2, [r0, #14]
 8005962:	6183      	str	r3, [r0, #24]
 8005964:	4619      	mov	r1, r3
 8005966:	2208      	movs	r2, #8
 8005968:	305c      	adds	r0, #92	@ 0x5c
 800596a:	f000 f928 	bl	8005bbe <memset>
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <std+0x58>)
 8005970:	6263      	str	r3, [r4, #36]	@ 0x24
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <std+0x5c>)
 8005974:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005976:	4b0d      	ldr	r3, [pc, #52]	@ (80059ac <std+0x60>)
 8005978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800597a:	4b0d      	ldr	r3, [pc, #52]	@ (80059b0 <std+0x64>)
 800597c:	6323      	str	r3, [r4, #48]	@ 0x30
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <std+0x68>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	429c      	cmp	r4, r3
 8005984:	d006      	beq.n	8005994 <std+0x48>
 8005986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800598a:	4294      	cmp	r4, r2
 800598c:	d002      	beq.n	8005994 <std+0x48>
 800598e:	33d0      	adds	r3, #208	@ 0xd0
 8005990:	429c      	cmp	r4, r3
 8005992:	d105      	bne.n	80059a0 <std+0x54>
 8005994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599c:	f000 b98c 	b.w	8005cb8 <__retarget_lock_init_recursive>
 80059a0:	bd10      	pop	{r4, pc}
 80059a2:	bf00      	nop
 80059a4:	08005b39 	.word	0x08005b39
 80059a8:	08005b5b 	.word	0x08005b5b
 80059ac:	08005b93 	.word	0x08005b93
 80059b0:	08005bb7 	.word	0x08005bb7
 80059b4:	2000074c 	.word	0x2000074c

080059b8 <stdio_exit_handler>:
 80059b8:	4a02      	ldr	r2, [pc, #8]	@ (80059c4 <stdio_exit_handler+0xc>)
 80059ba:	4903      	ldr	r1, [pc, #12]	@ (80059c8 <stdio_exit_handler+0x10>)
 80059bc:	4803      	ldr	r0, [pc, #12]	@ (80059cc <stdio_exit_handler+0x14>)
 80059be:	f000 b869 	b.w	8005a94 <_fwalk_sglue>
 80059c2:	bf00      	nop
 80059c4:	20000014 	.word	0x20000014
 80059c8:	08007615 	.word	0x08007615
 80059cc:	20000024 	.word	0x20000024

080059d0 <cleanup_stdio>:
 80059d0:	6841      	ldr	r1, [r0, #4]
 80059d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <cleanup_stdio+0x34>)
 80059d4:	4299      	cmp	r1, r3
 80059d6:	b510      	push	{r4, lr}
 80059d8:	4604      	mov	r4, r0
 80059da:	d001      	beq.n	80059e0 <cleanup_stdio+0x10>
 80059dc:	f001 fe1a 	bl	8007614 <_fflush_r>
 80059e0:	68a1      	ldr	r1, [r4, #8]
 80059e2:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <cleanup_stdio+0x38>)
 80059e4:	4299      	cmp	r1, r3
 80059e6:	d002      	beq.n	80059ee <cleanup_stdio+0x1e>
 80059e8:	4620      	mov	r0, r4
 80059ea:	f001 fe13 	bl	8007614 <_fflush_r>
 80059ee:	68e1      	ldr	r1, [r4, #12]
 80059f0:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <cleanup_stdio+0x3c>)
 80059f2:	4299      	cmp	r1, r3
 80059f4:	d004      	beq.n	8005a00 <cleanup_stdio+0x30>
 80059f6:	4620      	mov	r0, r4
 80059f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fc:	f001 be0a 	b.w	8007614 <_fflush_r>
 8005a00:	bd10      	pop	{r4, pc}
 8005a02:	bf00      	nop
 8005a04:	2000074c 	.word	0x2000074c
 8005a08:	200007b4 	.word	0x200007b4
 8005a0c:	2000081c 	.word	0x2000081c

08005a10 <global_stdio_init.part.0>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <global_stdio_init.part.0+0x30>)
 8005a14:	4c0b      	ldr	r4, [pc, #44]	@ (8005a44 <global_stdio_init.part.0+0x34>)
 8005a16:	4a0c      	ldr	r2, [pc, #48]	@ (8005a48 <global_stdio_init.part.0+0x38>)
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2104      	movs	r1, #4
 8005a20:	f7ff ff94 	bl	800594c <std>
 8005a24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a28:	2201      	movs	r2, #1
 8005a2a:	2109      	movs	r1, #9
 8005a2c:	f7ff ff8e 	bl	800594c <std>
 8005a30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a34:	2202      	movs	r2, #2
 8005a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a3a:	2112      	movs	r1, #18
 8005a3c:	f7ff bf86 	b.w	800594c <std>
 8005a40:	20000884 	.word	0x20000884
 8005a44:	2000074c 	.word	0x2000074c
 8005a48:	080059b9 	.word	0x080059b9

08005a4c <__sfp_lock_acquire>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	@ (8005a54 <__sfp_lock_acquire+0x8>)
 8005a4e:	f000 b934 	b.w	8005cba <__retarget_lock_acquire_recursive>
 8005a52:	bf00      	nop
 8005a54:	2000088d 	.word	0x2000088d

08005a58 <__sfp_lock_release>:
 8005a58:	4801      	ldr	r0, [pc, #4]	@ (8005a60 <__sfp_lock_release+0x8>)
 8005a5a:	f000 b92f 	b.w	8005cbc <__retarget_lock_release_recursive>
 8005a5e:	bf00      	nop
 8005a60:	2000088d 	.word	0x2000088d

08005a64 <__sinit>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	4604      	mov	r4, r0
 8005a68:	f7ff fff0 	bl	8005a4c <__sfp_lock_acquire>
 8005a6c:	6a23      	ldr	r3, [r4, #32]
 8005a6e:	b11b      	cbz	r3, 8005a78 <__sinit+0x14>
 8005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a74:	f7ff bff0 	b.w	8005a58 <__sfp_lock_release>
 8005a78:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <__sinit+0x28>)
 8005a7a:	6223      	str	r3, [r4, #32]
 8005a7c:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <__sinit+0x2c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f5      	bne.n	8005a70 <__sinit+0xc>
 8005a84:	f7ff ffc4 	bl	8005a10 <global_stdio_init.part.0>
 8005a88:	e7f2      	b.n	8005a70 <__sinit+0xc>
 8005a8a:	bf00      	nop
 8005a8c:	080059d1 	.word	0x080059d1
 8005a90:	20000884 	.word	0x20000884

08005a94 <_fwalk_sglue>:
 8005a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a98:	4607      	mov	r7, r0
 8005a9a:	4688      	mov	r8, r1
 8005a9c:	4614      	mov	r4, r2
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8005aa8:	d505      	bpl.n	8005ab6 <_fwalk_sglue+0x22>
 8005aaa:	6824      	ldr	r4, [r4, #0]
 8005aac:	2c00      	cmp	r4, #0
 8005aae:	d1f7      	bne.n	8005aa0 <_fwalk_sglue+0xc>
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d907      	bls.n	8005acc <_fwalk_sglue+0x38>
 8005abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	d003      	beq.n	8005acc <_fwalk_sglue+0x38>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	47c0      	blx	r8
 8005aca:	4306      	orrs	r6, r0
 8005acc:	3568      	adds	r5, #104	@ 0x68
 8005ace:	e7e9      	b.n	8005aa4 <_fwalk_sglue+0x10>

08005ad0 <sniprintf>:
 8005ad0:	b40c      	push	{r2, r3}
 8005ad2:	b530      	push	{r4, r5, lr}
 8005ad4:	4b17      	ldr	r3, [pc, #92]	@ (8005b34 <sniprintf+0x64>)
 8005ad6:	1e0c      	subs	r4, r1, #0
 8005ad8:	681d      	ldr	r5, [r3, #0]
 8005ada:	b09d      	sub	sp, #116	@ 0x74
 8005adc:	da08      	bge.n	8005af0 <sniprintf+0x20>
 8005ade:	238b      	movs	r3, #139	@ 0x8b
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae6:	b01d      	add	sp, #116	@ 0x74
 8005ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aec:	b002      	add	sp, #8
 8005aee:	4770      	bx	lr
 8005af0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005af4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005af8:	bf14      	ite	ne
 8005afa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005afe:	4623      	moveq	r3, r4
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	9307      	str	r3, [sp, #28]
 8005b04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b08:	9002      	str	r0, [sp, #8]
 8005b0a:	9006      	str	r0, [sp, #24]
 8005b0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b12:	ab21      	add	r3, sp, #132	@ 0x84
 8005b14:	a902      	add	r1, sp, #8
 8005b16:	4628      	mov	r0, r5
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	f001 fbfb 	bl	8007314 <_svfiprintf_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	bfbc      	itt	lt
 8005b22:	238b      	movlt	r3, #139	@ 0x8b
 8005b24:	602b      	strlt	r3, [r5, #0]
 8005b26:	2c00      	cmp	r4, #0
 8005b28:	d0dd      	beq.n	8005ae6 <sniprintf+0x16>
 8005b2a:	9b02      	ldr	r3, [sp, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e7d9      	b.n	8005ae6 <sniprintf+0x16>
 8005b32:	bf00      	nop
 8005b34:	20000020 	.word	0x20000020

08005b38 <__sread>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b40:	f000 f86c 	bl	8005c1c <_read_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	bfab      	itete	ge
 8005b48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b4c:	181b      	addge	r3, r3, r0
 8005b4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b52:	bfac      	ite	ge
 8005b54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b56:	81a3      	strhlt	r3, [r4, #12]
 8005b58:	bd10      	pop	{r4, pc}

08005b5a <__swrite>:
 8005b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5e:	461f      	mov	r7, r3
 8005b60:	898b      	ldrh	r3, [r1, #12]
 8005b62:	05db      	lsls	r3, r3, #23
 8005b64:	4605      	mov	r5, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	4616      	mov	r6, r2
 8005b6a:	d505      	bpl.n	8005b78 <__swrite+0x1e>
 8005b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b70:	2302      	movs	r3, #2
 8005b72:	2200      	movs	r2, #0
 8005b74:	f000 f840 	bl	8005bf8 <_lseek_r>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	4632      	mov	r2, r6
 8005b86:	463b      	mov	r3, r7
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8e:	f000 b857 	b.w	8005c40 <_write_r>

08005b92 <__sseek>:
 8005b92:	b510      	push	{r4, lr}
 8005b94:	460c      	mov	r4, r1
 8005b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9a:	f000 f82d 	bl	8005bf8 <_lseek_r>
 8005b9e:	1c43      	adds	r3, r0, #1
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	bf15      	itete	ne
 8005ba4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ba6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005baa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bae:	81a3      	strheq	r3, [r4, #12]
 8005bb0:	bf18      	it	ne
 8005bb2:	81a3      	strhne	r3, [r4, #12]
 8005bb4:	bd10      	pop	{r4, pc}

08005bb6 <__sclose>:
 8005bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bba:	f000 b80d 	b.w	8005bd8 <_close_r>

08005bbe <memset>:
 8005bbe:	4402      	add	r2, r0
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d100      	bne.n	8005bc8 <memset+0xa>
 8005bc6:	4770      	bx	lr
 8005bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bcc:	e7f9      	b.n	8005bc2 <memset+0x4>
	...

08005bd0 <_localeconv_r>:
 8005bd0:	4800      	ldr	r0, [pc, #0]	@ (8005bd4 <_localeconv_r+0x4>)
 8005bd2:	4770      	bx	lr
 8005bd4:	20000160 	.word	0x20000160

08005bd8 <_close_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d06      	ldr	r5, [pc, #24]	@ (8005bf4 <_close_r+0x1c>)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f7fb ffa2 	bl	8001b2c <_close>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_close_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_close_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000888 	.word	0x20000888

08005bf8 <_lseek_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d07      	ldr	r5, [pc, #28]	@ (8005c18 <_lseek_r+0x20>)
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	4608      	mov	r0, r1
 8005c00:	4611      	mov	r1, r2
 8005c02:	2200      	movs	r2, #0
 8005c04:	602a      	str	r2, [r5, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f7fb ffb7 	bl	8001b7a <_lseek>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_lseek_r+0x1e>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_lseek_r+0x1e>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	20000888 	.word	0x20000888

08005c1c <_read_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d07      	ldr	r5, [pc, #28]	@ (8005c3c <_read_r+0x20>)
 8005c20:	4604      	mov	r4, r0
 8005c22:	4608      	mov	r0, r1
 8005c24:	4611      	mov	r1, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	602a      	str	r2, [r5, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f7fb ff45 	bl	8001aba <_read>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_read_r+0x1e>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_read_r+0x1e>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	20000888 	.word	0x20000888

08005c40 <_write_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d07      	ldr	r5, [pc, #28]	@ (8005c60 <_write_r+0x20>)
 8005c44:	4604      	mov	r4, r0
 8005c46:	4608      	mov	r0, r1
 8005c48:	4611      	mov	r1, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	602a      	str	r2, [r5, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7fb ff50 	bl	8001af4 <_write>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_write_r+0x1e>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_write_r+0x1e>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	20000888 	.word	0x20000888

08005c64 <__errno>:
 8005c64:	4b01      	ldr	r3, [pc, #4]	@ (8005c6c <__errno+0x8>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000020 	.word	0x20000020

08005c70 <__libc_init_array>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4d0d      	ldr	r5, [pc, #52]	@ (8005ca8 <__libc_init_array+0x38>)
 8005c74:	4c0d      	ldr	r4, [pc, #52]	@ (8005cac <__libc_init_array+0x3c>)
 8005c76:	1b64      	subs	r4, r4, r5
 8005c78:	10a4      	asrs	r4, r4, #2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	d109      	bne.n	8005c94 <__libc_init_array+0x24>
 8005c80:	4d0b      	ldr	r5, [pc, #44]	@ (8005cb0 <__libc_init_array+0x40>)
 8005c82:	4c0c      	ldr	r4, [pc, #48]	@ (8005cb4 <__libc_init_array+0x44>)
 8005c84:	f002 f864 	bl	8007d50 <_init>
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	42a6      	cmp	r6, r4
 8005c90:	d105      	bne.n	8005c9e <__libc_init_array+0x2e>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c98:	4798      	blx	r3
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7ee      	b.n	8005c7c <__libc_init_array+0xc>
 8005c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca2:	4798      	blx	r3
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	e7f2      	b.n	8005c8e <__libc_init_array+0x1e>
 8005ca8:	08008e68 	.word	0x08008e68
 8005cac:	08008e68 	.word	0x08008e68
 8005cb0:	08008e68 	.word	0x08008e68
 8005cb4:	08008e6c 	.word	0x08008e6c

08005cb8 <__retarget_lock_init_recursive>:
 8005cb8:	4770      	bx	lr

08005cba <__retarget_lock_acquire_recursive>:
 8005cba:	4770      	bx	lr

08005cbc <__retarget_lock_release_recursive>:
 8005cbc:	4770      	bx	lr

08005cbe <quorem>:
 8005cbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc2:	6903      	ldr	r3, [r0, #16]
 8005cc4:	690c      	ldr	r4, [r1, #16]
 8005cc6:	42a3      	cmp	r3, r4
 8005cc8:	4607      	mov	r7, r0
 8005cca:	db7e      	blt.n	8005dca <quorem+0x10c>
 8005ccc:	3c01      	subs	r4, #1
 8005cce:	f101 0814 	add.w	r8, r1, #20
 8005cd2:	00a3      	lsls	r3, r4, #2
 8005cd4:	f100 0514 	add.w	r5, r0, #20
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	429a      	cmp	r2, r3
 8005cec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cf4:	d32e      	bcc.n	8005d54 <quorem+0x96>
 8005cf6:	f04f 0a00 	mov.w	sl, #0
 8005cfa:	46c4      	mov	ip, r8
 8005cfc:	46ae      	mov	lr, r5
 8005cfe:	46d3      	mov	fp, sl
 8005d00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d04:	b298      	uxth	r0, r3
 8005d06:	fb06 a000 	mla	r0, r6, r0, sl
 8005d0a:	0c02      	lsrs	r2, r0, #16
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	fb06 2303 	mla	r3, r6, r3, r2
 8005d12:	f8de 2000 	ldr.w	r2, [lr]
 8005d16:	b280      	uxth	r0, r0
 8005d18:	b292      	uxth	r2, r2
 8005d1a:	1a12      	subs	r2, r2, r0
 8005d1c:	445a      	add	r2, fp
 8005d1e:	f8de 0000 	ldr.w	r0, [lr]
 8005d22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d30:	b292      	uxth	r2, r2
 8005d32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d36:	45e1      	cmp	r9, ip
 8005d38:	f84e 2b04 	str.w	r2, [lr], #4
 8005d3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d40:	d2de      	bcs.n	8005d00 <quorem+0x42>
 8005d42:	9b00      	ldr	r3, [sp, #0]
 8005d44:	58eb      	ldr	r3, [r5, r3]
 8005d46:	b92b      	cbnz	r3, 8005d54 <quorem+0x96>
 8005d48:	9b01      	ldr	r3, [sp, #4]
 8005d4a:	3b04      	subs	r3, #4
 8005d4c:	429d      	cmp	r5, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	d32f      	bcc.n	8005db2 <quorem+0xf4>
 8005d52:	613c      	str	r4, [r7, #16]
 8005d54:	4638      	mov	r0, r7
 8005d56:	f001 f979 	bl	800704c <__mcmp>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	db25      	blt.n	8005daa <quorem+0xec>
 8005d5e:	4629      	mov	r1, r5
 8005d60:	2000      	movs	r0, #0
 8005d62:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d66:	f8d1 c000 	ldr.w	ip, [r1]
 8005d6a:	fa1f fe82 	uxth.w	lr, r2
 8005d6e:	fa1f f38c 	uxth.w	r3, ip
 8005d72:	eba3 030e 	sub.w	r3, r3, lr
 8005d76:	4403      	add	r3, r0
 8005d78:	0c12      	lsrs	r2, r2, #16
 8005d7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d88:	45c1      	cmp	r9, r8
 8005d8a:	f841 3b04 	str.w	r3, [r1], #4
 8005d8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d92:	d2e6      	bcs.n	8005d62 <quorem+0xa4>
 8005d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d9c:	b922      	cbnz	r2, 8005da8 <quorem+0xea>
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	429d      	cmp	r5, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	d30b      	bcc.n	8005dbe <quorem+0x100>
 8005da6:	613c      	str	r4, [r7, #16]
 8005da8:	3601      	adds	r6, #1
 8005daa:	4630      	mov	r0, r6
 8005dac:	b003      	add	sp, #12
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	3b04      	subs	r3, #4
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	d1cb      	bne.n	8005d52 <quorem+0x94>
 8005dba:	3c01      	subs	r4, #1
 8005dbc:	e7c6      	b.n	8005d4c <quorem+0x8e>
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	d1ef      	bne.n	8005da6 <quorem+0xe8>
 8005dc6:	3c01      	subs	r4, #1
 8005dc8:	e7ea      	b.n	8005da0 <quorem+0xe2>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e7ee      	b.n	8005dac <quorem+0xee>
	...

08005dd0 <_dtoa_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	69c7      	ldr	r7, [r0, #28]
 8005dd6:	b099      	sub	sp, #100	@ 0x64
 8005dd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ddc:	ec55 4b10 	vmov	r4, r5, d0
 8005de0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005de2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005de4:	4683      	mov	fp, r0
 8005de6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005de8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dea:	b97f      	cbnz	r7, 8005e0c <_dtoa_r+0x3c>
 8005dec:	2010      	movs	r0, #16
 8005dee:	f000 fdfd 	bl	80069ec <malloc>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005df8:	b920      	cbnz	r0, 8005e04 <_dtoa_r+0x34>
 8005dfa:	4ba7      	ldr	r3, [pc, #668]	@ (8006098 <_dtoa_r+0x2c8>)
 8005dfc:	21ef      	movs	r1, #239	@ 0xef
 8005dfe:	48a7      	ldr	r0, [pc, #668]	@ (800609c <_dtoa_r+0x2cc>)
 8005e00:	f001 fc68 	bl	80076d4 <__assert_func>
 8005e04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e08:	6007      	str	r7, [r0, #0]
 8005e0a:	60c7      	str	r7, [r0, #12]
 8005e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e10:	6819      	ldr	r1, [r3, #0]
 8005e12:	b159      	cbz	r1, 8005e2c <_dtoa_r+0x5c>
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	604a      	str	r2, [r1, #4]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4093      	lsls	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
 8005e1e:	4658      	mov	r0, fp
 8005e20:	f000 feda 	bl	8006bd8 <_Bfree>
 8005e24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	1e2b      	subs	r3, r5, #0
 8005e2e:	bfb9      	ittee	lt
 8005e30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e34:	9303      	strlt	r3, [sp, #12]
 8005e36:	2300      	movge	r3, #0
 8005e38:	6033      	strge	r3, [r6, #0]
 8005e3a:	9f03      	ldr	r7, [sp, #12]
 8005e3c:	4b98      	ldr	r3, [pc, #608]	@ (80060a0 <_dtoa_r+0x2d0>)
 8005e3e:	bfbc      	itt	lt
 8005e40:	2201      	movlt	r2, #1
 8005e42:	6032      	strlt	r2, [r6, #0]
 8005e44:	43bb      	bics	r3, r7
 8005e46:	d112      	bne.n	8005e6e <_dtoa_r+0x9e>
 8005e48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e54:	4323      	orrs	r3, r4
 8005e56:	f000 854d 	beq.w	80068f4 <_dtoa_r+0xb24>
 8005e5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80060b4 <_dtoa_r+0x2e4>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 854f 	beq.w	8006904 <_dtoa_r+0xb34>
 8005e66:	f10a 0303 	add.w	r3, sl, #3
 8005e6a:	f000 bd49 	b.w	8006900 <_dtoa_r+0xb30>
 8005e6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e72:	2200      	movs	r2, #0
 8005e74:	ec51 0b17 	vmov	r0, r1, d7
 8005e78:	2300      	movs	r3, #0
 8005e7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005e7e:	f7fa fe43 	bl	8000b08 <__aeabi_dcmpeq>
 8005e82:	4680      	mov	r8, r0
 8005e84:	b158      	cbz	r0, 8005e9e <_dtoa_r+0xce>
 8005e86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e88:	2301      	movs	r3, #1
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e8e:	b113      	cbz	r3, 8005e96 <_dtoa_r+0xc6>
 8005e90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e92:	4b84      	ldr	r3, [pc, #528]	@ (80060a4 <_dtoa_r+0x2d4>)
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80060b8 <_dtoa_r+0x2e8>
 8005e9a:	f000 bd33 	b.w	8006904 <_dtoa_r+0xb34>
 8005e9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005ea2:	aa16      	add	r2, sp, #88	@ 0x58
 8005ea4:	a917      	add	r1, sp, #92	@ 0x5c
 8005ea6:	4658      	mov	r0, fp
 8005ea8:	f001 f980 	bl	80071ac <__d2b>
 8005eac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	d077      	beq.n	8005fa6 <_dtoa_r+0x1d6>
 8005eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005eb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ec4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ec8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ecc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4b74      	ldr	r3, [pc, #464]	@ (80060a8 <_dtoa_r+0x2d8>)
 8005ed6:	f7fa f9f7 	bl	80002c8 <__aeabi_dsub>
 8005eda:	a369      	add	r3, pc, #420	@ (adr r3, 8006080 <_dtoa_r+0x2b0>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa fbaa 	bl	8000638 <__aeabi_dmul>
 8005ee4:	a368      	add	r3, pc, #416	@ (adr r3, 8006088 <_dtoa_r+0x2b8>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa f9ef 	bl	80002cc <__adddf3>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	f7fa fb36 	bl	8000564 <__aeabi_i2d>
 8005ef8:	a365      	add	r3, pc, #404	@ (adr r3, 8006090 <_dtoa_r+0x2c0>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f7fa fb9b 	bl	8000638 <__aeabi_dmul>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa f9df 	bl	80002cc <__adddf3>
 8005f0e:	4604      	mov	r4, r0
 8005f10:	460d      	mov	r5, r1
 8005f12:	f7fa fe41 	bl	8000b98 <__aeabi_d2iz>
 8005f16:	2200      	movs	r2, #0
 8005f18:	4607      	mov	r7, r0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fdfc 	bl	8000b1c <__aeabi_dcmplt>
 8005f24:	b140      	cbz	r0, 8005f38 <_dtoa_r+0x168>
 8005f26:	4638      	mov	r0, r7
 8005f28:	f7fa fb1c 	bl	8000564 <__aeabi_i2d>
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	462b      	mov	r3, r5
 8005f30:	f7fa fdea 	bl	8000b08 <__aeabi_dcmpeq>
 8005f34:	b900      	cbnz	r0, 8005f38 <_dtoa_r+0x168>
 8005f36:	3f01      	subs	r7, #1
 8005f38:	2f16      	cmp	r7, #22
 8005f3a:	d851      	bhi.n	8005fe0 <_dtoa_r+0x210>
 8005f3c:	4b5b      	ldr	r3, [pc, #364]	@ (80060ac <_dtoa_r+0x2dc>)
 8005f3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f4a:	f7fa fde7 	bl	8000b1c <__aeabi_dcmplt>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d048      	beq.n	8005fe4 <_dtoa_r+0x214>
 8005f52:	3f01      	subs	r7, #1
 8005f54:	2300      	movs	r3, #0
 8005f56:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f5a:	1b9b      	subs	r3, r3, r6
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	bf44      	itt	mi
 8005f60:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f64:	2300      	movmi	r3, #0
 8005f66:	9208      	str	r2, [sp, #32]
 8005f68:	bf54      	ite	pl
 8005f6a:	f04f 0800 	movpl.w	r8, #0
 8005f6e:	9308      	strmi	r3, [sp, #32]
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	db39      	blt.n	8005fe8 <_dtoa_r+0x218>
 8005f74:	9b08      	ldr	r3, [sp, #32]
 8005f76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005f78:	443b      	add	r3, r7
 8005f7a:	9308      	str	r3, [sp, #32]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f82:	2b09      	cmp	r3, #9
 8005f84:	d864      	bhi.n	8006050 <_dtoa_r+0x280>
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	bfc4      	itt	gt
 8005f8a:	3b04      	subgt	r3, #4
 8005f8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f90:	f1a3 0302 	sub.w	r3, r3, #2
 8005f94:	bfcc      	ite	gt
 8005f96:	2400      	movgt	r4, #0
 8005f98:	2401      	movle	r4, #1
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d863      	bhi.n	8006066 <_dtoa_r+0x296>
 8005f9e:	e8df f003 	tbb	[pc, r3]
 8005fa2:	372a      	.short	0x372a
 8005fa4:	5535      	.short	0x5535
 8005fa6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005faa:	441e      	add	r6, r3
 8005fac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	bfc1      	itttt	gt
 8005fb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005fb8:	409f      	lslgt	r7, r3
 8005fba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005fbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fc2:	bfd6      	itet	le
 8005fc4:	f1c3 0320 	rsble	r3, r3, #32
 8005fc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005fcc:	fa04 f003 	lslle.w	r0, r4, r3
 8005fd0:	f7fa fab8 	bl	8000544 <__aeabi_ui2d>
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fda:	3e01      	subs	r6, #1
 8005fdc:	9214      	str	r2, [sp, #80]	@ 0x50
 8005fde:	e777      	b.n	8005ed0 <_dtoa_r+0x100>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e7b8      	b.n	8005f56 <_dtoa_r+0x186>
 8005fe4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005fe6:	e7b7      	b.n	8005f58 <_dtoa_r+0x188>
 8005fe8:	427b      	negs	r3, r7
 8005fea:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fec:	2300      	movs	r3, #0
 8005fee:	eba8 0807 	sub.w	r8, r8, r7
 8005ff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ff4:	e7c4      	b.n	8005f80 <_dtoa_r+0x1b0>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dc35      	bgt.n	800606c <_dtoa_r+0x29c>
 8006000:	2301      	movs	r3, #1
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	9307      	str	r3, [sp, #28]
 8006006:	461a      	mov	r2, r3
 8006008:	920e      	str	r2, [sp, #56]	@ 0x38
 800600a:	e00b      	b.n	8006024 <_dtoa_r+0x254>
 800600c:	2301      	movs	r3, #1
 800600e:	e7f3      	b.n	8005ff8 <_dtoa_r+0x228>
 8006010:	2300      	movs	r3, #0
 8006012:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	3301      	adds	r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	9307      	str	r3, [sp, #28]
 8006020:	bfb8      	it	lt
 8006022:	2301      	movlt	r3, #1
 8006024:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006028:	2100      	movs	r1, #0
 800602a:	2204      	movs	r2, #4
 800602c:	f102 0514 	add.w	r5, r2, #20
 8006030:	429d      	cmp	r5, r3
 8006032:	d91f      	bls.n	8006074 <_dtoa_r+0x2a4>
 8006034:	6041      	str	r1, [r0, #4]
 8006036:	4658      	mov	r0, fp
 8006038:	f000 fd8e 	bl	8006b58 <_Balloc>
 800603c:	4682      	mov	sl, r0
 800603e:	2800      	cmp	r0, #0
 8006040:	d13c      	bne.n	80060bc <_dtoa_r+0x2ec>
 8006042:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <_dtoa_r+0x2e0>)
 8006044:	4602      	mov	r2, r0
 8006046:	f240 11af 	movw	r1, #431	@ 0x1af
 800604a:	e6d8      	b.n	8005dfe <_dtoa_r+0x2e>
 800604c:	2301      	movs	r3, #1
 800604e:	e7e0      	b.n	8006012 <_dtoa_r+0x242>
 8006050:	2401      	movs	r4, #1
 8006052:	2300      	movs	r3, #0
 8006054:	9309      	str	r3, [sp, #36]	@ 0x24
 8006056:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006058:	f04f 33ff 	mov.w	r3, #4294967295
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	9307      	str	r3, [sp, #28]
 8006060:	2200      	movs	r2, #0
 8006062:	2312      	movs	r3, #18
 8006064:	e7d0      	b.n	8006008 <_dtoa_r+0x238>
 8006066:	2301      	movs	r3, #1
 8006068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800606a:	e7f5      	b.n	8006058 <_dtoa_r+0x288>
 800606c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	9307      	str	r3, [sp, #28]
 8006072:	e7d7      	b.n	8006024 <_dtoa_r+0x254>
 8006074:	3101      	adds	r1, #1
 8006076:	0052      	lsls	r2, r2, #1
 8006078:	e7d8      	b.n	800602c <_dtoa_r+0x25c>
 800607a:	bf00      	nop
 800607c:	f3af 8000 	nop.w
 8006080:	636f4361 	.word	0x636f4361
 8006084:	3fd287a7 	.word	0x3fd287a7
 8006088:	8b60c8b3 	.word	0x8b60c8b3
 800608c:	3fc68a28 	.word	0x3fc68a28
 8006090:	509f79fb 	.word	0x509f79fb
 8006094:	3fd34413 	.word	0x3fd34413
 8006098:	08008b31 	.word	0x08008b31
 800609c:	08008b48 	.word	0x08008b48
 80060a0:	7ff00000 	.word	0x7ff00000
 80060a4:	08008b01 	.word	0x08008b01
 80060a8:	3ff80000 	.word	0x3ff80000
 80060ac:	08008c40 	.word	0x08008c40
 80060b0:	08008ba0 	.word	0x08008ba0
 80060b4:	08008b2d 	.word	0x08008b2d
 80060b8:	08008b00 	.word	0x08008b00
 80060bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060c0:	6018      	str	r0, [r3, #0]
 80060c2:	9b07      	ldr	r3, [sp, #28]
 80060c4:	2b0e      	cmp	r3, #14
 80060c6:	f200 80a4 	bhi.w	8006212 <_dtoa_r+0x442>
 80060ca:	2c00      	cmp	r4, #0
 80060cc:	f000 80a1 	beq.w	8006212 <_dtoa_r+0x442>
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	dd33      	ble.n	800613c <_dtoa_r+0x36c>
 80060d4:	4bad      	ldr	r3, [pc, #692]	@ (800638c <_dtoa_r+0x5bc>)
 80060d6:	f007 020f 	and.w	r2, r7, #15
 80060da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060de:	ed93 7b00 	vldr	d7, [r3]
 80060e2:	05f8      	lsls	r0, r7, #23
 80060e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80060e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060ec:	d516      	bpl.n	800611c <_dtoa_r+0x34c>
 80060ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006390 <_dtoa_r+0x5c0>)
 80060f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060f8:	f7fa fbc8 	bl	800088c <__aeabi_ddiv>
 80060fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006100:	f004 040f 	and.w	r4, r4, #15
 8006104:	2603      	movs	r6, #3
 8006106:	4da2      	ldr	r5, [pc, #648]	@ (8006390 <_dtoa_r+0x5c0>)
 8006108:	b954      	cbnz	r4, 8006120 <_dtoa_r+0x350>
 800610a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006112:	f7fa fbbb 	bl	800088c <__aeabi_ddiv>
 8006116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800611a:	e028      	b.n	800616e <_dtoa_r+0x39e>
 800611c:	2602      	movs	r6, #2
 800611e:	e7f2      	b.n	8006106 <_dtoa_r+0x336>
 8006120:	07e1      	lsls	r1, r4, #31
 8006122:	d508      	bpl.n	8006136 <_dtoa_r+0x366>
 8006124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006128:	e9d5 2300 	ldrd	r2, r3, [r5]
 800612c:	f7fa fa84 	bl	8000638 <__aeabi_dmul>
 8006130:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006134:	3601      	adds	r6, #1
 8006136:	1064      	asrs	r4, r4, #1
 8006138:	3508      	adds	r5, #8
 800613a:	e7e5      	b.n	8006108 <_dtoa_r+0x338>
 800613c:	f000 80d2 	beq.w	80062e4 <_dtoa_r+0x514>
 8006140:	427c      	negs	r4, r7
 8006142:	4b92      	ldr	r3, [pc, #584]	@ (800638c <_dtoa_r+0x5bc>)
 8006144:	4d92      	ldr	r5, [pc, #584]	@ (8006390 <_dtoa_r+0x5c0>)
 8006146:	f004 020f 	and.w	r2, r4, #15
 800614a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006156:	f7fa fa6f 	bl	8000638 <__aeabi_dmul>
 800615a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800615e:	1124      	asrs	r4, r4, #4
 8006160:	2300      	movs	r3, #0
 8006162:	2602      	movs	r6, #2
 8006164:	2c00      	cmp	r4, #0
 8006166:	f040 80b2 	bne.w	80062ce <_dtoa_r+0x4fe>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1d3      	bne.n	8006116 <_dtoa_r+0x346>
 800616e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006170:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80b7 	beq.w	80062e8 <_dtoa_r+0x518>
 800617a:	4b86      	ldr	r3, [pc, #536]	@ (8006394 <_dtoa_r+0x5c4>)
 800617c:	2200      	movs	r2, #0
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa fccb 	bl	8000b1c <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	f000 80ae 	beq.w	80062e8 <_dtoa_r+0x518>
 800618c:	9b07      	ldr	r3, [sp, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80aa 	beq.w	80062e8 <_dtoa_r+0x518>
 8006194:	9b00      	ldr	r3, [sp, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	dd37      	ble.n	800620a <_dtoa_r+0x43a>
 800619a:	1e7b      	subs	r3, r7, #1
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	4620      	mov	r0, r4
 80061a0:	4b7d      	ldr	r3, [pc, #500]	@ (8006398 <_dtoa_r+0x5c8>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7fa fa47 	bl	8000638 <__aeabi_dmul>
 80061aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ae:	9c00      	ldr	r4, [sp, #0]
 80061b0:	3601      	adds	r6, #1
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7fa f9d6 	bl	8000564 <__aeabi_i2d>
 80061b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061bc:	f7fa fa3c 	bl	8000638 <__aeabi_dmul>
 80061c0:	4b76      	ldr	r3, [pc, #472]	@ (800639c <_dtoa_r+0x5cc>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	f7fa f882 	bl	80002cc <__adddf3>
 80061c8:	4605      	mov	r5, r0
 80061ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061ce:	2c00      	cmp	r4, #0
 80061d0:	f040 808d 	bne.w	80062ee <_dtoa_r+0x51e>
 80061d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d8:	4b71      	ldr	r3, [pc, #452]	@ (80063a0 <_dtoa_r+0x5d0>)
 80061da:	2200      	movs	r2, #0
 80061dc:	f7fa f874 	bl	80002c8 <__aeabi_dsub>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061e8:	462a      	mov	r2, r5
 80061ea:	4633      	mov	r3, r6
 80061ec:	f7fa fcb4 	bl	8000b58 <__aeabi_dcmpgt>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f040 828b 	bne.w	800670c <_dtoa_r+0x93c>
 80061f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fa:	462a      	mov	r2, r5
 80061fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006200:	f7fa fc8c 	bl	8000b1c <__aeabi_dcmplt>
 8006204:	2800      	cmp	r0, #0
 8006206:	f040 8128 	bne.w	800645a <_dtoa_r+0x68a>
 800620a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800620e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006212:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006214:	2b00      	cmp	r3, #0
 8006216:	f2c0 815a 	blt.w	80064ce <_dtoa_r+0x6fe>
 800621a:	2f0e      	cmp	r7, #14
 800621c:	f300 8157 	bgt.w	80064ce <_dtoa_r+0x6fe>
 8006220:	4b5a      	ldr	r3, [pc, #360]	@ (800638c <_dtoa_r+0x5bc>)
 8006222:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006226:	ed93 7b00 	vldr	d7, [r3]
 800622a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	ed8d 7b00 	vstr	d7, [sp]
 8006232:	da03      	bge.n	800623c <_dtoa_r+0x46c>
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f340 8101 	ble.w	800643e <_dtoa_r+0x66e>
 800623c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006240:	4656      	mov	r6, sl
 8006242:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa fb1f 	bl	800088c <__aeabi_ddiv>
 800624e:	f7fa fca3 	bl	8000b98 <__aeabi_d2iz>
 8006252:	4680      	mov	r8, r0
 8006254:	f7fa f986 	bl	8000564 <__aeabi_i2d>
 8006258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800625c:	f7fa f9ec 	bl	8000638 <__aeabi_dmul>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800626c:	f7fa f82c 	bl	80002c8 <__aeabi_dsub>
 8006270:	f806 4b01 	strb.w	r4, [r6], #1
 8006274:	9d07      	ldr	r5, [sp, #28]
 8006276:	eba6 040a 	sub.w	r4, r6, sl
 800627a:	42a5      	cmp	r5, r4
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	f040 8117 	bne.w	80064b2 <_dtoa_r+0x6e2>
 8006284:	f7fa f822 	bl	80002cc <__adddf3>
 8006288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800628c:	4604      	mov	r4, r0
 800628e:	460d      	mov	r5, r1
 8006290:	f7fa fc62 	bl	8000b58 <__aeabi_dcmpgt>
 8006294:	2800      	cmp	r0, #0
 8006296:	f040 80f9 	bne.w	800648c <_dtoa_r+0x6bc>
 800629a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800629e:	4620      	mov	r0, r4
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7fa fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80062a6:	b118      	cbz	r0, 80062b0 <_dtoa_r+0x4e0>
 80062a8:	f018 0f01 	tst.w	r8, #1
 80062ac:	f040 80ee 	bne.w	800648c <_dtoa_r+0x6bc>
 80062b0:	4649      	mov	r1, r9
 80062b2:	4658      	mov	r0, fp
 80062b4:	f000 fc90 	bl	8006bd8 <_Bfree>
 80062b8:	2300      	movs	r3, #0
 80062ba:	7033      	strb	r3, [r6, #0]
 80062bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062be:	3701      	adds	r7, #1
 80062c0:	601f      	str	r7, [r3, #0]
 80062c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 831d 	beq.w	8006904 <_dtoa_r+0xb34>
 80062ca:	601e      	str	r6, [r3, #0]
 80062cc:	e31a      	b.n	8006904 <_dtoa_r+0xb34>
 80062ce:	07e2      	lsls	r2, r4, #31
 80062d0:	d505      	bpl.n	80062de <_dtoa_r+0x50e>
 80062d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062d6:	f7fa f9af 	bl	8000638 <__aeabi_dmul>
 80062da:	3601      	adds	r6, #1
 80062dc:	2301      	movs	r3, #1
 80062de:	1064      	asrs	r4, r4, #1
 80062e0:	3508      	adds	r5, #8
 80062e2:	e73f      	b.n	8006164 <_dtoa_r+0x394>
 80062e4:	2602      	movs	r6, #2
 80062e6:	e742      	b.n	800616e <_dtoa_r+0x39e>
 80062e8:	9c07      	ldr	r4, [sp, #28]
 80062ea:	9704      	str	r7, [sp, #16]
 80062ec:	e761      	b.n	80061b2 <_dtoa_r+0x3e2>
 80062ee:	4b27      	ldr	r3, [pc, #156]	@ (800638c <_dtoa_r+0x5bc>)
 80062f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062fa:	4454      	add	r4, sl
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d053      	beq.n	80063a8 <_dtoa_r+0x5d8>
 8006300:	4928      	ldr	r1, [pc, #160]	@ (80063a4 <_dtoa_r+0x5d4>)
 8006302:	2000      	movs	r0, #0
 8006304:	f7fa fac2 	bl	800088c <__aeabi_ddiv>
 8006308:	4633      	mov	r3, r6
 800630a:	462a      	mov	r2, r5
 800630c:	f7f9 ffdc 	bl	80002c8 <__aeabi_dsub>
 8006310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006314:	4656      	mov	r6, sl
 8006316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800631a:	f7fa fc3d 	bl	8000b98 <__aeabi_d2iz>
 800631e:	4605      	mov	r5, r0
 8006320:	f7fa f920 	bl	8000564 <__aeabi_i2d>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632c:	f7f9 ffcc 	bl	80002c8 <__aeabi_dsub>
 8006330:	3530      	adds	r5, #48	@ 0x30
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800633a:	f806 5b01 	strb.w	r5, [r6], #1
 800633e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006342:	f7fa fbeb 	bl	8000b1c <__aeabi_dcmplt>
 8006346:	2800      	cmp	r0, #0
 8006348:	d171      	bne.n	800642e <_dtoa_r+0x65e>
 800634a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800634e:	4911      	ldr	r1, [pc, #68]	@ (8006394 <_dtoa_r+0x5c4>)
 8006350:	2000      	movs	r0, #0
 8006352:	f7f9 ffb9 	bl	80002c8 <__aeabi_dsub>
 8006356:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800635a:	f7fa fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800635e:	2800      	cmp	r0, #0
 8006360:	f040 8095 	bne.w	800648e <_dtoa_r+0x6be>
 8006364:	42a6      	cmp	r6, r4
 8006366:	f43f af50 	beq.w	800620a <_dtoa_r+0x43a>
 800636a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800636e:	4b0a      	ldr	r3, [pc, #40]	@ (8006398 <_dtoa_r+0x5c8>)
 8006370:	2200      	movs	r2, #0
 8006372:	f7fa f961 	bl	8000638 <__aeabi_dmul>
 8006376:	4b08      	ldr	r3, [pc, #32]	@ (8006398 <_dtoa_r+0x5c8>)
 8006378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800637c:	2200      	movs	r2, #0
 800637e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006382:	f7fa f959 	bl	8000638 <__aeabi_dmul>
 8006386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800638a:	e7c4      	b.n	8006316 <_dtoa_r+0x546>
 800638c:	08008c40 	.word	0x08008c40
 8006390:	08008c18 	.word	0x08008c18
 8006394:	3ff00000 	.word	0x3ff00000
 8006398:	40240000 	.word	0x40240000
 800639c:	401c0000 	.word	0x401c0000
 80063a0:	40140000 	.word	0x40140000
 80063a4:	3fe00000 	.word	0x3fe00000
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7fa f944 	bl	8000638 <__aeabi_dmul>
 80063b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80063b6:	4656      	mov	r6, sl
 80063b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063bc:	f7fa fbec 	bl	8000b98 <__aeabi_d2iz>
 80063c0:	4605      	mov	r5, r0
 80063c2:	f7fa f8cf 	bl	8000564 <__aeabi_i2d>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ce:	f7f9 ff7b 	bl	80002c8 <__aeabi_dsub>
 80063d2:	3530      	adds	r5, #48	@ 0x30
 80063d4:	f806 5b01 	strb.w	r5, [r6], #1
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	42a6      	cmp	r6, r4
 80063de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	d124      	bne.n	8006432 <_dtoa_r+0x662>
 80063e8:	4bac      	ldr	r3, [pc, #688]	@ (800669c <_dtoa_r+0x8cc>)
 80063ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063ee:	f7f9 ff6d 	bl	80002cc <__adddf3>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fa:	f7fa fbad 	bl	8000b58 <__aeabi_dcmpgt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d145      	bne.n	800648e <_dtoa_r+0x6be>
 8006402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006406:	49a5      	ldr	r1, [pc, #660]	@ (800669c <_dtoa_r+0x8cc>)
 8006408:	2000      	movs	r0, #0
 800640a:	f7f9 ff5d 	bl	80002c8 <__aeabi_dsub>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006416:	f7fa fb81 	bl	8000b1c <__aeabi_dcmplt>
 800641a:	2800      	cmp	r0, #0
 800641c:	f43f aef5 	beq.w	800620a <_dtoa_r+0x43a>
 8006420:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006422:	1e73      	subs	r3, r6, #1
 8006424:	9315      	str	r3, [sp, #84]	@ 0x54
 8006426:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800642a:	2b30      	cmp	r3, #48	@ 0x30
 800642c:	d0f8      	beq.n	8006420 <_dtoa_r+0x650>
 800642e:	9f04      	ldr	r7, [sp, #16]
 8006430:	e73e      	b.n	80062b0 <_dtoa_r+0x4e0>
 8006432:	4b9b      	ldr	r3, [pc, #620]	@ (80066a0 <_dtoa_r+0x8d0>)
 8006434:	f7fa f900 	bl	8000638 <__aeabi_dmul>
 8006438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800643c:	e7bc      	b.n	80063b8 <_dtoa_r+0x5e8>
 800643e:	d10c      	bne.n	800645a <_dtoa_r+0x68a>
 8006440:	4b98      	ldr	r3, [pc, #608]	@ (80066a4 <_dtoa_r+0x8d4>)
 8006442:	2200      	movs	r2, #0
 8006444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006448:	f7fa f8f6 	bl	8000638 <__aeabi_dmul>
 800644c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006450:	f7fa fb78 	bl	8000b44 <__aeabi_dcmpge>
 8006454:	2800      	cmp	r0, #0
 8006456:	f000 8157 	beq.w	8006708 <_dtoa_r+0x938>
 800645a:	2400      	movs	r4, #0
 800645c:	4625      	mov	r5, r4
 800645e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006460:	43db      	mvns	r3, r3
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	4656      	mov	r6, sl
 8006466:	2700      	movs	r7, #0
 8006468:	4621      	mov	r1, r4
 800646a:	4658      	mov	r0, fp
 800646c:	f000 fbb4 	bl	8006bd8 <_Bfree>
 8006470:	2d00      	cmp	r5, #0
 8006472:	d0dc      	beq.n	800642e <_dtoa_r+0x65e>
 8006474:	b12f      	cbz	r7, 8006482 <_dtoa_r+0x6b2>
 8006476:	42af      	cmp	r7, r5
 8006478:	d003      	beq.n	8006482 <_dtoa_r+0x6b2>
 800647a:	4639      	mov	r1, r7
 800647c:	4658      	mov	r0, fp
 800647e:	f000 fbab 	bl	8006bd8 <_Bfree>
 8006482:	4629      	mov	r1, r5
 8006484:	4658      	mov	r0, fp
 8006486:	f000 fba7 	bl	8006bd8 <_Bfree>
 800648a:	e7d0      	b.n	800642e <_dtoa_r+0x65e>
 800648c:	9704      	str	r7, [sp, #16]
 800648e:	4633      	mov	r3, r6
 8006490:	461e      	mov	r6, r3
 8006492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006496:	2a39      	cmp	r2, #57	@ 0x39
 8006498:	d107      	bne.n	80064aa <_dtoa_r+0x6da>
 800649a:	459a      	cmp	sl, r3
 800649c:	d1f8      	bne.n	8006490 <_dtoa_r+0x6c0>
 800649e:	9a04      	ldr	r2, [sp, #16]
 80064a0:	3201      	adds	r2, #1
 80064a2:	9204      	str	r2, [sp, #16]
 80064a4:	2230      	movs	r2, #48	@ 0x30
 80064a6:	f88a 2000 	strb.w	r2, [sl]
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	3201      	adds	r2, #1
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	e7bd      	b.n	800642e <_dtoa_r+0x65e>
 80064b2:	4b7b      	ldr	r3, [pc, #492]	@ (80066a0 <_dtoa_r+0x8d0>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	f7fa f8bf 	bl	8000638 <__aeabi_dmul>
 80064ba:	2200      	movs	r2, #0
 80064bc:	2300      	movs	r3, #0
 80064be:	4604      	mov	r4, r0
 80064c0:	460d      	mov	r5, r1
 80064c2:	f7fa fb21 	bl	8000b08 <__aeabi_dcmpeq>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f43f aebb 	beq.w	8006242 <_dtoa_r+0x472>
 80064cc:	e6f0      	b.n	80062b0 <_dtoa_r+0x4e0>
 80064ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	f000 80db 	beq.w	800668c <_dtoa_r+0x8bc>
 80064d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064d8:	2a01      	cmp	r2, #1
 80064da:	f300 80bf 	bgt.w	800665c <_dtoa_r+0x88c>
 80064de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	f000 80b7 	beq.w	8006654 <_dtoa_r+0x884>
 80064e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064ec:	4646      	mov	r6, r8
 80064ee:	9a08      	ldr	r2, [sp, #32]
 80064f0:	2101      	movs	r1, #1
 80064f2:	441a      	add	r2, r3
 80064f4:	4658      	mov	r0, fp
 80064f6:	4498      	add	r8, r3
 80064f8:	9208      	str	r2, [sp, #32]
 80064fa:	f000 fc21 	bl	8006d40 <__i2b>
 80064fe:	4605      	mov	r5, r0
 8006500:	b15e      	cbz	r6, 800651a <_dtoa_r+0x74a>
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	2b00      	cmp	r3, #0
 8006506:	dd08      	ble.n	800651a <_dtoa_r+0x74a>
 8006508:	42b3      	cmp	r3, r6
 800650a:	9a08      	ldr	r2, [sp, #32]
 800650c:	bfa8      	it	ge
 800650e:	4633      	movge	r3, r6
 8006510:	eba8 0803 	sub.w	r8, r8, r3
 8006514:	1af6      	subs	r6, r6, r3
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	9308      	str	r3, [sp, #32]
 800651a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800651c:	b1f3      	cbz	r3, 800655c <_dtoa_r+0x78c>
 800651e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80b7 	beq.w	8006694 <_dtoa_r+0x8c4>
 8006526:	b18c      	cbz	r4, 800654c <_dtoa_r+0x77c>
 8006528:	4629      	mov	r1, r5
 800652a:	4622      	mov	r2, r4
 800652c:	4658      	mov	r0, fp
 800652e:	f000 fcc7 	bl	8006ec0 <__pow5mult>
 8006532:	464a      	mov	r2, r9
 8006534:	4601      	mov	r1, r0
 8006536:	4605      	mov	r5, r0
 8006538:	4658      	mov	r0, fp
 800653a:	f000 fc17 	bl	8006d6c <__multiply>
 800653e:	4649      	mov	r1, r9
 8006540:	9004      	str	r0, [sp, #16]
 8006542:	4658      	mov	r0, fp
 8006544:	f000 fb48 	bl	8006bd8 <_Bfree>
 8006548:	9b04      	ldr	r3, [sp, #16]
 800654a:	4699      	mov	r9, r3
 800654c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800654e:	1b1a      	subs	r2, r3, r4
 8006550:	d004      	beq.n	800655c <_dtoa_r+0x78c>
 8006552:	4649      	mov	r1, r9
 8006554:	4658      	mov	r0, fp
 8006556:	f000 fcb3 	bl	8006ec0 <__pow5mult>
 800655a:	4681      	mov	r9, r0
 800655c:	2101      	movs	r1, #1
 800655e:	4658      	mov	r0, fp
 8006560:	f000 fbee 	bl	8006d40 <__i2b>
 8006564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006566:	4604      	mov	r4, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 81cf 	beq.w	800690c <_dtoa_r+0xb3c>
 800656e:	461a      	mov	r2, r3
 8006570:	4601      	mov	r1, r0
 8006572:	4658      	mov	r0, fp
 8006574:	f000 fca4 	bl	8006ec0 <__pow5mult>
 8006578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657a:	2b01      	cmp	r3, #1
 800657c:	4604      	mov	r4, r0
 800657e:	f300 8095 	bgt.w	80066ac <_dtoa_r+0x8dc>
 8006582:	9b02      	ldr	r3, [sp, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 8087 	bne.w	8006698 <_dtoa_r+0x8c8>
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006590:	2b00      	cmp	r3, #0
 8006592:	f040 8089 	bne.w	80066a8 <_dtoa_r+0x8d8>
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800659c:	0d1b      	lsrs	r3, r3, #20
 800659e:	051b      	lsls	r3, r3, #20
 80065a0:	b12b      	cbz	r3, 80065ae <_dtoa_r+0x7de>
 80065a2:	9b08      	ldr	r3, [sp, #32]
 80065a4:	3301      	adds	r3, #1
 80065a6:	9308      	str	r3, [sp, #32]
 80065a8:	f108 0801 	add.w	r8, r8, #1
 80065ac:	2301      	movs	r3, #1
 80065ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80065b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 81b0 	beq.w	8006918 <_dtoa_r+0xb48>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065be:	6918      	ldr	r0, [r3, #16]
 80065c0:	f000 fb72 	bl	8006ca8 <__hi0bits>
 80065c4:	f1c0 0020 	rsb	r0, r0, #32
 80065c8:	9b08      	ldr	r3, [sp, #32]
 80065ca:	4418      	add	r0, r3
 80065cc:	f010 001f 	ands.w	r0, r0, #31
 80065d0:	d077      	beq.n	80066c2 <_dtoa_r+0x8f2>
 80065d2:	f1c0 0320 	rsb	r3, r0, #32
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	dd6b      	ble.n	80066b2 <_dtoa_r+0x8e2>
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	f1c0 001c 	rsb	r0, r0, #28
 80065e0:	4403      	add	r3, r0
 80065e2:	4480      	add	r8, r0
 80065e4:	4406      	add	r6, r0
 80065e6:	9308      	str	r3, [sp, #32]
 80065e8:	f1b8 0f00 	cmp.w	r8, #0
 80065ec:	dd05      	ble.n	80065fa <_dtoa_r+0x82a>
 80065ee:	4649      	mov	r1, r9
 80065f0:	4642      	mov	r2, r8
 80065f2:	4658      	mov	r0, fp
 80065f4:	f000 fcbe 	bl	8006f74 <__lshift>
 80065f8:	4681      	mov	r9, r0
 80065fa:	9b08      	ldr	r3, [sp, #32]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	dd05      	ble.n	800660c <_dtoa_r+0x83c>
 8006600:	4621      	mov	r1, r4
 8006602:	461a      	mov	r2, r3
 8006604:	4658      	mov	r0, fp
 8006606:	f000 fcb5 	bl	8006f74 <__lshift>
 800660a:	4604      	mov	r4, r0
 800660c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800660e:	2b00      	cmp	r3, #0
 8006610:	d059      	beq.n	80066c6 <_dtoa_r+0x8f6>
 8006612:	4621      	mov	r1, r4
 8006614:	4648      	mov	r0, r9
 8006616:	f000 fd19 	bl	800704c <__mcmp>
 800661a:	2800      	cmp	r0, #0
 800661c:	da53      	bge.n	80066c6 <_dtoa_r+0x8f6>
 800661e:	1e7b      	subs	r3, r7, #1
 8006620:	9304      	str	r3, [sp, #16]
 8006622:	4649      	mov	r1, r9
 8006624:	2300      	movs	r3, #0
 8006626:	220a      	movs	r2, #10
 8006628:	4658      	mov	r0, fp
 800662a:	f000 faf7 	bl	8006c1c <__multadd>
 800662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006630:	4681      	mov	r9, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8172 	beq.w	800691c <_dtoa_r+0xb4c>
 8006638:	2300      	movs	r3, #0
 800663a:	4629      	mov	r1, r5
 800663c:	220a      	movs	r2, #10
 800663e:	4658      	mov	r0, fp
 8006640:	f000 faec 	bl	8006c1c <__multadd>
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	4605      	mov	r5, r0
 800664a:	dc67      	bgt.n	800671c <_dtoa_r+0x94c>
 800664c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664e:	2b02      	cmp	r3, #2
 8006650:	dc41      	bgt.n	80066d6 <_dtoa_r+0x906>
 8006652:	e063      	b.n	800671c <_dtoa_r+0x94c>
 8006654:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006656:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800665a:	e746      	b.n	80064ea <_dtoa_r+0x71a>
 800665c:	9b07      	ldr	r3, [sp, #28]
 800665e:	1e5c      	subs	r4, r3, #1
 8006660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006662:	42a3      	cmp	r3, r4
 8006664:	bfbf      	itttt	lt
 8006666:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006668:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800666a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800666c:	1ae3      	sublt	r3, r4, r3
 800666e:	bfb4      	ite	lt
 8006670:	18d2      	addlt	r2, r2, r3
 8006672:	1b1c      	subge	r4, r3, r4
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	bfbc      	itt	lt
 8006678:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800667a:	2400      	movlt	r4, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	bfb5      	itete	lt
 8006680:	eba8 0603 	sublt.w	r6, r8, r3
 8006684:	9b07      	ldrge	r3, [sp, #28]
 8006686:	2300      	movlt	r3, #0
 8006688:	4646      	movge	r6, r8
 800668a:	e730      	b.n	80064ee <_dtoa_r+0x71e>
 800668c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800668e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006690:	4646      	mov	r6, r8
 8006692:	e735      	b.n	8006500 <_dtoa_r+0x730>
 8006694:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006696:	e75c      	b.n	8006552 <_dtoa_r+0x782>
 8006698:	2300      	movs	r3, #0
 800669a:	e788      	b.n	80065ae <_dtoa_r+0x7de>
 800669c:	3fe00000 	.word	0x3fe00000
 80066a0:	40240000 	.word	0x40240000
 80066a4:	40140000 	.word	0x40140000
 80066a8:	9b02      	ldr	r3, [sp, #8]
 80066aa:	e780      	b.n	80065ae <_dtoa_r+0x7de>
 80066ac:	2300      	movs	r3, #0
 80066ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b0:	e782      	b.n	80065b8 <_dtoa_r+0x7e8>
 80066b2:	d099      	beq.n	80065e8 <_dtoa_r+0x818>
 80066b4:	9a08      	ldr	r2, [sp, #32]
 80066b6:	331c      	adds	r3, #28
 80066b8:	441a      	add	r2, r3
 80066ba:	4498      	add	r8, r3
 80066bc:	441e      	add	r6, r3
 80066be:	9208      	str	r2, [sp, #32]
 80066c0:	e792      	b.n	80065e8 <_dtoa_r+0x818>
 80066c2:	4603      	mov	r3, r0
 80066c4:	e7f6      	b.n	80066b4 <_dtoa_r+0x8e4>
 80066c6:	9b07      	ldr	r3, [sp, #28]
 80066c8:	9704      	str	r7, [sp, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dc20      	bgt.n	8006710 <_dtoa_r+0x940>
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	dd1e      	ble.n	8006714 <_dtoa_r+0x944>
 80066d6:	9b00      	ldr	r3, [sp, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f47f aec0 	bne.w	800645e <_dtoa_r+0x68e>
 80066de:	4621      	mov	r1, r4
 80066e0:	2205      	movs	r2, #5
 80066e2:	4658      	mov	r0, fp
 80066e4:	f000 fa9a 	bl	8006c1c <__multadd>
 80066e8:	4601      	mov	r1, r0
 80066ea:	4604      	mov	r4, r0
 80066ec:	4648      	mov	r0, r9
 80066ee:	f000 fcad 	bl	800704c <__mcmp>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	f77f aeb3 	ble.w	800645e <_dtoa_r+0x68e>
 80066f8:	4656      	mov	r6, sl
 80066fa:	2331      	movs	r3, #49	@ 0x31
 80066fc:	f806 3b01 	strb.w	r3, [r6], #1
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	3301      	adds	r3, #1
 8006704:	9304      	str	r3, [sp, #16]
 8006706:	e6ae      	b.n	8006466 <_dtoa_r+0x696>
 8006708:	9c07      	ldr	r4, [sp, #28]
 800670a:	9704      	str	r7, [sp, #16]
 800670c:	4625      	mov	r5, r4
 800670e:	e7f3      	b.n	80066f8 <_dtoa_r+0x928>
 8006710:	9b07      	ldr	r3, [sp, #28]
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8104 	beq.w	8006924 <_dtoa_r+0xb54>
 800671c:	2e00      	cmp	r6, #0
 800671e:	dd05      	ble.n	800672c <_dtoa_r+0x95c>
 8006720:	4629      	mov	r1, r5
 8006722:	4632      	mov	r2, r6
 8006724:	4658      	mov	r0, fp
 8006726:	f000 fc25 	bl	8006f74 <__lshift>
 800672a:	4605      	mov	r5, r0
 800672c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d05a      	beq.n	80067e8 <_dtoa_r+0xa18>
 8006732:	6869      	ldr	r1, [r5, #4]
 8006734:	4658      	mov	r0, fp
 8006736:	f000 fa0f 	bl	8006b58 <_Balloc>
 800673a:	4606      	mov	r6, r0
 800673c:	b928      	cbnz	r0, 800674a <_dtoa_r+0x97a>
 800673e:	4b84      	ldr	r3, [pc, #528]	@ (8006950 <_dtoa_r+0xb80>)
 8006740:	4602      	mov	r2, r0
 8006742:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006746:	f7ff bb5a 	b.w	8005dfe <_dtoa_r+0x2e>
 800674a:	692a      	ldr	r2, [r5, #16]
 800674c:	3202      	adds	r2, #2
 800674e:	0092      	lsls	r2, r2, #2
 8006750:	f105 010c 	add.w	r1, r5, #12
 8006754:	300c      	adds	r0, #12
 8006756:	f000 ffaf 	bl	80076b8 <memcpy>
 800675a:	2201      	movs	r2, #1
 800675c:	4631      	mov	r1, r6
 800675e:	4658      	mov	r0, fp
 8006760:	f000 fc08 	bl	8006f74 <__lshift>
 8006764:	f10a 0301 	add.w	r3, sl, #1
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	9b00      	ldr	r3, [sp, #0]
 800676c:	4453      	add	r3, sl
 800676e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	462f      	mov	r7, r5
 8006778:	930a      	str	r3, [sp, #40]	@ 0x28
 800677a:	4605      	mov	r5, r0
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	4621      	mov	r1, r4
 8006780:	3b01      	subs	r3, #1
 8006782:	4648      	mov	r0, r9
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	f7ff fa9a 	bl	8005cbe <quorem>
 800678a:	4639      	mov	r1, r7
 800678c:	9002      	str	r0, [sp, #8]
 800678e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006792:	4648      	mov	r0, r9
 8006794:	f000 fc5a 	bl	800704c <__mcmp>
 8006798:	462a      	mov	r2, r5
 800679a:	9008      	str	r0, [sp, #32]
 800679c:	4621      	mov	r1, r4
 800679e:	4658      	mov	r0, fp
 80067a0:	f000 fc70 	bl	8007084 <__mdiff>
 80067a4:	68c2      	ldr	r2, [r0, #12]
 80067a6:	4606      	mov	r6, r0
 80067a8:	bb02      	cbnz	r2, 80067ec <_dtoa_r+0xa1c>
 80067aa:	4601      	mov	r1, r0
 80067ac:	4648      	mov	r0, r9
 80067ae:	f000 fc4d 	bl	800704c <__mcmp>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4631      	mov	r1, r6
 80067b6:	4658      	mov	r0, fp
 80067b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80067ba:	f000 fa0d 	bl	8006bd8 <_Bfree>
 80067be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067c2:	9e07      	ldr	r6, [sp, #28]
 80067c4:	ea43 0102 	orr.w	r1, r3, r2
 80067c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ca:	4319      	orrs	r1, r3
 80067cc:	d110      	bne.n	80067f0 <_dtoa_r+0xa20>
 80067ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067d2:	d029      	beq.n	8006828 <_dtoa_r+0xa58>
 80067d4:	9b08      	ldr	r3, [sp, #32]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dd02      	ble.n	80067e0 <_dtoa_r+0xa10>
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067e0:	9b00      	ldr	r3, [sp, #0]
 80067e2:	f883 8000 	strb.w	r8, [r3]
 80067e6:	e63f      	b.n	8006468 <_dtoa_r+0x698>
 80067e8:	4628      	mov	r0, r5
 80067ea:	e7bb      	b.n	8006764 <_dtoa_r+0x994>
 80067ec:	2201      	movs	r2, #1
 80067ee:	e7e1      	b.n	80067b4 <_dtoa_r+0x9e4>
 80067f0:	9b08      	ldr	r3, [sp, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	db04      	blt.n	8006800 <_dtoa_r+0xa30>
 80067f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067f8:	430b      	orrs	r3, r1
 80067fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067fc:	430b      	orrs	r3, r1
 80067fe:	d120      	bne.n	8006842 <_dtoa_r+0xa72>
 8006800:	2a00      	cmp	r2, #0
 8006802:	dded      	ble.n	80067e0 <_dtoa_r+0xa10>
 8006804:	4649      	mov	r1, r9
 8006806:	2201      	movs	r2, #1
 8006808:	4658      	mov	r0, fp
 800680a:	f000 fbb3 	bl	8006f74 <__lshift>
 800680e:	4621      	mov	r1, r4
 8006810:	4681      	mov	r9, r0
 8006812:	f000 fc1b 	bl	800704c <__mcmp>
 8006816:	2800      	cmp	r0, #0
 8006818:	dc03      	bgt.n	8006822 <_dtoa_r+0xa52>
 800681a:	d1e1      	bne.n	80067e0 <_dtoa_r+0xa10>
 800681c:	f018 0f01 	tst.w	r8, #1
 8006820:	d0de      	beq.n	80067e0 <_dtoa_r+0xa10>
 8006822:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006826:	d1d8      	bne.n	80067da <_dtoa_r+0xa0a>
 8006828:	9a00      	ldr	r2, [sp, #0]
 800682a:	2339      	movs	r3, #57	@ 0x39
 800682c:	7013      	strb	r3, [r2, #0]
 800682e:	4633      	mov	r3, r6
 8006830:	461e      	mov	r6, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006838:	2a39      	cmp	r2, #57	@ 0x39
 800683a:	d052      	beq.n	80068e2 <_dtoa_r+0xb12>
 800683c:	3201      	adds	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	e612      	b.n	8006468 <_dtoa_r+0x698>
 8006842:	2a00      	cmp	r2, #0
 8006844:	dd07      	ble.n	8006856 <_dtoa_r+0xa86>
 8006846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800684a:	d0ed      	beq.n	8006828 <_dtoa_r+0xa58>
 800684c:	9a00      	ldr	r2, [sp, #0]
 800684e:	f108 0301 	add.w	r3, r8, #1
 8006852:	7013      	strb	r3, [r2, #0]
 8006854:	e608      	b.n	8006468 <_dtoa_r+0x698>
 8006856:	9b07      	ldr	r3, [sp, #28]
 8006858:	9a07      	ldr	r2, [sp, #28]
 800685a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800685e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006860:	4293      	cmp	r3, r2
 8006862:	d028      	beq.n	80068b6 <_dtoa_r+0xae6>
 8006864:	4649      	mov	r1, r9
 8006866:	2300      	movs	r3, #0
 8006868:	220a      	movs	r2, #10
 800686a:	4658      	mov	r0, fp
 800686c:	f000 f9d6 	bl	8006c1c <__multadd>
 8006870:	42af      	cmp	r7, r5
 8006872:	4681      	mov	r9, r0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	f04f 020a 	mov.w	r2, #10
 800687c:	4639      	mov	r1, r7
 800687e:	4658      	mov	r0, fp
 8006880:	d107      	bne.n	8006892 <_dtoa_r+0xac2>
 8006882:	f000 f9cb 	bl	8006c1c <__multadd>
 8006886:	4607      	mov	r7, r0
 8006888:	4605      	mov	r5, r0
 800688a:	9b07      	ldr	r3, [sp, #28]
 800688c:	3301      	adds	r3, #1
 800688e:	9307      	str	r3, [sp, #28]
 8006890:	e774      	b.n	800677c <_dtoa_r+0x9ac>
 8006892:	f000 f9c3 	bl	8006c1c <__multadd>
 8006896:	4629      	mov	r1, r5
 8006898:	4607      	mov	r7, r0
 800689a:	2300      	movs	r3, #0
 800689c:	220a      	movs	r2, #10
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 f9bc 	bl	8006c1c <__multadd>
 80068a4:	4605      	mov	r5, r0
 80068a6:	e7f0      	b.n	800688a <_dtoa_r+0xaba>
 80068a8:	9b00      	ldr	r3, [sp, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bfcc      	ite	gt
 80068ae:	461e      	movgt	r6, r3
 80068b0:	2601      	movle	r6, #1
 80068b2:	4456      	add	r6, sl
 80068b4:	2700      	movs	r7, #0
 80068b6:	4649      	mov	r1, r9
 80068b8:	2201      	movs	r2, #1
 80068ba:	4658      	mov	r0, fp
 80068bc:	f000 fb5a 	bl	8006f74 <__lshift>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4681      	mov	r9, r0
 80068c4:	f000 fbc2 	bl	800704c <__mcmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	dcb0      	bgt.n	800682e <_dtoa_r+0xa5e>
 80068cc:	d102      	bne.n	80068d4 <_dtoa_r+0xb04>
 80068ce:	f018 0f01 	tst.w	r8, #1
 80068d2:	d1ac      	bne.n	800682e <_dtoa_r+0xa5e>
 80068d4:	4633      	mov	r3, r6
 80068d6:	461e      	mov	r6, r3
 80068d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068dc:	2a30      	cmp	r2, #48	@ 0x30
 80068de:	d0fa      	beq.n	80068d6 <_dtoa_r+0xb06>
 80068e0:	e5c2      	b.n	8006468 <_dtoa_r+0x698>
 80068e2:	459a      	cmp	sl, r3
 80068e4:	d1a4      	bne.n	8006830 <_dtoa_r+0xa60>
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	3301      	adds	r3, #1
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	2331      	movs	r3, #49	@ 0x31
 80068ee:	f88a 3000 	strb.w	r3, [sl]
 80068f2:	e5b9      	b.n	8006468 <_dtoa_r+0x698>
 80068f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006954 <_dtoa_r+0xb84>
 80068fa:	b11b      	cbz	r3, 8006904 <_dtoa_r+0xb34>
 80068fc:	f10a 0308 	add.w	r3, sl, #8
 8006900:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	4650      	mov	r0, sl
 8006906:	b019      	add	sp, #100	@ 0x64
 8006908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690e:	2b01      	cmp	r3, #1
 8006910:	f77f ae37 	ble.w	8006582 <_dtoa_r+0x7b2>
 8006914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006916:	930a      	str	r3, [sp, #40]	@ 0x28
 8006918:	2001      	movs	r0, #1
 800691a:	e655      	b.n	80065c8 <_dtoa_r+0x7f8>
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f77f aed6 	ble.w	80066d0 <_dtoa_r+0x900>
 8006924:	4656      	mov	r6, sl
 8006926:	4621      	mov	r1, r4
 8006928:	4648      	mov	r0, r9
 800692a:	f7ff f9c8 	bl	8005cbe <quorem>
 800692e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006932:	f806 8b01 	strb.w	r8, [r6], #1
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	eba6 020a 	sub.w	r2, r6, sl
 800693c:	4293      	cmp	r3, r2
 800693e:	ddb3      	ble.n	80068a8 <_dtoa_r+0xad8>
 8006940:	4649      	mov	r1, r9
 8006942:	2300      	movs	r3, #0
 8006944:	220a      	movs	r2, #10
 8006946:	4658      	mov	r0, fp
 8006948:	f000 f968 	bl	8006c1c <__multadd>
 800694c:	4681      	mov	r9, r0
 800694e:	e7ea      	b.n	8006926 <_dtoa_r+0xb56>
 8006950:	08008ba0 	.word	0x08008ba0
 8006954:	08008b24 	.word	0x08008b24

08006958 <_free_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4605      	mov	r5, r0
 800695c:	2900      	cmp	r1, #0
 800695e:	d041      	beq.n	80069e4 <_free_r+0x8c>
 8006960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006964:	1f0c      	subs	r4, r1, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	bfb8      	it	lt
 800696a:	18e4      	addlt	r4, r4, r3
 800696c:	f000 f8e8 	bl	8006b40 <__malloc_lock>
 8006970:	4a1d      	ldr	r2, [pc, #116]	@ (80069e8 <_free_r+0x90>)
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	b933      	cbnz	r3, 8006984 <_free_r+0x2c>
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	6014      	str	r4, [r2, #0]
 800697a:	4628      	mov	r0, r5
 800697c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006980:	f000 b8e4 	b.w	8006b4c <__malloc_unlock>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d908      	bls.n	800699a <_free_r+0x42>
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	1821      	adds	r1, r4, r0
 800698c:	428b      	cmp	r3, r1
 800698e:	bf01      	itttt	eq
 8006990:	6819      	ldreq	r1, [r3, #0]
 8006992:	685b      	ldreq	r3, [r3, #4]
 8006994:	1809      	addeq	r1, r1, r0
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	e7ed      	b.n	8006976 <_free_r+0x1e>
 800699a:	461a      	mov	r2, r3
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	b10b      	cbz	r3, 80069a4 <_free_r+0x4c>
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d9fa      	bls.n	800699a <_free_r+0x42>
 80069a4:	6811      	ldr	r1, [r2, #0]
 80069a6:	1850      	adds	r0, r2, r1
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d10b      	bne.n	80069c4 <_free_r+0x6c>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	4401      	add	r1, r0
 80069b0:	1850      	adds	r0, r2, r1
 80069b2:	4283      	cmp	r3, r0
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	d1e0      	bne.n	800697a <_free_r+0x22>
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	6053      	str	r3, [r2, #4]
 80069be:	4408      	add	r0, r1
 80069c0:	6010      	str	r0, [r2, #0]
 80069c2:	e7da      	b.n	800697a <_free_r+0x22>
 80069c4:	d902      	bls.n	80069cc <_free_r+0x74>
 80069c6:	230c      	movs	r3, #12
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	e7d6      	b.n	800697a <_free_r+0x22>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	1821      	adds	r1, r4, r0
 80069d0:	428b      	cmp	r3, r1
 80069d2:	bf04      	itt	eq
 80069d4:	6819      	ldreq	r1, [r3, #0]
 80069d6:	685b      	ldreq	r3, [r3, #4]
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	bf04      	itt	eq
 80069dc:	1809      	addeq	r1, r1, r0
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	6054      	str	r4, [r2, #4]
 80069e2:	e7ca      	b.n	800697a <_free_r+0x22>
 80069e4:	bd38      	pop	{r3, r4, r5, pc}
 80069e6:	bf00      	nop
 80069e8:	20000894 	.word	0x20000894

080069ec <malloc>:
 80069ec:	4b02      	ldr	r3, [pc, #8]	@ (80069f8 <malloc+0xc>)
 80069ee:	4601      	mov	r1, r0
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f000 b825 	b.w	8006a40 <_malloc_r>
 80069f6:	bf00      	nop
 80069f8:	20000020 	.word	0x20000020

080069fc <sbrk_aligned>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4e0f      	ldr	r6, [pc, #60]	@ (8006a3c <sbrk_aligned+0x40>)
 8006a00:	460c      	mov	r4, r1
 8006a02:	6831      	ldr	r1, [r6, #0]
 8006a04:	4605      	mov	r5, r0
 8006a06:	b911      	cbnz	r1, 8006a0e <sbrk_aligned+0x12>
 8006a08:	f000 fe46 	bl	8007698 <_sbrk_r>
 8006a0c:	6030      	str	r0, [r6, #0]
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 fe41 	bl	8007698 <_sbrk_r>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d103      	bne.n	8006a22 <sbrk_aligned+0x26>
 8006a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a1e:	4620      	mov	r0, r4
 8006a20:	bd70      	pop	{r4, r5, r6, pc}
 8006a22:	1cc4      	adds	r4, r0, #3
 8006a24:	f024 0403 	bic.w	r4, r4, #3
 8006a28:	42a0      	cmp	r0, r4
 8006a2a:	d0f8      	beq.n	8006a1e <sbrk_aligned+0x22>
 8006a2c:	1a21      	subs	r1, r4, r0
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 fe32 	bl	8007698 <_sbrk_r>
 8006a34:	3001      	adds	r0, #1
 8006a36:	d1f2      	bne.n	8006a1e <sbrk_aligned+0x22>
 8006a38:	e7ef      	b.n	8006a1a <sbrk_aligned+0x1e>
 8006a3a:	bf00      	nop
 8006a3c:	20000890 	.word	0x20000890

08006a40 <_malloc_r>:
 8006a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a44:	1ccd      	adds	r5, r1, #3
 8006a46:	f025 0503 	bic.w	r5, r5, #3
 8006a4a:	3508      	adds	r5, #8
 8006a4c:	2d0c      	cmp	r5, #12
 8006a4e:	bf38      	it	cc
 8006a50:	250c      	movcc	r5, #12
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	4606      	mov	r6, r0
 8006a56:	db01      	blt.n	8006a5c <_malloc_r+0x1c>
 8006a58:	42a9      	cmp	r1, r5
 8006a5a:	d904      	bls.n	8006a66 <_malloc_r+0x26>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	2000      	movs	r0, #0
 8006a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b3c <_malloc_r+0xfc>
 8006a6a:	f000 f869 	bl	8006b40 <__malloc_lock>
 8006a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a72:	461c      	mov	r4, r3
 8006a74:	bb44      	cbnz	r4, 8006ac8 <_malloc_r+0x88>
 8006a76:	4629      	mov	r1, r5
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff ffbf 	bl	80069fc <sbrk_aligned>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	4604      	mov	r4, r0
 8006a82:	d158      	bne.n	8006b36 <_malloc_r+0xf6>
 8006a84:	f8d8 4000 	ldr.w	r4, [r8]
 8006a88:	4627      	mov	r7, r4
 8006a8a:	2f00      	cmp	r7, #0
 8006a8c:	d143      	bne.n	8006b16 <_malloc_r+0xd6>
 8006a8e:	2c00      	cmp	r4, #0
 8006a90:	d04b      	beq.n	8006b2a <_malloc_r+0xea>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	4639      	mov	r1, r7
 8006a96:	4630      	mov	r0, r6
 8006a98:	eb04 0903 	add.w	r9, r4, r3
 8006a9c:	f000 fdfc 	bl	8007698 <_sbrk_r>
 8006aa0:	4581      	cmp	r9, r0
 8006aa2:	d142      	bne.n	8006b2a <_malloc_r+0xea>
 8006aa4:	6821      	ldr	r1, [r4, #0]
 8006aa6:	1a6d      	subs	r5, r5, r1
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff ffa6 	bl	80069fc <sbrk_aligned>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d03a      	beq.n	8006b2a <_malloc_r+0xea>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	442b      	add	r3, r5
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	f8d8 3000 	ldr.w	r3, [r8]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	bb62      	cbnz	r2, 8006b1c <_malloc_r+0xdc>
 8006ac2:	f8c8 7000 	str.w	r7, [r8]
 8006ac6:	e00f      	b.n	8006ae8 <_malloc_r+0xa8>
 8006ac8:	6822      	ldr	r2, [r4, #0]
 8006aca:	1b52      	subs	r2, r2, r5
 8006acc:	d420      	bmi.n	8006b10 <_malloc_r+0xd0>
 8006ace:	2a0b      	cmp	r2, #11
 8006ad0:	d917      	bls.n	8006b02 <_malloc_r+0xc2>
 8006ad2:	1961      	adds	r1, r4, r5
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	6025      	str	r5, [r4, #0]
 8006ad8:	bf18      	it	ne
 8006ada:	6059      	strne	r1, [r3, #4]
 8006adc:	6863      	ldr	r3, [r4, #4]
 8006ade:	bf08      	it	eq
 8006ae0:	f8c8 1000 	streq.w	r1, [r8]
 8006ae4:	5162      	str	r2, [r4, r5]
 8006ae6:	604b      	str	r3, [r1, #4]
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f000 f82f 	bl	8006b4c <__malloc_unlock>
 8006aee:	f104 000b 	add.w	r0, r4, #11
 8006af2:	1d23      	adds	r3, r4, #4
 8006af4:	f020 0007 	bic.w	r0, r0, #7
 8006af8:	1ac2      	subs	r2, r0, r3
 8006afa:	bf1c      	itt	ne
 8006afc:	1a1b      	subne	r3, r3, r0
 8006afe:	50a3      	strne	r3, [r4, r2]
 8006b00:	e7af      	b.n	8006a62 <_malloc_r+0x22>
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	bf0c      	ite	eq
 8006b08:	f8c8 2000 	streq.w	r2, [r8]
 8006b0c:	605a      	strne	r2, [r3, #4]
 8006b0e:	e7eb      	b.n	8006ae8 <_malloc_r+0xa8>
 8006b10:	4623      	mov	r3, r4
 8006b12:	6864      	ldr	r4, [r4, #4]
 8006b14:	e7ae      	b.n	8006a74 <_malloc_r+0x34>
 8006b16:	463c      	mov	r4, r7
 8006b18:	687f      	ldr	r7, [r7, #4]
 8006b1a:	e7b6      	b.n	8006a8a <_malloc_r+0x4a>
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d1fb      	bne.n	8006b1c <_malloc_r+0xdc>
 8006b24:	2300      	movs	r3, #0
 8006b26:	6053      	str	r3, [r2, #4]
 8006b28:	e7de      	b.n	8006ae8 <_malloc_r+0xa8>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f000 f80c 	bl	8006b4c <__malloc_unlock>
 8006b34:	e794      	b.n	8006a60 <_malloc_r+0x20>
 8006b36:	6005      	str	r5, [r0, #0]
 8006b38:	e7d6      	b.n	8006ae8 <_malloc_r+0xa8>
 8006b3a:	bf00      	nop
 8006b3c:	20000894 	.word	0x20000894

08006b40 <__malloc_lock>:
 8006b40:	4801      	ldr	r0, [pc, #4]	@ (8006b48 <__malloc_lock+0x8>)
 8006b42:	f7ff b8ba 	b.w	8005cba <__retarget_lock_acquire_recursive>
 8006b46:	bf00      	nop
 8006b48:	2000088c 	.word	0x2000088c

08006b4c <__malloc_unlock>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	@ (8006b54 <__malloc_unlock+0x8>)
 8006b4e:	f7ff b8b5 	b.w	8005cbc <__retarget_lock_release_recursive>
 8006b52:	bf00      	nop
 8006b54:	2000088c 	.word	0x2000088c

08006b58 <_Balloc>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	69c6      	ldr	r6, [r0, #28]
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	460d      	mov	r5, r1
 8006b60:	b976      	cbnz	r6, 8006b80 <_Balloc+0x28>
 8006b62:	2010      	movs	r0, #16
 8006b64:	f7ff ff42 	bl	80069ec <malloc>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	61e0      	str	r0, [r4, #28]
 8006b6c:	b920      	cbnz	r0, 8006b78 <_Balloc+0x20>
 8006b6e:	4b18      	ldr	r3, [pc, #96]	@ (8006bd0 <_Balloc+0x78>)
 8006b70:	4818      	ldr	r0, [pc, #96]	@ (8006bd4 <_Balloc+0x7c>)
 8006b72:	216b      	movs	r1, #107	@ 0x6b
 8006b74:	f000 fdae 	bl	80076d4 <__assert_func>
 8006b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b7c:	6006      	str	r6, [r0, #0]
 8006b7e:	60c6      	str	r6, [r0, #12]
 8006b80:	69e6      	ldr	r6, [r4, #28]
 8006b82:	68f3      	ldr	r3, [r6, #12]
 8006b84:	b183      	cbz	r3, 8006ba8 <_Balloc+0x50>
 8006b86:	69e3      	ldr	r3, [r4, #28]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b8e:	b9b8      	cbnz	r0, 8006bc0 <_Balloc+0x68>
 8006b90:	2101      	movs	r1, #1
 8006b92:	fa01 f605 	lsl.w	r6, r1, r5
 8006b96:	1d72      	adds	r2, r6, #5
 8006b98:	0092      	lsls	r2, r2, #2
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fdb8 	bl	8007710 <_calloc_r>
 8006ba0:	b160      	cbz	r0, 8006bbc <_Balloc+0x64>
 8006ba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ba6:	e00e      	b.n	8006bc6 <_Balloc+0x6e>
 8006ba8:	2221      	movs	r2, #33	@ 0x21
 8006baa:	2104      	movs	r1, #4
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fdaf 	bl	8007710 <_calloc_r>
 8006bb2:	69e3      	ldr	r3, [r4, #28]
 8006bb4:	60f0      	str	r0, [r6, #12]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e4      	bne.n	8006b86 <_Balloc+0x2e>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	6802      	ldr	r2, [r0, #0]
 8006bc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bcc:	e7f7      	b.n	8006bbe <_Balloc+0x66>
 8006bce:	bf00      	nop
 8006bd0:	08008b31 	.word	0x08008b31
 8006bd4:	08008bb1 	.word	0x08008bb1

08006bd8 <_Bfree>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	69c6      	ldr	r6, [r0, #28]
 8006bdc:	4605      	mov	r5, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	b976      	cbnz	r6, 8006c00 <_Bfree+0x28>
 8006be2:	2010      	movs	r0, #16
 8006be4:	f7ff ff02 	bl	80069ec <malloc>
 8006be8:	4602      	mov	r2, r0
 8006bea:	61e8      	str	r0, [r5, #28]
 8006bec:	b920      	cbnz	r0, 8006bf8 <_Bfree+0x20>
 8006bee:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <_Bfree+0x3c>)
 8006bf0:	4809      	ldr	r0, [pc, #36]	@ (8006c18 <_Bfree+0x40>)
 8006bf2:	218f      	movs	r1, #143	@ 0x8f
 8006bf4:	f000 fd6e 	bl	80076d4 <__assert_func>
 8006bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bfc:	6006      	str	r6, [r0, #0]
 8006bfe:	60c6      	str	r6, [r0, #12]
 8006c00:	b13c      	cbz	r4, 8006c12 <_Bfree+0x3a>
 8006c02:	69eb      	ldr	r3, [r5, #28]
 8006c04:	6862      	ldr	r2, [r4, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c0c:	6021      	str	r1, [r4, #0]
 8006c0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	08008b31 	.word	0x08008b31
 8006c18:	08008bb1 	.word	0x08008bb1

08006c1c <__multadd>:
 8006c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c20:	690d      	ldr	r5, [r1, #16]
 8006c22:	4607      	mov	r7, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	461e      	mov	r6, r3
 8006c28:	f101 0c14 	add.w	ip, r1, #20
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c32:	b299      	uxth	r1, r3
 8006c34:	fb02 6101 	mla	r1, r2, r1, r6
 8006c38:	0c1e      	lsrs	r6, r3, #16
 8006c3a:	0c0b      	lsrs	r3, r1, #16
 8006c3c:	fb02 3306 	mla	r3, r2, r6, r3
 8006c40:	b289      	uxth	r1, r1
 8006c42:	3001      	adds	r0, #1
 8006c44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c48:	4285      	cmp	r5, r0
 8006c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c52:	dcec      	bgt.n	8006c2e <__multadd+0x12>
 8006c54:	b30e      	cbz	r6, 8006c9a <__multadd+0x7e>
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	42ab      	cmp	r3, r5
 8006c5a:	dc19      	bgt.n	8006c90 <__multadd+0x74>
 8006c5c:	6861      	ldr	r1, [r4, #4]
 8006c5e:	4638      	mov	r0, r7
 8006c60:	3101      	adds	r1, #1
 8006c62:	f7ff ff79 	bl	8006b58 <_Balloc>
 8006c66:	4680      	mov	r8, r0
 8006c68:	b928      	cbnz	r0, 8006c76 <__multadd+0x5a>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca0 <__multadd+0x84>)
 8006c6e:	480d      	ldr	r0, [pc, #52]	@ (8006ca4 <__multadd+0x88>)
 8006c70:	21ba      	movs	r1, #186	@ 0xba
 8006c72:	f000 fd2f 	bl	80076d4 <__assert_func>
 8006c76:	6922      	ldr	r2, [r4, #16]
 8006c78:	3202      	adds	r2, #2
 8006c7a:	f104 010c 	add.w	r1, r4, #12
 8006c7e:	0092      	lsls	r2, r2, #2
 8006c80:	300c      	adds	r0, #12
 8006c82:	f000 fd19 	bl	80076b8 <memcpy>
 8006c86:	4621      	mov	r1, r4
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f7ff ffa5 	bl	8006bd8 <_Bfree>
 8006c8e:	4644      	mov	r4, r8
 8006c90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c94:	3501      	adds	r5, #1
 8006c96:	615e      	str	r6, [r3, #20]
 8006c98:	6125      	str	r5, [r4, #16]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca0:	08008ba0 	.word	0x08008ba0
 8006ca4:	08008bb1 	.word	0x08008bb1

08006ca8 <__hi0bits>:
 8006ca8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cac:	4603      	mov	r3, r0
 8006cae:	bf36      	itet	cc
 8006cb0:	0403      	lslcc	r3, r0, #16
 8006cb2:	2000      	movcs	r0, #0
 8006cb4:	2010      	movcc	r0, #16
 8006cb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cba:	bf3c      	itt	cc
 8006cbc:	021b      	lslcc	r3, r3, #8
 8006cbe:	3008      	addcc	r0, #8
 8006cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc4:	bf3c      	itt	cc
 8006cc6:	011b      	lslcc	r3, r3, #4
 8006cc8:	3004      	addcc	r0, #4
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cce:	bf3c      	itt	cc
 8006cd0:	009b      	lslcc	r3, r3, #2
 8006cd2:	3002      	addcc	r0, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	db05      	blt.n	8006ce4 <__hi0bits+0x3c>
 8006cd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cdc:	f100 0001 	add.w	r0, r0, #1
 8006ce0:	bf08      	it	eq
 8006ce2:	2020      	moveq	r0, #32
 8006ce4:	4770      	bx	lr

08006ce6 <__lo0bits>:
 8006ce6:	6803      	ldr	r3, [r0, #0]
 8006ce8:	4602      	mov	r2, r0
 8006cea:	f013 0007 	ands.w	r0, r3, #7
 8006cee:	d00b      	beq.n	8006d08 <__lo0bits+0x22>
 8006cf0:	07d9      	lsls	r1, r3, #31
 8006cf2:	d421      	bmi.n	8006d38 <__lo0bits+0x52>
 8006cf4:	0798      	lsls	r0, r3, #30
 8006cf6:	bf49      	itett	mi
 8006cf8:	085b      	lsrmi	r3, r3, #1
 8006cfa:	089b      	lsrpl	r3, r3, #2
 8006cfc:	2001      	movmi	r0, #1
 8006cfe:	6013      	strmi	r3, [r2, #0]
 8006d00:	bf5c      	itt	pl
 8006d02:	6013      	strpl	r3, [r2, #0]
 8006d04:	2002      	movpl	r0, #2
 8006d06:	4770      	bx	lr
 8006d08:	b299      	uxth	r1, r3
 8006d0a:	b909      	cbnz	r1, 8006d10 <__lo0bits+0x2a>
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	2010      	movs	r0, #16
 8006d10:	b2d9      	uxtb	r1, r3
 8006d12:	b909      	cbnz	r1, 8006d18 <__lo0bits+0x32>
 8006d14:	3008      	adds	r0, #8
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	0719      	lsls	r1, r3, #28
 8006d1a:	bf04      	itt	eq
 8006d1c:	091b      	lsreq	r3, r3, #4
 8006d1e:	3004      	addeq	r0, #4
 8006d20:	0799      	lsls	r1, r3, #30
 8006d22:	bf04      	itt	eq
 8006d24:	089b      	lsreq	r3, r3, #2
 8006d26:	3002      	addeq	r0, #2
 8006d28:	07d9      	lsls	r1, r3, #31
 8006d2a:	d403      	bmi.n	8006d34 <__lo0bits+0x4e>
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	f100 0001 	add.w	r0, r0, #1
 8006d32:	d003      	beq.n	8006d3c <__lo0bits+0x56>
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	4770      	bx	lr
 8006d38:	2000      	movs	r0, #0
 8006d3a:	4770      	bx	lr
 8006d3c:	2020      	movs	r0, #32
 8006d3e:	4770      	bx	lr

08006d40 <__i2b>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	460c      	mov	r4, r1
 8006d44:	2101      	movs	r1, #1
 8006d46:	f7ff ff07 	bl	8006b58 <_Balloc>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	b928      	cbnz	r0, 8006d5a <__i2b+0x1a>
 8006d4e:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <__i2b+0x24>)
 8006d50:	4805      	ldr	r0, [pc, #20]	@ (8006d68 <__i2b+0x28>)
 8006d52:	f240 1145 	movw	r1, #325	@ 0x145
 8006d56:	f000 fcbd 	bl	80076d4 <__assert_func>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	6144      	str	r4, [r0, #20]
 8006d5e:	6103      	str	r3, [r0, #16]
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08008ba0 	.word	0x08008ba0
 8006d68:	08008bb1 	.word	0x08008bb1

08006d6c <__multiply>:
 8006d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	4614      	mov	r4, r2
 8006d72:	690a      	ldr	r2, [r1, #16]
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	bfa8      	it	ge
 8006d7a:	4623      	movge	r3, r4
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	bfa4      	itt	ge
 8006d80:	460c      	movge	r4, r1
 8006d82:	461f      	movge	r7, r3
 8006d84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	6861      	ldr	r1, [r4, #4]
 8006d90:	eb0a 0609 	add.w	r6, sl, r9
 8006d94:	42b3      	cmp	r3, r6
 8006d96:	b085      	sub	sp, #20
 8006d98:	bfb8      	it	lt
 8006d9a:	3101      	addlt	r1, #1
 8006d9c:	f7ff fedc 	bl	8006b58 <_Balloc>
 8006da0:	b930      	cbnz	r0, 8006db0 <__multiply+0x44>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4b44      	ldr	r3, [pc, #272]	@ (8006eb8 <__multiply+0x14c>)
 8006da6:	4845      	ldr	r0, [pc, #276]	@ (8006ebc <__multiply+0x150>)
 8006da8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006dac:	f000 fc92 	bl	80076d4 <__assert_func>
 8006db0:	f100 0514 	add.w	r5, r0, #20
 8006db4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006db8:	462b      	mov	r3, r5
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4543      	cmp	r3, r8
 8006dbe:	d321      	bcc.n	8006e04 <__multiply+0x98>
 8006dc0:	f107 0114 	add.w	r1, r7, #20
 8006dc4:	f104 0214 	add.w	r2, r4, #20
 8006dc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006dcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006dd0:	9302      	str	r3, [sp, #8]
 8006dd2:	1b13      	subs	r3, r2, r4
 8006dd4:	3b15      	subs	r3, #21
 8006dd6:	f023 0303 	bic.w	r3, r3, #3
 8006dda:	3304      	adds	r3, #4
 8006ddc:	f104 0715 	add.w	r7, r4, #21
 8006de0:	42ba      	cmp	r2, r7
 8006de2:	bf38      	it	cc
 8006de4:	2304      	movcc	r3, #4
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	9b02      	ldr	r3, [sp, #8]
 8006dea:	9103      	str	r1, [sp, #12]
 8006dec:	428b      	cmp	r3, r1
 8006dee:	d80c      	bhi.n	8006e0a <__multiply+0x9e>
 8006df0:	2e00      	cmp	r6, #0
 8006df2:	dd03      	ble.n	8006dfc <__multiply+0x90>
 8006df4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d05b      	beq.n	8006eb4 <__multiply+0x148>
 8006dfc:	6106      	str	r6, [r0, #16]
 8006dfe:	b005      	add	sp, #20
 8006e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e04:	f843 2b04 	str.w	r2, [r3], #4
 8006e08:	e7d8      	b.n	8006dbc <__multiply+0x50>
 8006e0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e0e:	f1ba 0f00 	cmp.w	sl, #0
 8006e12:	d024      	beq.n	8006e5e <__multiply+0xf2>
 8006e14:	f104 0e14 	add.w	lr, r4, #20
 8006e18:	46a9      	mov	r9, r5
 8006e1a:	f04f 0c00 	mov.w	ip, #0
 8006e1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e22:	f8d9 3000 	ldr.w	r3, [r9]
 8006e26:	fa1f fb87 	uxth.w	fp, r7
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006e34:	f8d9 7000 	ldr.w	r7, [r9]
 8006e38:	4463      	add	r3, ip
 8006e3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006e42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e4c:	4572      	cmp	r2, lr
 8006e4e:	f849 3b04 	str.w	r3, [r9], #4
 8006e52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e56:	d8e2      	bhi.n	8006e1e <__multiply+0xb2>
 8006e58:	9b01      	ldr	r3, [sp, #4]
 8006e5a:	f845 c003 	str.w	ip, [r5, r3]
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e64:	3104      	adds	r1, #4
 8006e66:	f1b9 0f00 	cmp.w	r9, #0
 8006e6a:	d021      	beq.n	8006eb0 <__multiply+0x144>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	f104 0c14 	add.w	ip, r4, #20
 8006e72:	46ae      	mov	lr, r5
 8006e74:	f04f 0a00 	mov.w	sl, #0
 8006e78:	f8bc b000 	ldrh.w	fp, [ip]
 8006e7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e80:	fb09 770b 	mla	r7, r9, fp, r7
 8006e84:	4457      	add	r7, sl
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e8c:	f84e 3b04 	str.w	r3, [lr], #4
 8006e90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e98:	f8be 3000 	ldrh.w	r3, [lr]
 8006e9c:	fb09 330a 	mla	r3, r9, sl, r3
 8006ea0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ea4:	4562      	cmp	r2, ip
 8006ea6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eaa:	d8e5      	bhi.n	8006e78 <__multiply+0x10c>
 8006eac:	9f01      	ldr	r7, [sp, #4]
 8006eae:	51eb      	str	r3, [r5, r7]
 8006eb0:	3504      	adds	r5, #4
 8006eb2:	e799      	b.n	8006de8 <__multiply+0x7c>
 8006eb4:	3e01      	subs	r6, #1
 8006eb6:	e79b      	b.n	8006df0 <__multiply+0x84>
 8006eb8:	08008ba0 	.word	0x08008ba0
 8006ebc:	08008bb1 	.word	0x08008bb1

08006ec0 <__pow5mult>:
 8006ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	4615      	mov	r5, r2
 8006ec6:	f012 0203 	ands.w	r2, r2, #3
 8006eca:	4607      	mov	r7, r0
 8006ecc:	460e      	mov	r6, r1
 8006ece:	d007      	beq.n	8006ee0 <__pow5mult+0x20>
 8006ed0:	4c25      	ldr	r4, [pc, #148]	@ (8006f68 <__pow5mult+0xa8>)
 8006ed2:	3a01      	subs	r2, #1
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eda:	f7ff fe9f 	bl	8006c1c <__multadd>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	10ad      	asrs	r5, r5, #2
 8006ee2:	d03d      	beq.n	8006f60 <__pow5mult+0xa0>
 8006ee4:	69fc      	ldr	r4, [r7, #28]
 8006ee6:	b97c      	cbnz	r4, 8006f08 <__pow5mult+0x48>
 8006ee8:	2010      	movs	r0, #16
 8006eea:	f7ff fd7f 	bl	80069ec <malloc>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	61f8      	str	r0, [r7, #28]
 8006ef2:	b928      	cbnz	r0, 8006f00 <__pow5mult+0x40>
 8006ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f6c <__pow5mult+0xac>)
 8006ef6:	481e      	ldr	r0, [pc, #120]	@ (8006f70 <__pow5mult+0xb0>)
 8006ef8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006efc:	f000 fbea 	bl	80076d4 <__assert_func>
 8006f00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f04:	6004      	str	r4, [r0, #0]
 8006f06:	60c4      	str	r4, [r0, #12]
 8006f08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f10:	b94c      	cbnz	r4, 8006f26 <__pow5mult+0x66>
 8006f12:	f240 2171 	movw	r1, #625	@ 0x271
 8006f16:	4638      	mov	r0, r7
 8006f18:	f7ff ff12 	bl	8006d40 <__i2b>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f22:	4604      	mov	r4, r0
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	f04f 0900 	mov.w	r9, #0
 8006f2a:	07eb      	lsls	r3, r5, #31
 8006f2c:	d50a      	bpl.n	8006f44 <__pow5mult+0x84>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4622      	mov	r2, r4
 8006f32:	4638      	mov	r0, r7
 8006f34:	f7ff ff1a 	bl	8006d6c <__multiply>
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7ff fe4b 	bl	8006bd8 <_Bfree>
 8006f42:	4646      	mov	r6, r8
 8006f44:	106d      	asrs	r5, r5, #1
 8006f46:	d00b      	beq.n	8006f60 <__pow5mult+0xa0>
 8006f48:	6820      	ldr	r0, [r4, #0]
 8006f4a:	b938      	cbnz	r0, 8006f5c <__pow5mult+0x9c>
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff ff0b 	bl	8006d6c <__multiply>
 8006f56:	6020      	str	r0, [r4, #0]
 8006f58:	f8c0 9000 	str.w	r9, [r0]
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	e7e4      	b.n	8006f2a <__pow5mult+0x6a>
 8006f60:	4630      	mov	r0, r6
 8006f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f66:	bf00      	nop
 8006f68:	08008c0c 	.word	0x08008c0c
 8006f6c:	08008b31 	.word	0x08008b31
 8006f70:	08008bb1 	.word	0x08008bb1

08006f74 <__lshift>:
 8006f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	6849      	ldr	r1, [r1, #4]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	4607      	mov	r7, r0
 8006f86:	4691      	mov	r9, r2
 8006f88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f8c:	f108 0601 	add.w	r6, r8, #1
 8006f90:	42b3      	cmp	r3, r6
 8006f92:	db0b      	blt.n	8006fac <__lshift+0x38>
 8006f94:	4638      	mov	r0, r7
 8006f96:	f7ff fddf 	bl	8006b58 <_Balloc>
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	b948      	cbnz	r0, 8006fb2 <__lshift+0x3e>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	4b28      	ldr	r3, [pc, #160]	@ (8007044 <__lshift+0xd0>)
 8006fa2:	4829      	ldr	r0, [pc, #164]	@ (8007048 <__lshift+0xd4>)
 8006fa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006fa8:	f000 fb94 	bl	80076d4 <__assert_func>
 8006fac:	3101      	adds	r1, #1
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	e7ee      	b.n	8006f90 <__lshift+0x1c>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f100 0114 	add.w	r1, r0, #20
 8006fb8:	f100 0210 	add.w	r2, r0, #16
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	4553      	cmp	r3, sl
 8006fc0:	db33      	blt.n	800702a <__lshift+0xb6>
 8006fc2:	6920      	ldr	r0, [r4, #16]
 8006fc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fc8:	f104 0314 	add.w	r3, r4, #20
 8006fcc:	f019 091f 	ands.w	r9, r9, #31
 8006fd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fd8:	d02b      	beq.n	8007032 <__lshift+0xbe>
 8006fda:	f1c9 0e20 	rsb	lr, r9, #32
 8006fde:	468a      	mov	sl, r1
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	fa00 f009 	lsl.w	r0, r0, r9
 8006fe8:	4310      	orrs	r0, r2
 8006fea:	f84a 0b04 	str.w	r0, [sl], #4
 8006fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff2:	459c      	cmp	ip, r3
 8006ff4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ff8:	d8f3      	bhi.n	8006fe2 <__lshift+0x6e>
 8006ffa:	ebac 0304 	sub.w	r3, ip, r4
 8006ffe:	3b15      	subs	r3, #21
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	3304      	adds	r3, #4
 8007006:	f104 0015 	add.w	r0, r4, #21
 800700a:	4584      	cmp	ip, r0
 800700c:	bf38      	it	cc
 800700e:	2304      	movcc	r3, #4
 8007010:	50ca      	str	r2, [r1, r3]
 8007012:	b10a      	cbz	r2, 8007018 <__lshift+0xa4>
 8007014:	f108 0602 	add.w	r6, r8, #2
 8007018:	3e01      	subs	r6, #1
 800701a:	4638      	mov	r0, r7
 800701c:	612e      	str	r6, [r5, #16]
 800701e:	4621      	mov	r1, r4
 8007020:	f7ff fdda 	bl	8006bd8 <_Bfree>
 8007024:	4628      	mov	r0, r5
 8007026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702a:	f842 0f04 	str.w	r0, [r2, #4]!
 800702e:	3301      	adds	r3, #1
 8007030:	e7c5      	b.n	8006fbe <__lshift+0x4a>
 8007032:	3904      	subs	r1, #4
 8007034:	f853 2b04 	ldr.w	r2, [r3], #4
 8007038:	f841 2f04 	str.w	r2, [r1, #4]!
 800703c:	459c      	cmp	ip, r3
 800703e:	d8f9      	bhi.n	8007034 <__lshift+0xc0>
 8007040:	e7ea      	b.n	8007018 <__lshift+0xa4>
 8007042:	bf00      	nop
 8007044:	08008ba0 	.word	0x08008ba0
 8007048:	08008bb1 	.word	0x08008bb1

0800704c <__mcmp>:
 800704c:	690a      	ldr	r2, [r1, #16]
 800704e:	4603      	mov	r3, r0
 8007050:	6900      	ldr	r0, [r0, #16]
 8007052:	1a80      	subs	r0, r0, r2
 8007054:	b530      	push	{r4, r5, lr}
 8007056:	d10e      	bne.n	8007076 <__mcmp+0x2a>
 8007058:	3314      	adds	r3, #20
 800705a:	3114      	adds	r1, #20
 800705c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007060:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007064:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007068:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800706c:	4295      	cmp	r5, r2
 800706e:	d003      	beq.n	8007078 <__mcmp+0x2c>
 8007070:	d205      	bcs.n	800707e <__mcmp+0x32>
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	bd30      	pop	{r4, r5, pc}
 8007078:	42a3      	cmp	r3, r4
 800707a:	d3f3      	bcc.n	8007064 <__mcmp+0x18>
 800707c:	e7fb      	b.n	8007076 <__mcmp+0x2a>
 800707e:	2001      	movs	r0, #1
 8007080:	e7f9      	b.n	8007076 <__mcmp+0x2a>
	...

08007084 <__mdiff>:
 8007084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	4689      	mov	r9, r1
 800708a:	4606      	mov	r6, r0
 800708c:	4611      	mov	r1, r2
 800708e:	4648      	mov	r0, r9
 8007090:	4614      	mov	r4, r2
 8007092:	f7ff ffdb 	bl	800704c <__mcmp>
 8007096:	1e05      	subs	r5, r0, #0
 8007098:	d112      	bne.n	80070c0 <__mdiff+0x3c>
 800709a:	4629      	mov	r1, r5
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff fd5b 	bl	8006b58 <_Balloc>
 80070a2:	4602      	mov	r2, r0
 80070a4:	b928      	cbnz	r0, 80070b2 <__mdiff+0x2e>
 80070a6:	4b3f      	ldr	r3, [pc, #252]	@ (80071a4 <__mdiff+0x120>)
 80070a8:	f240 2137 	movw	r1, #567	@ 0x237
 80070ac:	483e      	ldr	r0, [pc, #248]	@ (80071a8 <__mdiff+0x124>)
 80070ae:	f000 fb11 	bl	80076d4 <__assert_func>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070b8:	4610      	mov	r0, r2
 80070ba:	b003      	add	sp, #12
 80070bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c0:	bfbc      	itt	lt
 80070c2:	464b      	movlt	r3, r9
 80070c4:	46a1      	movlt	r9, r4
 80070c6:	4630      	mov	r0, r6
 80070c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070cc:	bfba      	itte	lt
 80070ce:	461c      	movlt	r4, r3
 80070d0:	2501      	movlt	r5, #1
 80070d2:	2500      	movge	r5, #0
 80070d4:	f7ff fd40 	bl	8006b58 <_Balloc>
 80070d8:	4602      	mov	r2, r0
 80070da:	b918      	cbnz	r0, 80070e4 <__mdiff+0x60>
 80070dc:	4b31      	ldr	r3, [pc, #196]	@ (80071a4 <__mdiff+0x120>)
 80070de:	f240 2145 	movw	r1, #581	@ 0x245
 80070e2:	e7e3      	b.n	80070ac <__mdiff+0x28>
 80070e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070e8:	6926      	ldr	r6, [r4, #16]
 80070ea:	60c5      	str	r5, [r0, #12]
 80070ec:	f109 0310 	add.w	r3, r9, #16
 80070f0:	f109 0514 	add.w	r5, r9, #20
 80070f4:	f104 0e14 	add.w	lr, r4, #20
 80070f8:	f100 0b14 	add.w	fp, r0, #20
 80070fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007100:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	46d9      	mov	r9, fp
 8007108:	f04f 0c00 	mov.w	ip, #0
 800710c:	9b01      	ldr	r3, [sp, #4]
 800710e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007112:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	fa1f f38a 	uxth.w	r3, sl
 800711c:	4619      	mov	r1, r3
 800711e:	b283      	uxth	r3, r0
 8007120:	1acb      	subs	r3, r1, r3
 8007122:	0c00      	lsrs	r0, r0, #16
 8007124:	4463      	add	r3, ip
 8007126:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800712a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800712e:	b29b      	uxth	r3, r3
 8007130:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007134:	4576      	cmp	r6, lr
 8007136:	f849 3b04 	str.w	r3, [r9], #4
 800713a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800713e:	d8e5      	bhi.n	800710c <__mdiff+0x88>
 8007140:	1b33      	subs	r3, r6, r4
 8007142:	3b15      	subs	r3, #21
 8007144:	f023 0303 	bic.w	r3, r3, #3
 8007148:	3415      	adds	r4, #21
 800714a:	3304      	adds	r3, #4
 800714c:	42a6      	cmp	r6, r4
 800714e:	bf38      	it	cc
 8007150:	2304      	movcc	r3, #4
 8007152:	441d      	add	r5, r3
 8007154:	445b      	add	r3, fp
 8007156:	461e      	mov	r6, r3
 8007158:	462c      	mov	r4, r5
 800715a:	4544      	cmp	r4, r8
 800715c:	d30e      	bcc.n	800717c <__mdiff+0xf8>
 800715e:	f108 0103 	add.w	r1, r8, #3
 8007162:	1b49      	subs	r1, r1, r5
 8007164:	f021 0103 	bic.w	r1, r1, #3
 8007168:	3d03      	subs	r5, #3
 800716a:	45a8      	cmp	r8, r5
 800716c:	bf38      	it	cc
 800716e:	2100      	movcc	r1, #0
 8007170:	440b      	add	r3, r1
 8007172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007176:	b191      	cbz	r1, 800719e <__mdiff+0x11a>
 8007178:	6117      	str	r7, [r2, #16]
 800717a:	e79d      	b.n	80070b8 <__mdiff+0x34>
 800717c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007180:	46e6      	mov	lr, ip
 8007182:	0c08      	lsrs	r0, r1, #16
 8007184:	fa1c fc81 	uxtah	ip, ip, r1
 8007188:	4471      	add	r1, lr
 800718a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800718e:	b289      	uxth	r1, r1
 8007190:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007194:	f846 1b04 	str.w	r1, [r6], #4
 8007198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800719c:	e7dd      	b.n	800715a <__mdiff+0xd6>
 800719e:	3f01      	subs	r7, #1
 80071a0:	e7e7      	b.n	8007172 <__mdiff+0xee>
 80071a2:	bf00      	nop
 80071a4:	08008ba0 	.word	0x08008ba0
 80071a8:	08008bb1 	.word	0x08008bb1

080071ac <__d2b>:
 80071ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071b0:	460f      	mov	r7, r1
 80071b2:	2101      	movs	r1, #1
 80071b4:	ec59 8b10 	vmov	r8, r9, d0
 80071b8:	4616      	mov	r6, r2
 80071ba:	f7ff fccd 	bl	8006b58 <_Balloc>
 80071be:	4604      	mov	r4, r0
 80071c0:	b930      	cbnz	r0, 80071d0 <__d2b+0x24>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b23      	ldr	r3, [pc, #140]	@ (8007254 <__d2b+0xa8>)
 80071c6:	4824      	ldr	r0, [pc, #144]	@ (8007258 <__d2b+0xac>)
 80071c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80071cc:	f000 fa82 	bl	80076d4 <__assert_func>
 80071d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071d8:	b10d      	cbz	r5, 80071de <__d2b+0x32>
 80071da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	f1b8 0300 	subs.w	r3, r8, #0
 80071e4:	d023      	beq.n	800722e <__d2b+0x82>
 80071e6:	4668      	mov	r0, sp
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	f7ff fd7c 	bl	8006ce6 <__lo0bits>
 80071ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071f2:	b1d0      	cbz	r0, 800722a <__d2b+0x7e>
 80071f4:	f1c0 0320 	rsb	r3, r0, #32
 80071f8:	fa02 f303 	lsl.w	r3, r2, r3
 80071fc:	430b      	orrs	r3, r1
 80071fe:	40c2      	lsrs	r2, r0
 8007200:	6163      	str	r3, [r4, #20]
 8007202:	9201      	str	r2, [sp, #4]
 8007204:	9b01      	ldr	r3, [sp, #4]
 8007206:	61a3      	str	r3, [r4, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	bf0c      	ite	eq
 800720c:	2201      	moveq	r2, #1
 800720e:	2202      	movne	r2, #2
 8007210:	6122      	str	r2, [r4, #16]
 8007212:	b1a5      	cbz	r5, 800723e <__d2b+0x92>
 8007214:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007218:	4405      	add	r5, r0
 800721a:	603d      	str	r5, [r7, #0]
 800721c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007220:	6030      	str	r0, [r6, #0]
 8007222:	4620      	mov	r0, r4
 8007224:	b003      	add	sp, #12
 8007226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800722a:	6161      	str	r1, [r4, #20]
 800722c:	e7ea      	b.n	8007204 <__d2b+0x58>
 800722e:	a801      	add	r0, sp, #4
 8007230:	f7ff fd59 	bl	8006ce6 <__lo0bits>
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	3020      	adds	r0, #32
 800723a:	2201      	movs	r2, #1
 800723c:	e7e8      	b.n	8007210 <__d2b+0x64>
 800723e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007242:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007246:	6038      	str	r0, [r7, #0]
 8007248:	6918      	ldr	r0, [r3, #16]
 800724a:	f7ff fd2d 	bl	8006ca8 <__hi0bits>
 800724e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007252:	e7e5      	b.n	8007220 <__d2b+0x74>
 8007254:	08008ba0 	.word	0x08008ba0
 8007258:	08008bb1 	.word	0x08008bb1

0800725c <__ssputs_r>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	688e      	ldr	r6, [r1, #8]
 8007262:	461f      	mov	r7, r3
 8007264:	42be      	cmp	r6, r7
 8007266:	680b      	ldr	r3, [r1, #0]
 8007268:	4682      	mov	sl, r0
 800726a:	460c      	mov	r4, r1
 800726c:	4690      	mov	r8, r2
 800726e:	d82d      	bhi.n	80072cc <__ssputs_r+0x70>
 8007270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007278:	d026      	beq.n	80072c8 <__ssputs_r+0x6c>
 800727a:	6965      	ldr	r5, [r4, #20]
 800727c:	6909      	ldr	r1, [r1, #16]
 800727e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007282:	eba3 0901 	sub.w	r9, r3, r1
 8007286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800728a:	1c7b      	adds	r3, r7, #1
 800728c:	444b      	add	r3, r9
 800728e:	106d      	asrs	r5, r5, #1
 8007290:	429d      	cmp	r5, r3
 8007292:	bf38      	it	cc
 8007294:	461d      	movcc	r5, r3
 8007296:	0553      	lsls	r3, r2, #21
 8007298:	d527      	bpl.n	80072ea <__ssputs_r+0x8e>
 800729a:	4629      	mov	r1, r5
 800729c:	f7ff fbd0 	bl	8006a40 <_malloc_r>
 80072a0:	4606      	mov	r6, r0
 80072a2:	b360      	cbz	r0, 80072fe <__ssputs_r+0xa2>
 80072a4:	6921      	ldr	r1, [r4, #16]
 80072a6:	464a      	mov	r2, r9
 80072a8:	f000 fa06 	bl	80076b8 <memcpy>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	6126      	str	r6, [r4, #16]
 80072ba:	6165      	str	r5, [r4, #20]
 80072bc:	444e      	add	r6, r9
 80072be:	eba5 0509 	sub.w	r5, r5, r9
 80072c2:	6026      	str	r6, [r4, #0]
 80072c4:	60a5      	str	r5, [r4, #8]
 80072c6:	463e      	mov	r6, r7
 80072c8:	42be      	cmp	r6, r7
 80072ca:	d900      	bls.n	80072ce <__ssputs_r+0x72>
 80072cc:	463e      	mov	r6, r7
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	4632      	mov	r2, r6
 80072d2:	4641      	mov	r1, r8
 80072d4:	f000 f9c6 	bl	8007664 <memmove>
 80072d8:	68a3      	ldr	r3, [r4, #8]
 80072da:	1b9b      	subs	r3, r3, r6
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	4433      	add	r3, r6
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	2000      	movs	r0, #0
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	462a      	mov	r2, r5
 80072ec:	f000 fa36 	bl	800775c <_realloc_r>
 80072f0:	4606      	mov	r6, r0
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d1e0      	bne.n	80072b8 <__ssputs_r+0x5c>
 80072f6:	6921      	ldr	r1, [r4, #16]
 80072f8:	4650      	mov	r0, sl
 80072fa:	f7ff fb2d 	bl	8006958 <_free_r>
 80072fe:	230c      	movs	r3, #12
 8007300:	f8ca 3000 	str.w	r3, [sl]
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	e7e9      	b.n	80072e6 <__ssputs_r+0x8a>
	...

08007314 <_svfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	4698      	mov	r8, r3
 800731a:	898b      	ldrh	r3, [r1, #12]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	b09d      	sub	sp, #116	@ 0x74
 8007320:	4607      	mov	r7, r0
 8007322:	460d      	mov	r5, r1
 8007324:	4614      	mov	r4, r2
 8007326:	d510      	bpl.n	800734a <_svfiprintf_r+0x36>
 8007328:	690b      	ldr	r3, [r1, #16]
 800732a:	b973      	cbnz	r3, 800734a <_svfiprintf_r+0x36>
 800732c:	2140      	movs	r1, #64	@ 0x40
 800732e:	f7ff fb87 	bl	8006a40 <_malloc_r>
 8007332:	6028      	str	r0, [r5, #0]
 8007334:	6128      	str	r0, [r5, #16]
 8007336:	b930      	cbnz	r0, 8007346 <_svfiprintf_r+0x32>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	b01d      	add	sp, #116	@ 0x74
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	2340      	movs	r3, #64	@ 0x40
 8007348:	616b      	str	r3, [r5, #20]
 800734a:	2300      	movs	r3, #0
 800734c:	9309      	str	r3, [sp, #36]	@ 0x24
 800734e:	2320      	movs	r3, #32
 8007350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007354:	f8cd 800c 	str.w	r8, [sp, #12]
 8007358:	2330      	movs	r3, #48	@ 0x30
 800735a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074f8 <_svfiprintf_r+0x1e4>
 800735e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007362:	f04f 0901 	mov.w	r9, #1
 8007366:	4623      	mov	r3, r4
 8007368:	469a      	mov	sl, r3
 800736a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736e:	b10a      	cbz	r2, 8007374 <_svfiprintf_r+0x60>
 8007370:	2a25      	cmp	r2, #37	@ 0x25
 8007372:	d1f9      	bne.n	8007368 <_svfiprintf_r+0x54>
 8007374:	ebba 0b04 	subs.w	fp, sl, r4
 8007378:	d00b      	beq.n	8007392 <_svfiprintf_r+0x7e>
 800737a:	465b      	mov	r3, fp
 800737c:	4622      	mov	r2, r4
 800737e:	4629      	mov	r1, r5
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff ff6b 	bl	800725c <__ssputs_r>
 8007386:	3001      	adds	r0, #1
 8007388:	f000 80a7 	beq.w	80074da <_svfiprintf_r+0x1c6>
 800738c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800738e:	445a      	add	r2, fp
 8007390:	9209      	str	r2, [sp, #36]	@ 0x24
 8007392:	f89a 3000 	ldrb.w	r3, [sl]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 809f 	beq.w	80074da <_svfiprintf_r+0x1c6>
 800739c:	2300      	movs	r3, #0
 800739e:	f04f 32ff 	mov.w	r2, #4294967295
 80073a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a6:	f10a 0a01 	add.w	sl, sl, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073b4:	4654      	mov	r4, sl
 80073b6:	2205      	movs	r2, #5
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	484e      	ldr	r0, [pc, #312]	@ (80074f8 <_svfiprintf_r+0x1e4>)
 80073be:	f7f8 ff27 	bl	8000210 <memchr>
 80073c2:	9a04      	ldr	r2, [sp, #16]
 80073c4:	b9d8      	cbnz	r0, 80073fe <_svfiprintf_r+0xea>
 80073c6:	06d0      	lsls	r0, r2, #27
 80073c8:	bf44      	itt	mi
 80073ca:	2320      	movmi	r3, #32
 80073cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073d0:	0711      	lsls	r1, r2, #28
 80073d2:	bf44      	itt	mi
 80073d4:	232b      	movmi	r3, #43	@ 0x2b
 80073d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073da:	f89a 3000 	ldrb.w	r3, [sl]
 80073de:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e0:	d015      	beq.n	800740e <_svfiprintf_r+0xfa>
 80073e2:	9a07      	ldr	r2, [sp, #28]
 80073e4:	4654      	mov	r4, sl
 80073e6:	2000      	movs	r0, #0
 80073e8:	f04f 0c0a 	mov.w	ip, #10
 80073ec:	4621      	mov	r1, r4
 80073ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f2:	3b30      	subs	r3, #48	@ 0x30
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d94b      	bls.n	8007490 <_svfiprintf_r+0x17c>
 80073f8:	b1b0      	cbz	r0, 8007428 <_svfiprintf_r+0x114>
 80073fa:	9207      	str	r2, [sp, #28]
 80073fc:	e014      	b.n	8007428 <_svfiprintf_r+0x114>
 80073fe:	eba0 0308 	sub.w	r3, r0, r8
 8007402:	fa09 f303 	lsl.w	r3, r9, r3
 8007406:	4313      	orrs	r3, r2
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	46a2      	mov	sl, r4
 800740c:	e7d2      	b.n	80073b4 <_svfiprintf_r+0xa0>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9103      	str	r1, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfbb      	ittet	lt
 800741a:	425b      	neglt	r3, r3
 800741c:	f042 0202 	orrlt.w	r2, r2, #2
 8007420:	9307      	strge	r3, [sp, #28]
 8007422:	9307      	strlt	r3, [sp, #28]
 8007424:	bfb8      	it	lt
 8007426:	9204      	strlt	r2, [sp, #16]
 8007428:	7823      	ldrb	r3, [r4, #0]
 800742a:	2b2e      	cmp	r3, #46	@ 0x2e
 800742c:	d10a      	bne.n	8007444 <_svfiprintf_r+0x130>
 800742e:	7863      	ldrb	r3, [r4, #1]
 8007430:	2b2a      	cmp	r3, #42	@ 0x2a
 8007432:	d132      	bne.n	800749a <_svfiprintf_r+0x186>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9203      	str	r2, [sp, #12]
 800743c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007440:	3402      	adds	r4, #2
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007508 <_svfiprintf_r+0x1f4>
 8007448:	7821      	ldrb	r1, [r4, #0]
 800744a:	2203      	movs	r2, #3
 800744c:	4650      	mov	r0, sl
 800744e:	f7f8 fedf 	bl	8000210 <memchr>
 8007452:	b138      	cbz	r0, 8007464 <_svfiprintf_r+0x150>
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	eba0 000a 	sub.w	r0, r0, sl
 800745a:	2240      	movs	r2, #64	@ 0x40
 800745c:	4082      	lsls	r2, r0
 800745e:	4313      	orrs	r3, r2
 8007460:	3401      	adds	r4, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	4824      	ldr	r0, [pc, #144]	@ (80074fc <_svfiprintf_r+0x1e8>)
 800746a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800746e:	2206      	movs	r2, #6
 8007470:	f7f8 fece 	bl	8000210 <memchr>
 8007474:	2800      	cmp	r0, #0
 8007476:	d036      	beq.n	80074e6 <_svfiprintf_r+0x1d2>
 8007478:	4b21      	ldr	r3, [pc, #132]	@ (8007500 <_svfiprintf_r+0x1ec>)
 800747a:	bb1b      	cbnz	r3, 80074c4 <_svfiprintf_r+0x1b0>
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	3307      	adds	r3, #7
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	3308      	adds	r3, #8
 8007486:	9303      	str	r3, [sp, #12]
 8007488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748a:	4433      	add	r3, r6
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	e76a      	b.n	8007366 <_svfiprintf_r+0x52>
 8007490:	fb0c 3202 	mla	r2, ip, r2, r3
 8007494:	460c      	mov	r4, r1
 8007496:	2001      	movs	r0, #1
 8007498:	e7a8      	b.n	80073ec <_svfiprintf_r+0xd8>
 800749a:	2300      	movs	r3, #0
 800749c:	3401      	adds	r4, #1
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	4619      	mov	r1, r3
 80074a2:	f04f 0c0a 	mov.w	ip, #10
 80074a6:	4620      	mov	r0, r4
 80074a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ac:	3a30      	subs	r2, #48	@ 0x30
 80074ae:	2a09      	cmp	r2, #9
 80074b0:	d903      	bls.n	80074ba <_svfiprintf_r+0x1a6>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c6      	beq.n	8007444 <_svfiprintf_r+0x130>
 80074b6:	9105      	str	r1, [sp, #20]
 80074b8:	e7c4      	b.n	8007444 <_svfiprintf_r+0x130>
 80074ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80074be:	4604      	mov	r4, r0
 80074c0:	2301      	movs	r3, #1
 80074c2:	e7f0      	b.n	80074a6 <_svfiprintf_r+0x192>
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	462a      	mov	r2, r5
 80074ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007504 <_svfiprintf_r+0x1f0>)
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	4638      	mov	r0, r7
 80074d0:	f7fd fe84 	bl	80051dc <_printf_float>
 80074d4:	1c42      	adds	r2, r0, #1
 80074d6:	4606      	mov	r6, r0
 80074d8:	d1d6      	bne.n	8007488 <_svfiprintf_r+0x174>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	065b      	lsls	r3, r3, #25
 80074de:	f53f af2d 	bmi.w	800733c <_svfiprintf_r+0x28>
 80074e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074e4:	e72c      	b.n	8007340 <_svfiprintf_r+0x2c>
 80074e6:	ab03      	add	r3, sp, #12
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	462a      	mov	r2, r5
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <_svfiprintf_r+0x1f0>)
 80074ee:	a904      	add	r1, sp, #16
 80074f0:	4638      	mov	r0, r7
 80074f2:	f7fe f90b 	bl	800570c <_printf_i>
 80074f6:	e7ed      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074f8:	08008d08 	.word	0x08008d08
 80074fc:	08008d12 	.word	0x08008d12
 8007500:	080051dd 	.word	0x080051dd
 8007504:	0800725d 	.word	0x0800725d
 8007508:	08008d0e 	.word	0x08008d0e

0800750c <__sflush_r>:
 800750c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	0716      	lsls	r6, r2, #28
 8007516:	4605      	mov	r5, r0
 8007518:	460c      	mov	r4, r1
 800751a:	d454      	bmi.n	80075c6 <__sflush_r+0xba>
 800751c:	684b      	ldr	r3, [r1, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	dc02      	bgt.n	8007528 <__sflush_r+0x1c>
 8007522:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	dd48      	ble.n	80075ba <__sflush_r+0xae>
 8007528:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800752a:	2e00      	cmp	r6, #0
 800752c:	d045      	beq.n	80075ba <__sflush_r+0xae>
 800752e:	2300      	movs	r3, #0
 8007530:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007534:	682f      	ldr	r7, [r5, #0]
 8007536:	6a21      	ldr	r1, [r4, #32]
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	d030      	beq.n	800759e <__sflush_r+0x92>
 800753c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	0759      	lsls	r1, r3, #29
 8007542:	d505      	bpl.n	8007550 <__sflush_r+0x44>
 8007544:	6863      	ldr	r3, [r4, #4]
 8007546:	1ad2      	subs	r2, r2, r3
 8007548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800754a:	b10b      	cbz	r3, 8007550 <__sflush_r+0x44>
 800754c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	2300      	movs	r3, #0
 8007552:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007554:	6a21      	ldr	r1, [r4, #32]
 8007556:	4628      	mov	r0, r5
 8007558:	47b0      	blx	r6
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	d106      	bne.n	800756e <__sflush_r+0x62>
 8007560:	6829      	ldr	r1, [r5, #0]
 8007562:	291d      	cmp	r1, #29
 8007564:	d82b      	bhi.n	80075be <__sflush_r+0xb2>
 8007566:	4a2a      	ldr	r2, [pc, #168]	@ (8007610 <__sflush_r+0x104>)
 8007568:	410a      	asrs	r2, r1
 800756a:	07d6      	lsls	r6, r2, #31
 800756c:	d427      	bmi.n	80075be <__sflush_r+0xb2>
 800756e:	2200      	movs	r2, #0
 8007570:	6062      	str	r2, [r4, #4]
 8007572:	04d9      	lsls	r1, r3, #19
 8007574:	6922      	ldr	r2, [r4, #16]
 8007576:	6022      	str	r2, [r4, #0]
 8007578:	d504      	bpl.n	8007584 <__sflush_r+0x78>
 800757a:	1c42      	adds	r2, r0, #1
 800757c:	d101      	bne.n	8007582 <__sflush_r+0x76>
 800757e:	682b      	ldr	r3, [r5, #0]
 8007580:	b903      	cbnz	r3, 8007584 <__sflush_r+0x78>
 8007582:	6560      	str	r0, [r4, #84]	@ 0x54
 8007584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007586:	602f      	str	r7, [r5, #0]
 8007588:	b1b9      	cbz	r1, 80075ba <__sflush_r+0xae>
 800758a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800758e:	4299      	cmp	r1, r3
 8007590:	d002      	beq.n	8007598 <__sflush_r+0x8c>
 8007592:	4628      	mov	r0, r5
 8007594:	f7ff f9e0 	bl	8006958 <_free_r>
 8007598:	2300      	movs	r3, #0
 800759a:	6363      	str	r3, [r4, #52]	@ 0x34
 800759c:	e00d      	b.n	80075ba <__sflush_r+0xae>
 800759e:	2301      	movs	r3, #1
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b0      	blx	r6
 80075a4:	4602      	mov	r2, r0
 80075a6:	1c50      	adds	r0, r2, #1
 80075a8:	d1c9      	bne.n	800753e <__sflush_r+0x32>
 80075aa:	682b      	ldr	r3, [r5, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0c6      	beq.n	800753e <__sflush_r+0x32>
 80075b0:	2b1d      	cmp	r3, #29
 80075b2:	d001      	beq.n	80075b8 <__sflush_r+0xac>
 80075b4:	2b16      	cmp	r3, #22
 80075b6:	d11e      	bne.n	80075f6 <__sflush_r+0xea>
 80075b8:	602f      	str	r7, [r5, #0]
 80075ba:	2000      	movs	r0, #0
 80075bc:	e022      	b.n	8007604 <__sflush_r+0xf8>
 80075be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c2:	b21b      	sxth	r3, r3
 80075c4:	e01b      	b.n	80075fe <__sflush_r+0xf2>
 80075c6:	690f      	ldr	r7, [r1, #16]
 80075c8:	2f00      	cmp	r7, #0
 80075ca:	d0f6      	beq.n	80075ba <__sflush_r+0xae>
 80075cc:	0793      	lsls	r3, r2, #30
 80075ce:	680e      	ldr	r6, [r1, #0]
 80075d0:	bf08      	it	eq
 80075d2:	694b      	ldreq	r3, [r1, #20]
 80075d4:	600f      	str	r7, [r1, #0]
 80075d6:	bf18      	it	ne
 80075d8:	2300      	movne	r3, #0
 80075da:	eba6 0807 	sub.w	r8, r6, r7
 80075de:	608b      	str	r3, [r1, #8]
 80075e0:	f1b8 0f00 	cmp.w	r8, #0
 80075e4:	dde9      	ble.n	80075ba <__sflush_r+0xae>
 80075e6:	6a21      	ldr	r1, [r4, #32]
 80075e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075ea:	4643      	mov	r3, r8
 80075ec:	463a      	mov	r2, r7
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b0      	blx	r6
 80075f2:	2800      	cmp	r0, #0
 80075f4:	dc08      	bgt.n	8007608 <__sflush_r+0xfc>
 80075f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007608:	4407      	add	r7, r0
 800760a:	eba8 0800 	sub.w	r8, r8, r0
 800760e:	e7e7      	b.n	80075e0 <__sflush_r+0xd4>
 8007610:	dfbffffe 	.word	0xdfbffffe

08007614 <_fflush_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	690b      	ldr	r3, [r1, #16]
 8007618:	4605      	mov	r5, r0
 800761a:	460c      	mov	r4, r1
 800761c:	b913      	cbnz	r3, 8007624 <_fflush_r+0x10>
 800761e:	2500      	movs	r5, #0
 8007620:	4628      	mov	r0, r5
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	b118      	cbz	r0, 800762e <_fflush_r+0x1a>
 8007626:	6a03      	ldr	r3, [r0, #32]
 8007628:	b90b      	cbnz	r3, 800762e <_fflush_r+0x1a>
 800762a:	f7fe fa1b 	bl	8005a64 <__sinit>
 800762e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f3      	beq.n	800761e <_fflush_r+0xa>
 8007636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007638:	07d0      	lsls	r0, r2, #31
 800763a:	d404      	bmi.n	8007646 <_fflush_r+0x32>
 800763c:	0599      	lsls	r1, r3, #22
 800763e:	d402      	bmi.n	8007646 <_fflush_r+0x32>
 8007640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007642:	f7fe fb3a 	bl	8005cba <__retarget_lock_acquire_recursive>
 8007646:	4628      	mov	r0, r5
 8007648:	4621      	mov	r1, r4
 800764a:	f7ff ff5f 	bl	800750c <__sflush_r>
 800764e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007650:	07da      	lsls	r2, r3, #31
 8007652:	4605      	mov	r5, r0
 8007654:	d4e4      	bmi.n	8007620 <_fflush_r+0xc>
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	059b      	lsls	r3, r3, #22
 800765a:	d4e1      	bmi.n	8007620 <_fflush_r+0xc>
 800765c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800765e:	f7fe fb2d 	bl	8005cbc <__retarget_lock_release_recursive>
 8007662:	e7dd      	b.n	8007620 <_fflush_r+0xc>

08007664 <memmove>:
 8007664:	4288      	cmp	r0, r1
 8007666:	b510      	push	{r4, lr}
 8007668:	eb01 0402 	add.w	r4, r1, r2
 800766c:	d902      	bls.n	8007674 <memmove+0x10>
 800766e:	4284      	cmp	r4, r0
 8007670:	4623      	mov	r3, r4
 8007672:	d807      	bhi.n	8007684 <memmove+0x20>
 8007674:	1e43      	subs	r3, r0, #1
 8007676:	42a1      	cmp	r1, r4
 8007678:	d008      	beq.n	800768c <memmove+0x28>
 800767a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800767e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007682:	e7f8      	b.n	8007676 <memmove+0x12>
 8007684:	4402      	add	r2, r0
 8007686:	4601      	mov	r1, r0
 8007688:	428a      	cmp	r2, r1
 800768a:	d100      	bne.n	800768e <memmove+0x2a>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007696:	e7f7      	b.n	8007688 <memmove+0x24>

08007698 <_sbrk_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d06      	ldr	r5, [pc, #24]	@ (80076b4 <_sbrk_r+0x1c>)
 800769c:	2300      	movs	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	f7fa fa76 	bl	8001b94 <_sbrk>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_sbrk_r+0x1a>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_sbrk_r+0x1a>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	20000888 	.word	0x20000888

080076b8 <memcpy>:
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c0:	d100      	bne.n	80076c4 <memcpy+0xc>
 80076c2:	4770      	bx	lr
 80076c4:	b510      	push	{r4, lr}
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ce:	4291      	cmp	r1, r2
 80076d0:	d1f9      	bne.n	80076c6 <memcpy+0xe>
 80076d2:	bd10      	pop	{r4, pc}

080076d4 <__assert_func>:
 80076d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076d6:	4614      	mov	r4, r2
 80076d8:	461a      	mov	r2, r3
 80076da:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <__assert_func+0x2c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4605      	mov	r5, r0
 80076e0:	68d8      	ldr	r0, [r3, #12]
 80076e2:	b954      	cbnz	r4, 80076fa <__assert_func+0x26>
 80076e4:	4b07      	ldr	r3, [pc, #28]	@ (8007704 <__assert_func+0x30>)
 80076e6:	461c      	mov	r4, r3
 80076e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076ec:	9100      	str	r1, [sp, #0]
 80076ee:	462b      	mov	r3, r5
 80076f0:	4905      	ldr	r1, [pc, #20]	@ (8007708 <__assert_func+0x34>)
 80076f2:	f000 f86f 	bl	80077d4 <fiprintf>
 80076f6:	f000 f87f 	bl	80077f8 <abort>
 80076fa:	4b04      	ldr	r3, [pc, #16]	@ (800770c <__assert_func+0x38>)
 80076fc:	e7f4      	b.n	80076e8 <__assert_func+0x14>
 80076fe:	bf00      	nop
 8007700:	20000020 	.word	0x20000020
 8007704:	08008d5e 	.word	0x08008d5e
 8007708:	08008d30 	.word	0x08008d30
 800770c:	08008d23 	.word	0x08008d23

08007710 <_calloc_r>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	fba1 5402 	umull	r5, r4, r1, r2
 8007716:	b93c      	cbnz	r4, 8007728 <_calloc_r+0x18>
 8007718:	4629      	mov	r1, r5
 800771a:	f7ff f991 	bl	8006a40 <_malloc_r>
 800771e:	4606      	mov	r6, r0
 8007720:	b928      	cbnz	r0, 800772e <_calloc_r+0x1e>
 8007722:	2600      	movs	r6, #0
 8007724:	4630      	mov	r0, r6
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	220c      	movs	r2, #12
 800772a:	6002      	str	r2, [r0, #0]
 800772c:	e7f9      	b.n	8007722 <_calloc_r+0x12>
 800772e:	462a      	mov	r2, r5
 8007730:	4621      	mov	r1, r4
 8007732:	f7fe fa44 	bl	8005bbe <memset>
 8007736:	e7f5      	b.n	8007724 <_calloc_r+0x14>

08007738 <__ascii_mbtowc>:
 8007738:	b082      	sub	sp, #8
 800773a:	b901      	cbnz	r1, 800773e <__ascii_mbtowc+0x6>
 800773c:	a901      	add	r1, sp, #4
 800773e:	b142      	cbz	r2, 8007752 <__ascii_mbtowc+0x1a>
 8007740:	b14b      	cbz	r3, 8007756 <__ascii_mbtowc+0x1e>
 8007742:	7813      	ldrb	r3, [r2, #0]
 8007744:	600b      	str	r3, [r1, #0]
 8007746:	7812      	ldrb	r2, [r2, #0]
 8007748:	1e10      	subs	r0, r2, #0
 800774a:	bf18      	it	ne
 800774c:	2001      	movne	r0, #1
 800774e:	b002      	add	sp, #8
 8007750:	4770      	bx	lr
 8007752:	4610      	mov	r0, r2
 8007754:	e7fb      	b.n	800774e <__ascii_mbtowc+0x16>
 8007756:	f06f 0001 	mvn.w	r0, #1
 800775a:	e7f8      	b.n	800774e <__ascii_mbtowc+0x16>

0800775c <_realloc_r>:
 800775c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007760:	4680      	mov	r8, r0
 8007762:	4615      	mov	r5, r2
 8007764:	460c      	mov	r4, r1
 8007766:	b921      	cbnz	r1, 8007772 <_realloc_r+0x16>
 8007768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800776c:	4611      	mov	r1, r2
 800776e:	f7ff b967 	b.w	8006a40 <_malloc_r>
 8007772:	b92a      	cbnz	r2, 8007780 <_realloc_r+0x24>
 8007774:	f7ff f8f0 	bl	8006958 <_free_r>
 8007778:	2400      	movs	r4, #0
 800777a:	4620      	mov	r0, r4
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007780:	f000 f841 	bl	8007806 <_malloc_usable_size_r>
 8007784:	4285      	cmp	r5, r0
 8007786:	4606      	mov	r6, r0
 8007788:	d802      	bhi.n	8007790 <_realloc_r+0x34>
 800778a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800778e:	d8f4      	bhi.n	800777a <_realloc_r+0x1e>
 8007790:	4629      	mov	r1, r5
 8007792:	4640      	mov	r0, r8
 8007794:	f7ff f954 	bl	8006a40 <_malloc_r>
 8007798:	4607      	mov	r7, r0
 800779a:	2800      	cmp	r0, #0
 800779c:	d0ec      	beq.n	8007778 <_realloc_r+0x1c>
 800779e:	42b5      	cmp	r5, r6
 80077a0:	462a      	mov	r2, r5
 80077a2:	4621      	mov	r1, r4
 80077a4:	bf28      	it	cs
 80077a6:	4632      	movcs	r2, r6
 80077a8:	f7ff ff86 	bl	80076b8 <memcpy>
 80077ac:	4621      	mov	r1, r4
 80077ae:	4640      	mov	r0, r8
 80077b0:	f7ff f8d2 	bl	8006958 <_free_r>
 80077b4:	463c      	mov	r4, r7
 80077b6:	e7e0      	b.n	800777a <_realloc_r+0x1e>

080077b8 <__ascii_wctomb>:
 80077b8:	4603      	mov	r3, r0
 80077ba:	4608      	mov	r0, r1
 80077bc:	b141      	cbz	r1, 80077d0 <__ascii_wctomb+0x18>
 80077be:	2aff      	cmp	r2, #255	@ 0xff
 80077c0:	d904      	bls.n	80077cc <__ascii_wctomb+0x14>
 80077c2:	228a      	movs	r2, #138	@ 0x8a
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ca:	4770      	bx	lr
 80077cc:	700a      	strb	r2, [r1, #0]
 80077ce:	2001      	movs	r0, #1
 80077d0:	4770      	bx	lr
	...

080077d4 <fiprintf>:
 80077d4:	b40e      	push	{r1, r2, r3}
 80077d6:	b503      	push	{r0, r1, lr}
 80077d8:	4601      	mov	r1, r0
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	4805      	ldr	r0, [pc, #20]	@ (80077f4 <fiprintf+0x20>)
 80077de:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e2:	6800      	ldr	r0, [r0, #0]
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	f000 f83f 	bl	8007868 <_vfiprintf_r>
 80077ea:	b002      	add	sp, #8
 80077ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80077f0:	b003      	add	sp, #12
 80077f2:	4770      	bx	lr
 80077f4:	20000020 	.word	0x20000020

080077f8 <abort>:
 80077f8:	b508      	push	{r3, lr}
 80077fa:	2006      	movs	r0, #6
 80077fc:	f000 fa08 	bl	8007c10 <raise>
 8007800:	2001      	movs	r0, #1
 8007802:	f7fa f94f 	bl	8001aa4 <_exit>

08007806 <_malloc_usable_size_r>:
 8007806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780a:	1f18      	subs	r0, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	bfbc      	itt	lt
 8007810:	580b      	ldrlt	r3, [r1, r0]
 8007812:	18c0      	addlt	r0, r0, r3
 8007814:	4770      	bx	lr

08007816 <__sfputc_r>:
 8007816:	6893      	ldr	r3, [r2, #8]
 8007818:	3b01      	subs	r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	b410      	push	{r4}
 800781e:	6093      	str	r3, [r2, #8]
 8007820:	da08      	bge.n	8007834 <__sfputc_r+0x1e>
 8007822:	6994      	ldr	r4, [r2, #24]
 8007824:	42a3      	cmp	r3, r4
 8007826:	db01      	blt.n	800782c <__sfputc_r+0x16>
 8007828:	290a      	cmp	r1, #10
 800782a:	d103      	bne.n	8007834 <__sfputc_r+0x1e>
 800782c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007830:	f000 b932 	b.w	8007a98 <__swbuf_r>
 8007834:	6813      	ldr	r3, [r2, #0]
 8007836:	1c58      	adds	r0, r3, #1
 8007838:	6010      	str	r0, [r2, #0]
 800783a:	7019      	strb	r1, [r3, #0]
 800783c:	4608      	mov	r0, r1
 800783e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007842:	4770      	bx	lr

08007844 <__sfputs_r>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	4614      	mov	r4, r2
 800784c:	18d5      	adds	r5, r2, r3
 800784e:	42ac      	cmp	r4, r5
 8007850:	d101      	bne.n	8007856 <__sfputs_r+0x12>
 8007852:	2000      	movs	r0, #0
 8007854:	e007      	b.n	8007866 <__sfputs_r+0x22>
 8007856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785a:	463a      	mov	r2, r7
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ffda 	bl	8007816 <__sfputc_r>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	d1f3      	bne.n	800784e <__sfputs_r+0xa>
 8007866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007868 <_vfiprintf_r>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	460d      	mov	r5, r1
 800786e:	b09d      	sub	sp, #116	@ 0x74
 8007870:	4614      	mov	r4, r2
 8007872:	4698      	mov	r8, r3
 8007874:	4606      	mov	r6, r0
 8007876:	b118      	cbz	r0, 8007880 <_vfiprintf_r+0x18>
 8007878:	6a03      	ldr	r3, [r0, #32]
 800787a:	b90b      	cbnz	r3, 8007880 <_vfiprintf_r+0x18>
 800787c:	f7fe f8f2 	bl	8005a64 <__sinit>
 8007880:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007882:	07d9      	lsls	r1, r3, #31
 8007884:	d405      	bmi.n	8007892 <_vfiprintf_r+0x2a>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	059a      	lsls	r2, r3, #22
 800788a:	d402      	bmi.n	8007892 <_vfiprintf_r+0x2a>
 800788c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800788e:	f7fe fa14 	bl	8005cba <__retarget_lock_acquire_recursive>
 8007892:	89ab      	ldrh	r3, [r5, #12]
 8007894:	071b      	lsls	r3, r3, #28
 8007896:	d501      	bpl.n	800789c <_vfiprintf_r+0x34>
 8007898:	692b      	ldr	r3, [r5, #16]
 800789a:	b99b      	cbnz	r3, 80078c4 <_vfiprintf_r+0x5c>
 800789c:	4629      	mov	r1, r5
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f938 	bl	8007b14 <__swsetup_r>
 80078a4:	b170      	cbz	r0, 80078c4 <_vfiprintf_r+0x5c>
 80078a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078a8:	07dc      	lsls	r4, r3, #31
 80078aa:	d504      	bpl.n	80078b6 <_vfiprintf_r+0x4e>
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295
 80078b0:	b01d      	add	sp, #116	@ 0x74
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	0598      	lsls	r0, r3, #22
 80078ba:	d4f7      	bmi.n	80078ac <_vfiprintf_r+0x44>
 80078bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078be:	f7fe f9fd 	bl	8005cbc <__retarget_lock_release_recursive>
 80078c2:	e7f3      	b.n	80078ac <_vfiprintf_r+0x44>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c8:	2320      	movs	r3, #32
 80078ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d2:	2330      	movs	r3, #48	@ 0x30
 80078d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a84 <_vfiprintf_r+0x21c>
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078dc:	f04f 0901 	mov.w	r9, #1
 80078e0:	4623      	mov	r3, r4
 80078e2:	469a      	mov	sl, r3
 80078e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e8:	b10a      	cbz	r2, 80078ee <_vfiprintf_r+0x86>
 80078ea:	2a25      	cmp	r2, #37	@ 0x25
 80078ec:	d1f9      	bne.n	80078e2 <_vfiprintf_r+0x7a>
 80078ee:	ebba 0b04 	subs.w	fp, sl, r4
 80078f2:	d00b      	beq.n	800790c <_vfiprintf_r+0xa4>
 80078f4:	465b      	mov	r3, fp
 80078f6:	4622      	mov	r2, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ffa2 	bl	8007844 <__sfputs_r>
 8007900:	3001      	adds	r0, #1
 8007902:	f000 80a7 	beq.w	8007a54 <_vfiprintf_r+0x1ec>
 8007906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007908:	445a      	add	r2, fp
 800790a:	9209      	str	r2, [sp, #36]	@ 0x24
 800790c:	f89a 3000 	ldrb.w	r3, [sl]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 809f 	beq.w	8007a54 <_vfiprintf_r+0x1ec>
 8007916:	2300      	movs	r3, #0
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007920:	f10a 0a01 	add.w	sl, sl, #1
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800792c:	931a      	str	r3, [sp, #104]	@ 0x68
 800792e:	4654      	mov	r4, sl
 8007930:	2205      	movs	r2, #5
 8007932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007936:	4853      	ldr	r0, [pc, #332]	@ (8007a84 <_vfiprintf_r+0x21c>)
 8007938:	f7f8 fc6a 	bl	8000210 <memchr>
 800793c:	9a04      	ldr	r2, [sp, #16]
 800793e:	b9d8      	cbnz	r0, 8007978 <_vfiprintf_r+0x110>
 8007940:	06d1      	lsls	r1, r2, #27
 8007942:	bf44      	itt	mi
 8007944:	2320      	movmi	r3, #32
 8007946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800794a:	0713      	lsls	r3, r2, #28
 800794c:	bf44      	itt	mi
 800794e:	232b      	movmi	r3, #43	@ 0x2b
 8007950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007954:	f89a 3000 	ldrb.w	r3, [sl]
 8007958:	2b2a      	cmp	r3, #42	@ 0x2a
 800795a:	d015      	beq.n	8007988 <_vfiprintf_r+0x120>
 800795c:	9a07      	ldr	r2, [sp, #28]
 800795e:	4654      	mov	r4, sl
 8007960:	2000      	movs	r0, #0
 8007962:	f04f 0c0a 	mov.w	ip, #10
 8007966:	4621      	mov	r1, r4
 8007968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796c:	3b30      	subs	r3, #48	@ 0x30
 800796e:	2b09      	cmp	r3, #9
 8007970:	d94b      	bls.n	8007a0a <_vfiprintf_r+0x1a2>
 8007972:	b1b0      	cbz	r0, 80079a2 <_vfiprintf_r+0x13a>
 8007974:	9207      	str	r2, [sp, #28]
 8007976:	e014      	b.n	80079a2 <_vfiprintf_r+0x13a>
 8007978:	eba0 0308 	sub.w	r3, r0, r8
 800797c:	fa09 f303 	lsl.w	r3, r9, r3
 8007980:	4313      	orrs	r3, r2
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	46a2      	mov	sl, r4
 8007986:	e7d2      	b.n	800792e <_vfiprintf_r+0xc6>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	1d19      	adds	r1, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	9103      	str	r1, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfbb      	ittet	lt
 8007994:	425b      	neglt	r3, r3
 8007996:	f042 0202 	orrlt.w	r2, r2, #2
 800799a:	9307      	strge	r3, [sp, #28]
 800799c:	9307      	strlt	r3, [sp, #28]
 800799e:	bfb8      	it	lt
 80079a0:	9204      	strlt	r2, [sp, #16]
 80079a2:	7823      	ldrb	r3, [r4, #0]
 80079a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079a6:	d10a      	bne.n	80079be <_vfiprintf_r+0x156>
 80079a8:	7863      	ldrb	r3, [r4, #1]
 80079aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ac:	d132      	bne.n	8007a14 <_vfiprintf_r+0x1ac>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	9203      	str	r2, [sp, #12]
 80079b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079ba:	3402      	adds	r4, #2
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a94 <_vfiprintf_r+0x22c>
 80079c2:	7821      	ldrb	r1, [r4, #0]
 80079c4:	2203      	movs	r2, #3
 80079c6:	4650      	mov	r0, sl
 80079c8:	f7f8 fc22 	bl	8000210 <memchr>
 80079cc:	b138      	cbz	r0, 80079de <_vfiprintf_r+0x176>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	eba0 000a 	sub.w	r0, r0, sl
 80079d4:	2240      	movs	r2, #64	@ 0x40
 80079d6:	4082      	lsls	r2, r0
 80079d8:	4313      	orrs	r3, r2
 80079da:	3401      	adds	r4, #1
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e2:	4829      	ldr	r0, [pc, #164]	@ (8007a88 <_vfiprintf_r+0x220>)
 80079e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079e8:	2206      	movs	r2, #6
 80079ea:	f7f8 fc11 	bl	8000210 <memchr>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d03f      	beq.n	8007a72 <_vfiprintf_r+0x20a>
 80079f2:	4b26      	ldr	r3, [pc, #152]	@ (8007a8c <_vfiprintf_r+0x224>)
 80079f4:	bb1b      	cbnz	r3, 8007a3e <_vfiprintf_r+0x1d6>
 80079f6:	9b03      	ldr	r3, [sp, #12]
 80079f8:	3307      	adds	r3, #7
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	3308      	adds	r3, #8
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a04:	443b      	add	r3, r7
 8007a06:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a08:	e76a      	b.n	80078e0 <_vfiprintf_r+0x78>
 8007a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2001      	movs	r0, #1
 8007a12:	e7a8      	b.n	8007966 <_vfiprintf_r+0xfe>
 8007a14:	2300      	movs	r3, #0
 8007a16:	3401      	adds	r4, #1
 8007a18:	9305      	str	r3, [sp, #20]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f04f 0c0a 	mov.w	ip, #10
 8007a20:	4620      	mov	r0, r4
 8007a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a26:	3a30      	subs	r2, #48	@ 0x30
 8007a28:	2a09      	cmp	r2, #9
 8007a2a:	d903      	bls.n	8007a34 <_vfiprintf_r+0x1cc>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0c6      	beq.n	80079be <_vfiprintf_r+0x156>
 8007a30:	9105      	str	r1, [sp, #20]
 8007a32:	e7c4      	b.n	80079be <_vfiprintf_r+0x156>
 8007a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a38:	4604      	mov	r4, r0
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e7f0      	b.n	8007a20 <_vfiprintf_r+0x1b8>
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	462a      	mov	r2, r5
 8007a44:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <_vfiprintf_r+0x228>)
 8007a46:	a904      	add	r1, sp, #16
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7fd fbc7 	bl	80051dc <_printf_float>
 8007a4e:	4607      	mov	r7, r0
 8007a50:	1c78      	adds	r0, r7, #1
 8007a52:	d1d6      	bne.n	8007a02 <_vfiprintf_r+0x19a>
 8007a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a56:	07d9      	lsls	r1, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_vfiprintf_r+0x1fe>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	059a      	lsls	r2, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_vfiprintf_r+0x1fe>
 8007a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a62:	f7fe f92b 	bl	8005cbc <__retarget_lock_release_recursive>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	065b      	lsls	r3, r3, #25
 8007a6a:	f53f af1f 	bmi.w	80078ac <_vfiprintf_r+0x44>
 8007a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a70:	e71e      	b.n	80078b0 <_vfiprintf_r+0x48>
 8007a72:	ab03      	add	r3, sp, #12
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	462a      	mov	r2, r5
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <_vfiprintf_r+0x228>)
 8007a7a:	a904      	add	r1, sp, #16
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f7fd fe45 	bl	800570c <_printf_i>
 8007a82:	e7e4      	b.n	8007a4e <_vfiprintf_r+0x1e6>
 8007a84:	08008d08 	.word	0x08008d08
 8007a88:	08008d12 	.word	0x08008d12
 8007a8c:	080051dd 	.word	0x080051dd
 8007a90:	08007845 	.word	0x08007845
 8007a94:	08008d0e 	.word	0x08008d0e

08007a98 <__swbuf_r>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	460e      	mov	r6, r1
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	b118      	cbz	r0, 8007aaa <__swbuf_r+0x12>
 8007aa2:	6a03      	ldr	r3, [r0, #32]
 8007aa4:	b90b      	cbnz	r3, 8007aaa <__swbuf_r+0x12>
 8007aa6:	f7fd ffdd 	bl	8005a64 <__sinit>
 8007aaa:	69a3      	ldr	r3, [r4, #24]
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	071a      	lsls	r2, r3, #28
 8007ab2:	d501      	bpl.n	8007ab8 <__swbuf_r+0x20>
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	b943      	cbnz	r3, 8007aca <__swbuf_r+0x32>
 8007ab8:	4621      	mov	r1, r4
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 f82a 	bl	8007b14 <__swsetup_r>
 8007ac0:	b118      	cbz	r0, 8007aca <__swbuf_r+0x32>
 8007ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	1a98      	subs	r0, r3, r2
 8007ad0:	6963      	ldr	r3, [r4, #20]
 8007ad2:	b2f6      	uxtb	r6, r6
 8007ad4:	4283      	cmp	r3, r0
 8007ad6:	4637      	mov	r7, r6
 8007ad8:	dc05      	bgt.n	8007ae6 <__swbuf_r+0x4e>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4628      	mov	r0, r5
 8007ade:	f7ff fd99 	bl	8007614 <_fflush_r>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d1ed      	bne.n	8007ac2 <__swbuf_r+0x2a>
 8007ae6:	68a3      	ldr	r3, [r4, #8]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	60a3      	str	r3, [r4, #8]
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	701e      	strb	r6, [r3, #0]
 8007af4:	6962      	ldr	r2, [r4, #20]
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d004      	beq.n	8007b06 <__swbuf_r+0x6e>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	07db      	lsls	r3, r3, #31
 8007b00:	d5e1      	bpl.n	8007ac6 <__swbuf_r+0x2e>
 8007b02:	2e0a      	cmp	r6, #10
 8007b04:	d1df      	bne.n	8007ac6 <__swbuf_r+0x2e>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f7ff fd83 	bl	8007614 <_fflush_r>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d0d9      	beq.n	8007ac6 <__swbuf_r+0x2e>
 8007b12:	e7d6      	b.n	8007ac2 <__swbuf_r+0x2a>

08007b14 <__swsetup_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4b29      	ldr	r3, [pc, #164]	@ (8007bbc <__swsetup_r+0xa8>)
 8007b18:	4605      	mov	r5, r0
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	b118      	cbz	r0, 8007b28 <__swsetup_r+0x14>
 8007b20:	6a03      	ldr	r3, [r0, #32]
 8007b22:	b90b      	cbnz	r3, 8007b28 <__swsetup_r+0x14>
 8007b24:	f7fd ff9e 	bl	8005a64 <__sinit>
 8007b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b2c:	0719      	lsls	r1, r3, #28
 8007b2e:	d422      	bmi.n	8007b76 <__swsetup_r+0x62>
 8007b30:	06da      	lsls	r2, r3, #27
 8007b32:	d407      	bmi.n	8007b44 <__swsetup_r+0x30>
 8007b34:	2209      	movs	r2, #9
 8007b36:	602a      	str	r2, [r5, #0]
 8007b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b42:	e033      	b.n	8007bac <__swsetup_r+0x98>
 8007b44:	0758      	lsls	r0, r3, #29
 8007b46:	d512      	bpl.n	8007b6e <__swsetup_r+0x5a>
 8007b48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b4a:	b141      	cbz	r1, 8007b5e <__swsetup_r+0x4a>
 8007b4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b50:	4299      	cmp	r1, r3
 8007b52:	d002      	beq.n	8007b5a <__swsetup_r+0x46>
 8007b54:	4628      	mov	r0, r5
 8007b56:	f7fe feff 	bl	8006958 <_free_r>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	2300      	movs	r3, #0
 8007b68:	6063      	str	r3, [r4, #4]
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	f043 0308 	orr.w	r3, r3, #8
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	b94b      	cbnz	r3, 8007b8e <__swsetup_r+0x7a>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b84:	d003      	beq.n	8007b8e <__swsetup_r+0x7a>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 f883 	bl	8007c94 <__smakebuf_r>
 8007b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b92:	f013 0201 	ands.w	r2, r3, #1
 8007b96:	d00a      	beq.n	8007bae <__swsetup_r+0x9a>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	60a2      	str	r2, [r4, #8]
 8007b9c:	6962      	ldr	r2, [r4, #20]
 8007b9e:	4252      	negs	r2, r2
 8007ba0:	61a2      	str	r2, [r4, #24]
 8007ba2:	6922      	ldr	r2, [r4, #16]
 8007ba4:	b942      	cbnz	r2, 8007bb8 <__swsetup_r+0xa4>
 8007ba6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007baa:	d1c5      	bne.n	8007b38 <__swsetup_r+0x24>
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	0799      	lsls	r1, r3, #30
 8007bb0:	bf58      	it	pl
 8007bb2:	6962      	ldrpl	r2, [r4, #20]
 8007bb4:	60a2      	str	r2, [r4, #8]
 8007bb6:	e7f4      	b.n	8007ba2 <__swsetup_r+0x8e>
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e7f7      	b.n	8007bac <__swsetup_r+0x98>
 8007bbc:	20000020 	.word	0x20000020

08007bc0 <_raise_r>:
 8007bc0:	291f      	cmp	r1, #31
 8007bc2:	b538      	push	{r3, r4, r5, lr}
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	d904      	bls.n	8007bd4 <_raise_r+0x14>
 8007bca:	2316      	movs	r3, #22
 8007bcc:	6003      	str	r3, [r0, #0]
 8007bce:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bd6:	b112      	cbz	r2, 8007bde <_raise_r+0x1e>
 8007bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bdc:	b94b      	cbnz	r3, 8007bf2 <_raise_r+0x32>
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 f830 	bl	8007c44 <_getpid_r>
 8007be4:	4622      	mov	r2, r4
 8007be6:	4601      	mov	r1, r0
 8007be8:	4628      	mov	r0, r5
 8007bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bee:	f000 b817 	b.w	8007c20 <_kill_r>
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d00a      	beq.n	8007c0c <_raise_r+0x4c>
 8007bf6:	1c59      	adds	r1, r3, #1
 8007bf8:	d103      	bne.n	8007c02 <_raise_r+0x42>
 8007bfa:	2316      	movs	r3, #22
 8007bfc:	6003      	str	r3, [r0, #0]
 8007bfe:	2001      	movs	r0, #1
 8007c00:	e7e7      	b.n	8007bd2 <_raise_r+0x12>
 8007c02:	2100      	movs	r1, #0
 8007c04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c08:	4620      	mov	r0, r4
 8007c0a:	4798      	blx	r3
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e7e0      	b.n	8007bd2 <_raise_r+0x12>

08007c10 <raise>:
 8007c10:	4b02      	ldr	r3, [pc, #8]	@ (8007c1c <raise+0xc>)
 8007c12:	4601      	mov	r1, r0
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f7ff bfd3 	b.w	8007bc0 <_raise_r>
 8007c1a:	bf00      	nop
 8007c1c:	20000020 	.word	0x20000020

08007c20 <_kill_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	@ (8007c40 <_kill_r+0x20>)
 8007c24:	2300      	movs	r3, #0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	f7f9 ff29 	bl	8001a84 <_kill>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	d102      	bne.n	8007c3c <_kill_r+0x1c>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	b103      	cbz	r3, 8007c3c <_kill_r+0x1c>
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000888 	.word	0x20000888

08007c44 <_getpid_r>:
 8007c44:	f7f9 bf16 	b.w	8001a74 <_getpid>

08007c48 <__swhatbuf_r>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c50:	2900      	cmp	r1, #0
 8007c52:	b096      	sub	sp, #88	@ 0x58
 8007c54:	4615      	mov	r5, r2
 8007c56:	461e      	mov	r6, r3
 8007c58:	da0d      	bge.n	8007c76 <__swhatbuf_r+0x2e>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c60:	f04f 0100 	mov.w	r1, #0
 8007c64:	bf14      	ite	ne
 8007c66:	2340      	movne	r3, #64	@ 0x40
 8007c68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	6031      	str	r1, [r6, #0]
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	b016      	add	sp, #88	@ 0x58
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	466a      	mov	r2, sp
 8007c78:	f000 f848 	bl	8007d0c <_fstat_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	dbec      	blt.n	8007c5a <__swhatbuf_r+0x12>
 8007c80:	9901      	ldr	r1, [sp, #4]
 8007c82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c8a:	4259      	negs	r1, r3
 8007c8c:	4159      	adcs	r1, r3
 8007c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c92:	e7eb      	b.n	8007c6c <__swhatbuf_r+0x24>

08007c94 <__smakebuf_r>:
 8007c94:	898b      	ldrh	r3, [r1, #12]
 8007c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c98:	079d      	lsls	r5, r3, #30
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	d507      	bpl.n	8007cb0 <__smakebuf_r+0x1c>
 8007ca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	6123      	str	r3, [r4, #16]
 8007ca8:	2301      	movs	r3, #1
 8007caa:	6163      	str	r3, [r4, #20]
 8007cac:	b003      	add	sp, #12
 8007cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb0:	ab01      	add	r3, sp, #4
 8007cb2:	466a      	mov	r2, sp
 8007cb4:	f7ff ffc8 	bl	8007c48 <__swhatbuf_r>
 8007cb8:	9f00      	ldr	r7, [sp, #0]
 8007cba:	4605      	mov	r5, r0
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7fe febe 	bl	8006a40 <_malloc_r>
 8007cc4:	b948      	cbnz	r0, 8007cda <__smakebuf_r+0x46>
 8007cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cca:	059a      	lsls	r2, r3, #22
 8007ccc:	d4ee      	bmi.n	8007cac <__smakebuf_r+0x18>
 8007cce:	f023 0303 	bic.w	r3, r3, #3
 8007cd2:	f043 0302 	orr.w	r3, r3, #2
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	e7e2      	b.n	8007ca0 <__smakebuf_r+0xc>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	6020      	str	r0, [r4, #0]
 8007cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	9b01      	ldr	r3, [sp, #4]
 8007ce6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007cea:	b15b      	cbz	r3, 8007d04 <__smakebuf_r+0x70>
 8007cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 f81d 	bl	8007d30 <_isatty_r>
 8007cf6:	b128      	cbz	r0, 8007d04 <__smakebuf_r+0x70>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f023 0303 	bic.w	r3, r3, #3
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	431d      	orrs	r5, r3
 8007d08:	81a5      	strh	r5, [r4, #12]
 8007d0a:	e7cf      	b.n	8007cac <__smakebuf_r+0x18>

08007d0c <_fstat_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d07      	ldr	r5, [pc, #28]	@ (8007d2c <_fstat_r+0x20>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	f7f9 ff13 	bl	8001b44 <_fstat>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d102      	bne.n	8007d28 <_fstat_r+0x1c>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	b103      	cbz	r3, 8007d28 <_fstat_r+0x1c>
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000888 	.word	0x20000888

08007d30 <_isatty_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d06      	ldr	r5, [pc, #24]	@ (8007d4c <_isatty_r+0x1c>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7f9 ff12 	bl	8001b64 <_isatty>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_isatty_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_isatty_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20000888 	.word	0x20000888

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr
